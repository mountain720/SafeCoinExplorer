{"version":3,"sources":["utils/url.ts","utils/sentry.ts","providers/cluster.tsx","utils/index.tsx","components/common/Overlay.tsx","components/ClusterModal.tsx","utils/date.ts","components/MessageBanner.tsx","img/logos-solana/dark-explorer-logo.svg","components/ClusterStatusButton.tsx","components/Navbar.tsx","tokenRegistry.ts","serumMarketRegistry.ts","utils/tx.ts","components/SearchBar.tsx","providers/cache.tsx","providers/accounts/history.tsx","validators/pubkey.ts","validators/accounts/token.ts","providers/accounts/tokens.tsx","validators/index.ts","validators/bignum.ts","validators/accounts/stake.ts","validators/accounts/vote.ts","validators/accounts/nonce.ts","validators/accounts/sysvar.ts","validators/accounts/config.ts","providers/accounts/flagged-accounts.tsx","providers/accounts/index.tsx","components/common/TableCardBody.tsx","components/common/Address.tsx","components/account/StakeAccountSection.tsx","components/account/UnknownAccountCard.tsx","components/account/TokenAccountSection.tsx","components/common/ErrorCard.tsx","components/common/LoadingCard.tsx","components/account/OwnedTokensCard.tsx","components/common/Signature.tsx","components/common/Slot.tsx","components/account/TransactionHistoryCard.tsx","providers/transactions/details.tsx","components/instruction/token/types.ts","components/instruction/token-swap/types.ts","components/instruction/token-lending/types.ts","components/instruction/serum/types.ts","providers/transactions/index.tsx","components/instruction/RawDetails.tsx","components/instruction/RawParsedDetails.tsx","components/instruction/InstructionCard.tsx","components/instruction/UnknownDetailsCard.tsx","components/instruction/system/TransferDetailsCard.tsx","components/instruction/system/AllocateDetailsCard.tsx","components/common/Copyable.tsx","components/instruction/system/AllocateWithSeedDetailsCard.tsx","components/instruction/system/AssignDetailsCard.tsx","components/instruction/system/AssignWithSeedDetailsCard.tsx","components/instruction/system/CreateDetailsCard.tsx","components/instruction/system/CreateWithSeedDetailsCard.tsx","components/instruction/system/NonceInitializeDetailsCard.tsx","components/instruction/system/NonceAdvanceDetailsCard.tsx","components/instruction/system/NonceWithdrawDetailsCard.tsx","components/instruction/system/NonceAuthorizeDetailsCard.tsx","components/instruction/system/TransferWithSeedDetailsCard.tsx","components/instruction/system/types.ts","components/instruction/system/SystemDetailsCard.tsx","components/instruction/stake/InitializeDetailsCard.tsx","components/instruction/stake/DelegateDetailsCard.tsx","components/instruction/stake/AuthorizeDetailsCard.tsx","components/instruction/stake/SplitDetailsCard.tsx","components/instruction/stake/WithdrawDetailsCard.tsx","components/instruction/stake/DeactivateDetailsCard.tsx","components/instruction/stake/types.ts","components/instruction/stake/MergeDetailsCard.tsx","components/instruction/stake/StakeDetailsCard.tsx","components/instruction/bpf-loader/types.ts","components/instruction/bpf-loader/BpfLoaderDetailsCard.tsx","components/common/InfoTooltip.tsx","components/instruction/token/TokenDetailsCard.tsx","components/instruction/serum/NewOrderDetailsCard.tsx","components/instruction/serum/MatchOrdersDetailsCard.tsx","components/instruction/serum/InitializeMarketDetailsCard.tsx","components/instruction/serum/ConsumeEventsDetails.tsx","components/instruction/serum/CancelOrderDetails.tsx","components/instruction/serum/CancelOrderByClientIdDetails.tsx","components/instruction/serum/SettleFundsDetailsCard.tsx","components/instruction/SerumDetailsCard.tsx","components/instruction/TokenSwapDetailsCard.tsx","components/instruction/TokenLendingDetailsCard.tsx","components/instruction/MemoDetailsCard.tsx","components/common/BalanceDelta.tsx","components/transaction/TokenBalancesCard.tsx","pages/TransactionDetailsPage.tsx","components/account/TokenHistoryCard.tsx","providers/mints/largest.tsx","components/account/TokenLargestAccountsCard.tsx","components/common/Account.tsx","components/account/VoteAccountSection.tsx","components/account/NonceAccountSection.tsx","components/account/VotesCard.tsx","components/account/SysvarAccountSection.tsx","components/account/SlotHashesCard.tsx","components/account/StakeHistoryCard.tsx","components/account/BlockhashesCard.tsx","components/account/ConfigAccountSection.tsx","pages/AccountDetailsPage.tsx","providers/stats/solanaDashboardInfo.tsx","providers/stats/solanaPerformanceInfo.tsx","providers/stats/solanaClusterStats.tsx","components/TpsCard.tsx","pages/ClusterStatsPage.tsx","providers/richList.tsx","providers/supply.tsx","components/TopAccountsCard.tsx","components/SupplyCard.tsx","providers/block.tsx","pages/SupplyPage.tsx","components/block/BlockHistoryCard.tsx","components/block/BlockRewardsCard.tsx","components/block/BlockOverviewCard.tsx","pages/BlockDetailsPage.tsx","App.tsx","providers/stats/index.tsx","providers/mints/index.tsx","index.tsx"],"names":["useQuery","URLSearchParams","useLocation","search","clusterPath","pathname","location","urlParams","cluster","get","customUrl","newParams","set","toString","pickClusterParams","reportError","err","tags","console","error","Sentry","ClusterStatus","Cluster","CLUSTERS","MainnetBeta","Testnet","Devnet","Custom","clusterName","MAINNET_BETA_URL","clusterApiUrl","TESTNET_URL","DEVNET_URL","clusterUrl","DEFAULT_CLUSTER","clusterReducer","state","action","status","Connected","Failure","Connecting","ModalContext","React","createContext","undefined","StateContext","DispatchContext","ClusterProvider","children","useReducer","dispatch","useState","showModal","setShowModal","query","parseQuery","enableCustomUrl","localStorage","getItem","history","useHistory","useEffect","has","delete","push","length","updateCluster","Provider","value","a","connection","Connection","getFirstAvailableBlock","firstAvailableBlock","useCluster","context","useContext","Error","url","name","useClusterModal","normalizeTokenAmount","raw","decimals","parseInt","Math","pow","lamportsToSol","lamports","abs","signMultiplier","isNeg","lamportsString","padStart","splitIndex","solString","slice","parseFloat","lamportsToSolString","maximumFractionDigits","sol","className","Intl","NumberFormat","format","HUMANIZER","HumanizeDuration","HumanizeDurationLanguage","wrap","input","result","substr","join","Overlay","show","ClusterModal","setShow","onClose","onClick","e","stopPropagation","ClusterToggle","type","defaultChecked","id","onChange","target","checked","setItem","removeItem","htmlFor","CustomClusterInput","activeSuffix","active","updateCustomUrl","useUpdateCustomUrl","editing","setEditing","customClass","prefix","onUrlInput","useDebounceCallback","inputTextClass","to","clusterLocation","defaultValue","onFocus","onBlur","onInput","currentTarget","x","assertUnreachable","map","net","index","btnClass","params","slug","clusterSlug","displayTimestamp","unixTimestamp","shortTimeZoneName","expireDate","Date","dateString","DateTimeFormat","year","month","day","timeString","hour","minute","second","hour12","timeZoneName","displayTimestampUtc","timeZone","setOptions","language","spacer","delimiter","round","units","largest","addLanguage","y","mo","w","d","h","m","s","ms","decimal","announcements","Map","MessageBanner","announcement","timeframe","message","start","end","estimate","now","getTime","ClusterStatusBanner","Button","ClusterStatusButton","statusName","btnClasses","variant","role","aria-hidden","Navbar","collapse","setCollapse","src","Logo","width","alt","exact","TokenRegistry","address","MAINNET_TOKENS","all","SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt","symbol","logo","icon","website","MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L","EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v","AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3","CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG","Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8","BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4","BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW","So11111111111111111111111111111111111111112","SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX","BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN","CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K","HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e","AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy","AcstFzGGawvvdVhYV9bftr7fmBHbePUjhv53YK1W3dZo","HsY8PNar8VExU335ZRYzg89fX7qa4upYu6vPMPFyCDdK","EDP8TpLJ77M3KiDgFkZW4v4mhmKJHZi9gehYXenfFZuL","BrUKFwAABkExb1xzYU4NkRWzjBihVQdZ3PBz4m5S8if3","F6ST1wWkx2PeH45sKmRxo1boyuzzWCfpnvyKL4BGeLxF","dZytJ7iPDcCu9mKe3srL7bpUeaR3zzkcVqbtqsmxtXZ","EjFGGJSyp9UDS8aqafET5LX49nsG326MeNezYzpiwgpQ","FkmkTr4en8CXkfo9jAwEMov6PVNLpYMzWr3Udqf9so8Z","AiD7J6D5Hny5DJB1MrYBc2ePQqy2Yh4NoxWwYfR7PzxH","bxiA13fpU1utDmYuUvxvyMT8odew5FEm96MRv7ij3eb","GoC24kpj6TkvjzspXrjSJC2CVb5zMWhLyRcHJh9yKjRF","oCUduD44ETuZ65bpWdPzPDSnAdreg1sJrugfwyFZVHV","GyRkPAxpd9XrMHcBF6fYHVRSZQvQBwAGKAGQeBPSKzMq","AgdBQN2Sy2abiZ2KToWeUsQ9PHdCv95wt6kVWRf5zDkx","EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp","kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6","FtgGSFADXBtroxq8VCausXRr2of47QBf5AS1NtZCu4GD","MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb","Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB","MARKET_REGISTRY","PROGRAM_NAMES","SerumMarketRegistry","SEARCHABLE_PROGRAMS","BREAK_SOLANA","BUDGET","CONFIG","EXCHANGE","STAKE","STORAGE","SYSTEM","VEST","VOTE","SPL_TOKEN","ASSOCIATED_TOKEN","MEMO","SWAP","LENDING","PROGRAM_NAME_BY_ID","BrEAK7zGZ6dM71zUDACDqJnekihmwF15noTddWTsknjC","Budget1111111111111111111111111111111111111","Config1111111111111111111111111111111111111","Exchange11111111111111111111111111111111111","StakeProgram","programId","toBase58","SystemProgram","VOTE_PROGRAM_ID","LOADER_IDS","MoveLdr111111111111111111111111111111111111","NativeLoader1111111111111111111111111111111","BPF_LOADER_DEPRECATED_PROGRAM_ID","BPF_LOADER_PROGRAM_ID","SYSVAR_ID","Sysvar1111111111111111111111111111111111111","SYSVAR_IDS","SYSVAR_CLOCK_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","addressLabel","displayAddress","intoTransactionInstruction","tx","instruction","keys","accounts","account","accountKey","accountKeys","find","pubkey","equals","isSigner","signer","isWritable","writable","TransactionInstruction","data","bs58","decode","SearchBar","setSearch","selectRef","useRef","ref","current","options","buildOptions","noOptionsMessage","placeholder","inputValue","blurInputOnSelect","onMenuClose","blur","meta","styles","style","pointerEvents","onInputChange","components","DropdownIndicator","classNamePrefix","FetchStatus","ActionType","SEARCHABLE_LOADERS","rawSearch","trim","programOptions","matchedPrograms","Object","entries","filter","includes","toLowerCase","label","buildProgramOptions","loaderOptions","matchedLoaders","buildLoaderOptions","sysvarOptions","matchedSysvars","buildSysvarOptions","tokenOptions","matchedTokens","details","searchLower","buildTokenOptions","isNaN","Number","decoded","defaultReconciler","entry","update","defaultReducer","reducer","reconciler","Clear","Update","key","combineFetched","fetched","before","findIndex","f","signature","concat","reconcile","foundOldest","HistoryProvider","customReducer","useMemo","Cache","fetchAccountHistory","Fetching","getConfirmedSignaturesForAddress2","limit","Fetched","FetchFailed","useFetchAccountHistory","useCallback","refresh","oldest","PubkeyValue","struct","PublicKey","Pubkey","coercion","TokenAccountType","enums","AccountState","TokenAmount","pick","number","uiAmount","amount","string","TokenAccountInfo","mint","owner","tokenAmount","delegate","optional","isNative","boolean","rentExemptReserve","delegatedAmount","closeAuthority","MintAccountInfo","mintAuthority","nullable","supply","isInitialized","freezeAuthority","MultisigAccountInfo","numRequiredSigners","numValidSigners","signers","array","TokenAccount","info","any","TokensProvider","TOKEN_PROGRAM_ID","getParsedTokenAccountsByOwner","tokens","accountInfo","parsedInfo","parsed","coerce","useAccountOwnedTokens","useFetchAccountOwnedTokens","fetchAccountTokens","ParsedInfo","object","BigNumValue","BN","BigNum","StakeAccountType","StakeMeta","authorized","staker","withdrawer","lockup","epoch","custodian","StakeAccountInfo","stake","delegation","voter","activationEpoch","deactivationEpoch","warmupCooldownRate","creditsObserved","StakeAccount","VoteAccountType","AuthorizedVoter","authorizedVoter","PriorVoter","authorizedPubkey","epochOfLastAuthorizedSwitch","targetEpoch","EpochCredits","credits","previousCredits","Vote","slot","confirmationCount","VoteAccountInfo","authorizedVoters","authorizedWithdrawer","commission","epochCredits","lastTimestamp","timestamp","nodePubkey","priorVoters","rootSlot","votes","VoteAccount","NonceAccountType","NonceAccountInfo","authority","blockhash","feeCalculator","lamportsPerSignature","NonceAccount","ClockAccountInfo","leaderScheduleEpoch","SysvarClockAccount","literal","EpochScheduleInfo","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","SysvarEpochScheduleAccount","FeesInfo","SysvarFeesAccount","RecentBlockhashesEntry","RecentBlockhashesInfo","SysvarRecentBlockhashesAccount","RentInfo","lamportsPerByteYear","exemptionThreshold","burnPercent","SysvarRentAccount","RewardsInfo","validatorPointValue","SysvarRewardsAccount","SlotHashEntry","hash","SlotHashesInfo","SysvarSlotHashesAccount","SlotHistoryInfo","nextSlot","bits","SysvarSlotHistoryAccount","StakeHistoryEntryItem","effective","activating","deactivating","StakeHistoryEntry","stakeHistory","StakeHistoryInfo","SysvarStakeHistoryAccount","SysvarAccount","union","StakeConfigInfo","slashPenalty","ConfigKey","ValidatorInfoConfigData","record","ValidatorInfoConfigInfo","configData","ValidatorInfoAccount","StakeConfigInfoAccount","ConfigAccount","initialState","FlaggedContext","FlaggedAccountsProvider","flaggedAccounts","setFlaggedAccounts","window","fetch","then","res","text","body","split","forEach","AccountsProvider","getParsedAccountInfo","space","program","getStakeActivation","activation","executable","fetchStatus","useAccountInfo","useMintAccountInfo","useFetchAccountInfo","fetchAccountInfo","TableCardBody","Address","alignRight","link","truncate","truncateUnknown","setState","copyIcon","navigator","clipboard","writeText","setTimeout","content","MAX_EPOCH","sub","StakeAccountSection","stakeAccount","stakeAccountType","LockupCard","OverviewCard","DelegationCard","AuthoritiesCard","prettyTimestamp","TYPE_NAMES","uninitialized","initialized","delegated","rewardsPool","voterPubkey","eq","activationState","displayStatus","inactive","hasLockup","UnknownAccountCard","TokenAccountSection","tokenAccount","MintAccountCard","TokenAccountCard","MultisigAccountCard","mintAddress","fetchInfo","tokenInfo","toFixed","rel","href","unit","balance","ErrorCard","retry","retryText","subtext","buttonText","LoadingCard","OwnedTokensCard","ownedTokens","showDropdown","setDropdown","display","useQueryDisplay","toggle","HoldingsDetailTable","HoldingsSummaryTable","detailsList","showLogos","some","t","tokenDetails","mappedTokens","token","totalByMint","DisplayDropdown","displayOption","buildLocation","Signature","copyButton","Slot","toLocaleString","TransactionHistoryCard","useAccountHistory","loadMore","transactions","hasTimestamps","element","blockTime","i","slotTransactions","statusText","statusClass","fetching","disabled","DetailsProvider","getParsedConfirmedTransaction","transaction","useFetchTransactionDetails","fetchDetails","useTransactionDetails","getConfirmedTransaction","useFetchRawTransaction","fetchRawTransaction","TokenAmountUi","InitializeMint","rentSysvar","InitializeAccount","InitializeMultisig","multisig","Transfer","source","destination","multisigAuthority","Approve","multisigOwner","Revoke","AuthorityType","SetAuthority","authorityType","newAuthority","MintTo","multisigMintAuthority","Burn","CloseAccount","FreezeAccount","multisigFreezeAuthority","ThawAccount","TransferChecked","ApproveChecked","MintToChecked","BurnChecked","TokenInstructionType","IX_STRUCTS","initializeMint","initializeAccount","initializeMultisig","transfer","approve","revoke","setAuthority","mintTo","burn","closeAccount","freezeAccount","thawAccount","transfer2","approve2","mintTo2","burn2","transferChecked","approveChecked","mintToChecked","burnChecked","IX_TITLES","PROGRAM_IDS","INSTRUCTION_LOOKUP","0","1","2","3","4","5","isTokenSwapInstruction","parseTokenSwapInstructionTitle","code","6","7","8","isTokenLendingInstruction","parseTokenLendingInstructionTitle","Side","OrderType","InitializeMarketDecode","baseLotSize","quoteLotSize","feeRateBps","quoteDustThreshold","vaultSignerNonce","decodeInitializeMarket","ix","decodeInstruction","initializeMarket","market","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","baseMint","quoteMint","NewOrderDecode","side","limitPrice","maxQuantity","orderType","clientId","feeDiscountPubkey","decodeNewOrder","newOrder","openOrders","payer","MatchOrdersDecode","decodeMatchOrders","matchOrders","ConsumeEventsDecode","decodeConsumeEvents","consumeEvents","openOrdersAccounts","k","CancelOrderDecode","orderId","openOrdersSlot","decodeCancelOrder","cancelOrder","CancelOrderByClientIdDecode","decodeCancelOrderByClientId","cancelOrderByClientId","decodeSettleFunds","settleFunds","baseWallet","quoteWallet","vaultSigner","referrerQuoteWallet","isSerumInstruction","MARKETS","SERUM_CODE_LOOKUP","9","parseSerumInstructionCode","readUInt32LE","parseSerumInstructionTitle","TransactionsProvider","getSignatureStatus","searchTransactionHistory","confirmations","getBlockTime","useTransactionStatus","useFetchTransactionStatus","fetchTransactionStatus","RawDetails","keyIndex","RawParsedDetails","JSON","stringify","InstructionCard","title","defaultRaw","innerCards","childIndex","ixError","Array","isArray","errorIndex","isInteger","ixResult","resultClass","showRaw","setShowRaw","SignatureContext","instructions","fetchRaw","r","colSpan","UnknownDetailsCard","TransferDetailsCard","props","AllocateDetailsCard","Popover","bottom","right","Copyable","onMouseOver","onMouseOut","AllocateWithSeedDetailsCard","base","seed","AssignDetailsCard","AssignWithSeedDetailsCard","CreateDetailsCard","newAccount","CreateWithSeedDetailsCard","NonceInitializeDetailsCard","nonceAccount","nonceAuthority","NonceAdvanceDetailsCard","NonceWithdrawDetailsCard","NonceAuthorizeDetailsCard","newAuthorized","TransferWithSeedDetailsCard","sourceBase","sourceSeed","sourceOwner","CreateAccountInfo","AssignInfo","TransferInfo","CreateAccountWithSeedInfo","AdvanceNonceInfo","WithdrawNonceInfo","InitializeNonceInfo","AuthorizeNonceInfo","AllocateInfo","AllocateWithSeedInfo","AssignWithSeedInfo","TransferWithSeedInfo","SystemDetailsCard","signatures","InitializeDetailsCard","toUTCString","DelegateDetailsCard","voteAccount","stakeAuthority","AuthorizeDetailsCard","SplitDetailsCard","newSplitAccount","WithdrawDetailsCard","withdrawAuthority","DeactivateDetailsCard","InitializeInfo","DelegateInfo","AuthorizeInfo","SplitInfo","WithdrawInfo","DeactivateInfo","MergeInfo","stakeHistorySysvar","clockSysvar","MergeDetailsCard","StakeDetailsCard","WriteInfo","bytes","offset","FinalizeInfo","BpfLoaderDetailsCard","BpfLoaderWriteDetailsCard","BpfLoaderFinalizeDetailsCard","InfoTooltip","justify","TokenDetailsCard","rawType","coerced","TokenInstruction","tokenAddress","infoMintAddress","useTokenAccountInfo","mintInfo","attributes","tokenSymbol","every","v","publicKey","charAt","toUpperCase","tag","labelSuffix","minimumFractionDigits","NewOrderDetailsCard","MatchOrdersDetailsCard","InitializeMarketDetailsCard","ConsumeEventsDetailsCard","CancelOrderDetailsCard","CancelOrderByClientIdDetailsCard","SettleFundsDetailsCard","SerumDetailsCard","parseSerumInstructionKey","TokenSwapDetailsCard","TokenLendingDetailsCard","MemoDetailsCard","BalanceDelta","sols","delta","isSol","toNumber","gt","lt","TokenBalancesCard","preTokenBalances","postTokenBalances","rows","preBalanceMap","accountIndex","uiTokenAmount","preBalance","BigNumber","minus","sort","b","generateTokenBalanceRows","accountRows","AutoRefresh","INNER_INSTRUCTIONS_START_SLOT","TransactionDetailsPage","zeroConfirmationRetries","setZeroConfirmationRetries","autoRefresh","Inactive","BailedOut","Active","retries","StatusCard","AccountsCard","InstructionsSection","ProgramLogSection","clusterStatus","intervalHandle","setInterval","clearInterval","fee","recentBlockhash","isNonce","SystemInstruction","decodeInstructionType","renderResult","pre","preBalances","post","postBalances","innerInstructions","instructionDetails","renderInstructionCard","logMessages","replace","transactionIx","TokenHistoryCard","TokenHistoryTable","accountHistories","useAccountHistories","transactionDetailsCache","useTransactionDetailsCache","filteredTokens","fetchHistories","allFoundOldest","allFetchedSome","oldestSlot","earliest","max","failed","sigSet","Set","mintAndTxs","flatMap","add","TokenTransactionRow","FilterDropdown","filterOptions","nameLookup","formatTokenName","filterOption","instructionTypeName","memo","tokenInstructionNames","transactionInstruction","inner","instructionType","InstructionDetails","expanded","setExpanded","instructionTypes","preventDefault","LargestAccountsProvider","getTokenLargestAccounts","Promise","coerceParsedAccountInfo","useFetchTokenLargestAccounts","fetchLargestAccounts","parsedData","TokenLargestAccountsCard","largestAccounts","useTokenLargestTokens","refreshLargest","unitLabel","balanceFixedPoint","reduce","prev","decimalIndex","indexOf","supplyTotal","renderAccountRow","percent","fixedLocaleNumber","fixedPoint","AccountHeader","AccountAddressRow","AccountBalanceRow","VoteAccountSection","NonceAccountSection","VotesCard","reverse","vote","SysvarAccountSection","sysvarAccount","SysvarAccountClockCard","SysvarAccountRentCard","SysvarAccountRewardsCard","SysvarAccountEpochScheduleCard","SysvarAccountFeesCard","SysvarAccountRecentBlockhashesCard","SysvarAccountSlotHashes","SysvarAccountSlotHistory","SysvarAccountStakeHistory","from","val","validatorPointValueFormatted","maximumSignificantDigits","SlotHashesCard","slotHashes","StakeHistoryCard","BlockhashesCard","blockhashes","MAX_SLASH_PENALTY","ConfigAccountSection","configAccount","StakeConfigCard","ValidatorInfoCard","warmupCooldownFormatted","slashPenaltyFormatted","keybaseUsername","DashboardInfoActionType","PerformanceInfoActionType","TABS_LOOKUP","path","TOKEN_TABS_HIDDEN","AccountDetailsPage","tab","DetailsSections","fetchAccount","useFlaggedAccounts","tabs","programTypeKey","getTabs","moreTab","InfoSection","MoreSection","dashboardInfoReducer","SetLastBlockTime","lastBlockTime","SetPerfSamples","samples","sample","numSlots","samplePeriodSecs","samplesInHour","avgSlotTime_1h","sum","cur","epochInfo","absoluteSlot","ClusterStatsStatus","Ready","Loading","avgSlotTime_1min","SetEpochInfo","floor","SetError","Reset","performanceInfoReducer","short","numTransactions","avgTps","medium","downsampleByFactor","long","perfHistory","historyMaxTps","transactionCount","SetTransactionCount","series","factor","num","downsampledIndex","mean","differential","n","initialPerformanceInfo","initialDashboardInfo","blockHeight","slotIndex","slotsInEpoch","StatsProviderContext","DashboardContext","PerformanceContext","SolanaClusterStatsProvider","setActive","dashboardInfo","dispatchDashboardInfo","performanceInfo","dispatchPerformanceInfo","resetData","lastSlot","getPerformanceSamples","getRecentPerformanceSamples","getTransactionCount","getEpochInfo","performanceInterval","transactionCountInterval","epochInfoInterval","blockTimeInterval","setTimedOut","useStatsProvider","usePerformanceInfo","TpsCard","TpsCardBody","StatsNotReady","TpsBarChart","SERIES","SERIES_INFO","interval","CUSTOM_TOOLTIP","tooltipModel","tooltipEl","document","getElementById","createElement","innerHTML","appendChild","opacity","dataPoints","tooltipContent","querySelector","innerHtml","position","this","_chart","canvas","getBoundingClientRect","left","pageXOffset","caretX","top","pageYOffset","caretY","setSeries","averageTps","AnimatedTransactionCount","seriesData","chartOptions","tooltips","intersect","enabled","custom","legend","scales","xAxes","ticks","gridLines","yAxes","stepSize","fontSize","fontColor","beginAtZero","suggestedMax","animation","duration","hover","animationDuration","responsiveAnimationDuration","CHART_OPTIONS","seriesLength","chartData","labels","datasets","backgroundColor","hoverBackgroundColor","borderWidth","classNames","height","txCountRef","countUp","period","lastUpdate","txCount","elapsedPeriods","countUpEnd","PERF_UPDATE_SEC","delay","useEasing","preserveValue","separator","Status","ClusterStatsPage","StatsCardBody","useDashboardInfo","hourlySlotTime","averageSlotTime","currentEpoch","epochProgress","epochTimeRemaining","slots","slotTime","humanize","slotsToHumanString","timedOut","clearTimeout","RichListProvider","Idle","Disconnected","getLargestAccounts","response","total","circulating","nonCirculating","SupplyProvider","getSupply","useSupply","TopAccountsCard","supplyCount","header","richList","useRichList","fetchRichList","useFetchRichList","useQueryFilter","filterTitle","SupplyCard","fetchSupply","useFetchSupply","renderHeader","SupplyPage","BlockProvider","getConfirmedBlock","block","useFetchBlock","fetchBlock","BlockHistoryCard","encode","BlockRewardsCard","rewardsDisplayed","setRewardsDisplayed","rewards","reward","postBalance","percentChange","rewardType","displayed","BlockOverviewCard","confirmedBlock","useBlock","parentSlot","previousBlockhash","BlockDetailsPage","output","ADDRESS_ALIASES","TX_ALIASES","App","render","match","StatsProvider","MintsProvider","dsn","ReactDOM"],"mappings":"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","file":"static/js/main.916ce946.chunk.js","sourcesContent":["import { useLocation } from \"react-router-dom\";\nimport { Location } from \"history\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const clusterPath = (pathname: string) => {\n  return (location: Location) => ({\n    ...pickClusterParams(location),\n    pathname,\n  });\n};\n\nexport function pickClusterParams(location: Location): Location {\n  const urlParams = new URLSearchParams(location.search);\n  const cluster = urlParams.get(\"cluster\");\n  const customUrl = urlParams.get(\"customUrl\");\n\n  // Pick the params we care about\n  const newParams = new URLSearchParams();\n  if (cluster) newParams.set(\"cluster\", cluster);\n  if (customUrl) newParams.set(\"customUrl\", customUrl);\n\n  return {\n    ...location,\n    search: newParams.toString(),\n  };\n}\n\nexport function findGetParameter(parameterName: string): string | null {\n  let result = null,\n    tmp = [];\n  window.location.search\n    .substr(1)\n    .split(\"&\")\n    .forEach(function (item) {\n      tmp = item.split(\"=\");\n      if (tmp[0].toLowerCase() === parameterName.toLowerCase()) {\n        if (tmp.length === 2) {\n          result = decodeURIComponent(tmp[1]);\n        } else if (tmp.length === 1) {\n          result = \"\";\n        }\n      }\n    });\n  return result;\n}\n\nexport function findPathSegment(pathName: string): string | null {\n  const segments = window.location.pathname.substr(1).split(\"/\");\n  if (segments.length < 2) return null;\n\n  // remove all but last two segments\n  segments.splice(0, segments.length - 2);\n\n  if (segments[0] === pathName) {\n    return segments[1];\n  }\n\n  return null;\n}\n","import * as Sentry from \"@sentry/react\";\n\ntype Tags =\n  | {\n      [key: string]: string;\n    }\n  | undefined;\n\nexport function reportError(err: Error, tags: Tags) {\n  console.error(err);\n  try {\n    Sentry.captureException(err, {\n      tags,\n    });\n  } catch (err) {\n    // Sentry can fail if error rate limit is reached\n  }\n}\n","import React from \"react\";\nimport { clusterApiUrl, Connection } from \"@solana/web3.js\";\nimport { useQuery } from \"../utils/url\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum ClusterStatus {\n  Connected,\n  Connecting,\n  Failure,\n}\n\nexport enum Cluster {\n  MainnetBeta,\n  Testnet,\n  Devnet,\n  Custom,\n}\n\nexport const CLUSTERS = [\n  Cluster.MainnetBeta,\n  Cluster.Testnet,\n  Cluster.Devnet,\n  Cluster.Custom,\n];\n\nexport function clusterSlug(cluster: Cluster): string {\n  switch (cluster) {\n    case Cluster.MainnetBeta:\n      return \"mainnet-beta\";\n    case Cluster.Testnet:\n      return \"testnet\";\n    case Cluster.Devnet:\n      return \"devnet\";\n    case Cluster.Custom:\n      return \"custom\";\n  }\n}\n\nexport function clusterName(cluster: Cluster): string {\n  switch (cluster) {\n    case Cluster.MainnetBeta:\n      return \"Mainnet Beta\";\n    case Cluster.Testnet:\n      return \"Testnet\";\n    case Cluster.Devnet:\n      return \"Devnet\";\n    case Cluster.Custom:\n      return \"Custom\";\n  }\n}\n\nexport const MAINNET_BETA_URL = clusterApiUrl(\"mainnet-beta\");\nexport const TESTNET_URL = clusterApiUrl(\"testnet\");\nexport const DEVNET_URL = clusterApiUrl(\"devnet\");\n\nexport function clusterUrl(cluster: Cluster, customUrl: string): string {\n  switch (cluster) {\n    case Cluster.Devnet:\n      return DEVNET_URL;\n    case Cluster.MainnetBeta:\n      return MAINNET_BETA_URL;\n    case Cluster.Testnet:\n      return TESTNET_URL;\n    case Cluster.Custom:\n      return customUrl;\n  }\n}\n\nexport const DEFAULT_CLUSTER = Cluster.MainnetBeta;\n\ninterface State {\n  cluster: Cluster;\n  customUrl: string;\n  firstAvailableBlock?: number;\n  status: ClusterStatus;\n}\n\ninterface Action {\n  status: ClusterStatus;\n  cluster: Cluster;\n  customUrl: string;\n  firstAvailableBlock?: number;\n}\n\ntype Dispatch = (action: Action) => void;\n\nfunction clusterReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ClusterStatus.Connected:\n    case ClusterStatus.Failure: {\n      if (\n        state.cluster !== action.cluster ||\n        state.customUrl !== action.customUrl\n      )\n        return state;\n      return action;\n    }\n    case ClusterStatus.Connecting: {\n      return action;\n    }\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Cluster {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"custom\":\n      return Cluster.Custom;\n    case \"devnet\":\n      return Cluster.Devnet;\n    case \"testnet\":\n      return Cluster.Testnet;\n    case \"mainnet-beta\":\n    default:\n      return Cluster.MainnetBeta;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\nconst ModalContext = React.createContext<[boolean, SetShowModal] | undefined>(\n  undefined\n);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ClusterProviderProps = { children: React.ReactNode };\nexport function ClusterProvider({ children }: ClusterProviderProps) {\n  const [state, dispatch] = React.useReducer(clusterReducer, {\n    cluster: DEFAULT_CLUSTER,\n    customUrl: \"\",\n    status: ClusterStatus.Connecting,\n  });\n  const [showModal, setShowModal] = React.useState(false);\n  const query = useQuery();\n  const cluster = parseQuery(query);\n  const enableCustomUrl = localStorage.getItem(\"enableCustomUrl\") !== null;\n  const customUrl = enableCustomUrl\n    ? query.get(\"customUrl\") || \"\"\n    : state.customUrl;\n  const history = useHistory();\n  const location = useLocation();\n\n  // Remove customUrl param if dev setting is disabled\n  React.useEffect(() => {\n    if (!enableCustomUrl && query.has(\"customUrl\")) {\n      query.delete(\"customUrl\");\n      history.push({ ...location, search: query.toString() });\n    }\n  }, [enableCustomUrl]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Reconnect to cluster when params change\n  React.useEffect(() => {\n    if (cluster === Cluster.Custom) {\n      // Remove cluster param if custom url has not been set\n      if (customUrl.length === 0) {\n        query.delete(\"cluster\");\n        history.push({ ...location, search: query.toString() });\n        return;\n      }\n    }\n\n    updateCluster(dispatch, cluster, customUrl);\n  }, [cluster, customUrl]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <ModalContext.Provider value={[showModal, setShowModal]}>\n          {children}\n        </ModalContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function updateCluster(\n  dispatch: Dispatch,\n  cluster: Cluster,\n  customUrl: string\n) {\n  dispatch({\n    status: ClusterStatus.Connecting,\n    cluster,\n    customUrl,\n  });\n\n  try {\n    const connection = new Connection(clusterUrl(cluster, customUrl));\n    const firstAvailableBlock = await connection.getFirstAvailableBlock();\n    dispatch({\n      status: ClusterStatus.Connected,\n      cluster,\n      customUrl,\n      firstAvailableBlock,\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { clusterUrl: clusterUrl(cluster, customUrl) });\n    }\n    dispatch({\n      status: ClusterStatus.Failure,\n      cluster,\n      customUrl,\n    });\n  }\n}\n\nexport function useUpdateCustomUrl() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useUpdateCustomUrl must be used within a ClusterProvider`);\n  }\n\n  return (customUrl: string) => {\n    updateCluster(dispatch, Cluster.Custom, customUrl);\n  };\n}\n\nexport function useCluster() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useCluster must be used within a ClusterProvider`);\n  }\n  return {\n    ...context,\n    url: clusterUrl(context.cluster, context.customUrl),\n    name: clusterName(context.cluster),\n  };\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ClusterProvider`);\n  }\n  return context;\n}\n","import React, { ReactNode } from \"react\";\nimport BN from \"bn.js\";\nimport {\n  HumanizeDuration,\n  HumanizeDurationLanguage,\n} from \"humanize-duration-ts\";\n\n// Switch to web3 constant when web3 updates superstruct\nexport const LAMPORTS_PER_SOL = 1000000000;\n\nexport const NUM_TICKS_PER_SECOND = 160;\nexport const DEFAULT_TICKS_PER_SLOT = 64;\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nexport function assertUnreachable(x: never): never {\n  throw new Error(\"Unreachable!\");\n}\n\nexport function normalizeTokenAmount(\n  raw: string | number,\n  decimals: number\n): number {\n  let rawTokens: number;\n  if (typeof raw === \"string\") rawTokens = parseInt(raw);\n  else rawTokens = raw;\n  return rawTokens / Math.pow(10, decimals);\n}\n\nexport function lamportsToSol(lamports: number | BN): number {\n  if (typeof lamports === \"number\") {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, \"0\");\n  const splitIndex = lamportsString.length - 9;\n  const solString =\n    lamportsString.slice(0, splitIndex) +\n    \".\" +\n    lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n\nexport function lamportsToSolString(\n  lamports: number | BN,\n  maximumFractionDigits: number = 9\n): ReactNode {\n  const sol = lamportsToSol(lamports);\n  return (\n    <>\n      ◎\n      <span className=\"text-monospace\">\n        {new Intl.NumberFormat(\"en-US\", { maximumFractionDigits }).format(sol)}\n      </span>\n    </>\n  );\n}\n\nconst HUMANIZER = new HumanizeDuration(new HumanizeDurationLanguage());\nHUMANIZER.setOptions({\n  language: \"short\",\n  spacer: \"\",\n  delimiter: \" \",\n  round: true,\n  units: [\"d\", \"h\", \"m\", \"s\"],\n  largest: 3,\n});\nHUMANIZER.addLanguage(\"short\", {\n  y: () => \"y\",\n  mo: () => \"mo\",\n  w: () => \"w\",\n  d: () => \"d\",\n  h: () => \"h\",\n  m: () => \"m\",\n  s: () => \"s\",\n  ms: () => \"ms\",\n  decimal: \".\",\n});\n\nexport function slotsToHumanString(\n  slots: number,\n  slotTime = MS_PER_SLOT\n): string {\n  return HUMANIZER.humanize(slots * slotTime);\n}\n\nexport function wrap(input: string, length: number): string {\n  var result = [];\n  while (input.length) {\n    result.push(input.substr(0, length));\n    input = input.substr(length);\n  }\n  return result.join(\"\\n\");\n}\n","import React from \"react\";\n\ntype OverlayProps = {\n  show: boolean;\n};\n\nexport function Overlay({ show }: OverlayProps) {\n  return <div className={`modal-backdrop fade${show ? \" show\" : \"\"}`}></div>;\n}\n","import React, { ChangeEvent } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { useDebounceCallback } from \"@react-hook/debounce\";\nimport { Location } from \"history\";\nimport {\n  useCluster,\n  ClusterStatus,\n  clusterUrl,\n  clusterName,\n  clusterSlug,\n  CLUSTERS,\n  Cluster,\n  useClusterModal,\n  useUpdateCustomUrl,\n} from \"providers/cluster\";\nimport { assertUnreachable } from \"../utils\";\nimport { Overlay } from \"./common/Overlay\";\nimport { useQuery } from \"utils/url\";\n\nexport function ClusterModal() {\n  const [show, setShow] = useClusterModal();\n  const onClose = () => setShow(false);\n  const enableCustomUrl = localStorage.getItem(\"enableCustomUrl\") !== null;\n  const onToggleCustomUrlFeature = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      localStorage.setItem(\"enableCustomUrl\", \"\");\n    } else {\n      localStorage.removeItem(\"enableCustomUrl\");\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={`modal fade fixed-right${show ? \" show\" : \"\"}`}\n        onClick={onClose}\n      >\n        <div className=\"modal-dialog modal-dialog-vertical\">\n          <div className=\"modal-content\">\n            <div className=\"modal-body\" onClick={(e) => e.stopPropagation()}>\n              <span className=\"c-pointer\" onClick={onClose}>\n                &times;\n              </span>\n\n              <h2 className=\"text-center mb-4 mt-4\">Choose a Cluster</h2>\n              <ClusterToggle />\n\n              <hr />\n\n              <h2 className=\"text-center mb-4 mt-4\">Developer Settings</h2>\n              <div className=\"d-flex justify-content-between\">\n                <span className=\"mr-3\">Enable custom url param</span>\n                <div className=\"custom-control custom-switch d-inline\">\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked={enableCustomUrl}\n                    className=\"custom-control-input\"\n                    id=\"cardToggle\"\n                    onChange={onToggleCustomUrlFeature}\n                  />\n                  <label\n                    className=\"custom-control-label\"\n                    htmlFor=\"cardToggle\"\n                  ></label>\n                </div>\n              </div>\n              <p className=\"text-muted font-size-sm mt-3\">\n                Enable this setting to easily connect to a custom cluster via\n                the \"customUrl\" url param.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Overlay show={show} />\n    </>\n  );\n}\n\ntype InputProps = { activeSuffix: string; active: boolean };\nfunction CustomClusterInput({ activeSuffix, active }: InputProps) {\n  const { customUrl } = useCluster();\n  const updateCustomUrl = useUpdateCustomUrl();\n  const [editing, setEditing] = React.useState(false);\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n\n  const customClass = (prefix: string) =>\n    active ? `${prefix}-${activeSuffix}` : \"\";\n\n  const clusterLocation = (location: Location) => {\n    if (customUrl.length > 0) {\n      query.set(\"cluster\", \"custom\");\n      query.set(\"customUrl\", customUrl);\n    }\n    return {\n      ...location,\n      search: query.toString(),\n    };\n  };\n\n  const onUrlInput = useDebounceCallback((url: string) => {\n    updateCustomUrl(url);\n    if (url.length > 0) {\n      query.set(\"cluster\", \"custom\");\n      query.set(\"customUrl\", url);\n      history.push({ ...location, search: query.toString() });\n    }\n  }, 500);\n\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <Link\n      to={(location) => clusterLocation(location)}\n      className=\"btn input-group input-group-merge p-0\"\n    >\n      <input\n        type=\"text\"\n        defaultValue={customUrl}\n        className={`form-control form-control-prepended ${inputTextClass} ${customClass(\n          \"border\"\n        )}`}\n        onFocus={() => setEditing(true)}\n        onBlur={() => setEditing(false)}\n        onInput={(e) => onUrlInput(e.currentTarget.value)}\n      />\n      <div className=\"input-group-prepend\">\n        <div className={`input-group-text pr-0 ${customClass(\"border\")}`}>\n          <span className={customClass(\"text\") || \"\"}>Custom:</span>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nfunction ClusterToggle() {\n  const { status, cluster, customUrl } = useCluster();\n\n  let activeSuffix = \"\";\n  switch (status) {\n    case ClusterStatus.Connected:\n      activeSuffix = \"primary\";\n      break;\n    case ClusterStatus.Connecting:\n      activeSuffix = \"warning\";\n      break;\n    case ClusterStatus.Failure:\n      activeSuffix = \"danger\";\n      break;\n    default:\n      assertUnreachable(status);\n  }\n\n  return (\n    <div className=\"btn-group-toggle d-flex flex-wrap mb-4\">\n      {CLUSTERS.map((net, index) => {\n        const active = net === cluster;\n        if (net === Cluster.Custom)\n          return (\n            <CustomClusterInput\n              key={index}\n              activeSuffix={activeSuffix}\n              active={active}\n            />\n          );\n\n        const btnClass = active\n          ? `border-${activeSuffix} text-${activeSuffix}`\n          : \"btn-white\";\n\n        const clusterLocation = (location: Location) => {\n          const params = new URLSearchParams(location.search);\n          const slug = clusterSlug(net);\n          if (slug !== \"mainnet-beta\") {\n            params.set(\"cluster\", slug);\n          } else {\n            params.delete(\"cluster\");\n          }\n          return {\n            ...location,\n            search: params.toString(),\n          };\n        };\n\n        return (\n          <Link\n            key={index}\n            className={`btn text-left col-12 mb-3 ${btnClass}`}\n            to={clusterLocation}\n          >\n            {`${clusterName(net)}: `}\n            <span className=\"text-muted d-inline-block\">\n              {clusterUrl(net, customUrl)}\n            </span>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n","export function displayTimestamp(\n  unixTimestamp: number,\n  shortTimeZoneName = false\n): string {\n  const expireDate = new Date(unixTimestamp);\n  const dateString = new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  }).format(expireDate);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hour12: false,\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return `${dateString} at ${timeString}`;\n}\n\nexport function displayTimestampUtc(\n  unixTimestamp: number,\n  shortTimeZoneName = false\n): string {\n  const expireDate = new Date(unixTimestamp);\n  const dateString = new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    timeZone: \"UTC\",\n  }).format(expireDate);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hour12: false,\n    timeZone: \"UTC\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return `${dateString} at ${timeString}`;\n}\n","import React from \"react\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport { displayTimestamp } from \"utils/date\";\n\ntype Announcement = {\n  message: string;\n  estimate?: string;\n  start?: Date;\n  end?: Date;\n};\n\nconst announcements = new Map<Cluster, Announcement>();\n// announcements.set(Cluster.Devnet, {\n//   message: \"Devnet API node is restarting\",\n//   start: new Date(\"July 25, 2020 18:00:00 GMT+8:00\"),\n//   estimate: \"2 hours\",\n// });\n// announcements.set(Cluster.MainnetBeta, {\n//   message: \"Mainnet Beta upgrade in progress. Transactions disabled until epoch 62\",\n//   start: new Date(\"August 2, 2020 00:00:00 GMT+0:00\"),\n//   end: new Date(\"August 4, 2020 00:00:00 GMT+0:00\"),\n// });\n// announcements.set(Cluster.MainnetBeta, {\n//   message:\n//     \"Mainnet Beta upgrade in progress. Transactions disabled until epoch 62\",\n// });\n\nexport function MessageBanner() {\n  const cluster = useCluster().cluster;\n  const announcement = announcements.get(cluster);\n  if (!announcement) return null;\n  const { message, start, end, estimate } = announcement;\n\n  const now = new Date();\n  if (end && now > end) return null;\n  if (start && now < start) return null;\n\n  let timeframe;\n  if (estimate || start || end) {\n    timeframe = (\n      <div>\n        <hr className=\"text-gray-500 w-100 my-3 opacity-50\" />\n        {estimate && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">Estimated Duration: </span>\n            {estimate}\n          </h5>\n        )}\n        {start && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">Started at: </span>\n            {displayTimestamp(start.getTime())}\n          </h5>\n        )}\n        {end && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">End: </span>\n            {displayTimestamp(end.getTime())}\n          </h5>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-info\">\n      <div className=\"container\">\n        <div className=\"d-flex flex-column align-items-center justify-content-center text-center py-3\">\n          <h3 className=\"mb-0 line-height-md\">\n            <span className=\"fe fe-alert-circle mr-2\"></span>\n            {message}\n          </h3>\n          {timeframe}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/dark-explorer-logo.14256b30.svg\";","import React from \"react\";\nimport {\n  useCluster,\n  ClusterStatus,\n  Cluster,\n  useClusterModal,\n} from \"providers/cluster\";\n\nexport function ClusterStatusBanner() {\n  const [, setShow] = useClusterModal();\n\n  return (\n    <div className=\"container d-md-none my-4\">\n      <div onClick={() => setShow(true)}>\n        <Button />\n      </div>\n    </div>\n  );\n}\n\nexport function ClusterStatusButton() {\n  const [, setShow] = useClusterModal();\n\n  return (\n    <div onClick={() => setShow(true)}>\n      <Button />\n    </div>\n  );\n}\n\nfunction Button() {\n  const { status, cluster, name, customUrl } = useCluster();\n  const statusName = cluster !== Cluster.Custom ? `${name}` : `${customUrl}`;\n\n  const btnClasses = (variant: string) => {\n    return `btn d-block btn-${variant}`;\n  };\n\n  const spinnerClasses = \"spinner-grow spinner-grow-sm mr-2\";\n\n  switch (status) {\n    case ClusterStatus.Connected:\n      return (\n        <span className={btnClasses(\"primary\")}>\n          <span className=\"fe fe-check-circle mr-2\"></span>\n          {statusName}\n        </span>\n      );\n\n    case ClusterStatus.Connecting:\n      return (\n        <span className={btnClasses(\"warning\")}>\n          <span\n            className={spinnerClasses}\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {statusName}\n        </span>\n      );\n\n    case ClusterStatus.Failure:\n      return (\n        <span className={btnClasses(\"danger\")}>\n          <span className=\"fe fe-alert-circle mr-2\"></span>\n          {statusName}\n        </span>\n      );\n  }\n}\n","import React from \"react\";\nimport Logo from \"img/logos-solana/dark-explorer-logo.svg\";\nimport { clusterPath } from \"utils/url\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { ClusterStatusButton } from \"components/ClusterStatusButton\";\n\nexport function Navbar() {\n  // TODO: use `collapsing` to animate collapsible navbar\n  const [collapse, setCollapse] = React.useState(false);\n\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-light\">\n      <div className=\"container\">\n        <Link to={clusterPath(\"/\")}>\n          <img src={Logo} width=\"250\" alt=\"SafeCoin Explorer\" />\n        </Link>\n\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          onClick={() => setCollapse((value) => !value)}\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div\n          className={`collapse navbar-collapse ml-auto mr-4 ${\n            collapse ? \"show\" : \"\"\n          }`}\n        >\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/\")} exact>\n                Cluster Stats\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/supply\")}>\n                Supply\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"d-none d-md-block\">\n          <ClusterStatusButton />\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import { Cluster } from \"providers/cluster\";\n\nexport type TokenDetails = {\n  name: string;\n  symbol: string;\n  logo?: string;\n  icon?: string;\n  website?: string;\n};\n\nfunction get(address: string, cluster: Cluster): TokenDetails | undefined {\n  if (cluster === Cluster.MainnetBeta) return MAINNET_TOKENS[address];\n}\n\nfunction all(cluster: Cluster) {\n  if (cluster === Cluster.MainnetBeta) return MAINNET_TOKENS;\n  return {};\n}\n\nexport const TokenRegistry = {\n  get,\n  all,\n};\n\nconst MAINNET_TOKENS: { [key: string]: TokenDetails } = {\n  SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt: {\n    name: \"Serum\",\n    symbol: \"SRM\",\n    logo: \"/tokens/serum-64.png\",\n    icon: \"/tokens/serum-32.png\",\n    website: \"https://projectserum.com\",\n  },\n  MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L: {\n    name: \"MegaSerum\",\n    symbol: \"MSRM\",\n    logo: \"/tokens/serum-64.png\",\n    icon: \"/tokens/serum-32.png\",\n    website: \"https://projectserum.com\",\n  },\n  EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v: {\n    symbol: \"USDC\",\n    name: \"USD Coin\",\n    logo: \"/tokens/usdc.svg\",\n    icon: \"/tokens/usdc.svg\",\n    website: \"https://www.centre.io/\",\n  },\n  \"9S4t2NEAiJVMvPdRYKVrfJpBafPBLtvbvyS3DecojQHw\": {\n    symbol: \"FRONT\",\n    name: \"Wrapped FRONT\",\n    logo: \"/tokens/front.svg\",\n    icon: \"/tokens/front.svg\",\n    website: \"https://frontier.xyz/\",\n  },\n  \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\": {\n    symbol: \"BTC\",\n    name: \"Wrapped Bitcoin\",\n    logo: \"/tokens/bitcoin.svg\",\n    icon: \"/tokens/bitcoin.svg\",\n  },\n  \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\": {\n    symbol: \"ETH\",\n    name: \"Wrapped Ethereum\",\n    logo: \"/tokens/ethereum.svg\",\n    icon: \"/tokens/ethereum.svg\",\n  },\n  AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3: {\n    symbol: \"FTT\",\n    name: \"Wrapped FTT\",\n    logo: \"/tokens/ftt.svg\",\n    icon: \"/tokens/ftt.svg\",\n  },\n  \"3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB\": {\n    symbol: \"YFI\",\n    name: \"Wrapped YFI\",\n    logo: \"/tokens/yfi.svg\",\n    icon: \"/tokens/yfi.svg\",\n  },\n  CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG: {\n    symbol: \"LINK\",\n    name: \"Wrapped Chainlink\",\n    logo: \"/tokens/link.svg\",\n    icon: \"/tokens/link.svg\",\n  },\n  Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8: {\n    symbol: \"XRP\",\n    name: \"Wrapped XRP\",\n    logo: \"/tokens/xrp.svg\",\n    icon: \"/tokens/xrp.svg\",\n  },\n  BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4: {\n    symbol: \"USDT\",\n    name: \"Wrapped USDT\",\n    logo: \"/tokens/usdt.svg\",\n    icon: \"/tokens/usdt.svg\",\n  },\n  BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW: {\n    symbol: \"USDC\",\n    name: \"Wrapped USDC\",\n  },\n  So11111111111111111111111111111111111111112: {\n    symbol: \"SOL\",\n    name: \"Wrapped SOL\",\n  },\n  SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX: {\n    symbol: \"SXP\",\n    name: \"Wrapped Swipe\",\n    logo: \"/tokens/sxp.svg\",\n    icon: \"/tokens/sxp.svg\",\n  },\n  BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN: {\n    symbol: \"HGET\",\n    name: \"Wrapped Hedget\",\n  },\n  \"873KLxCbz7s9Kc4ZzgYRtNmhfkQrhfyWGZJBmyCbC3ei\": {\n    symbol: \"UBXT\",\n    name: \"Wrapped Upbots\",\n  },\n  CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K: {\n    symbol: \"ALEPH\",\n    name: \"Wrapped Aleph\",\n  },\n  \"5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv\": {\n    symbol: \"CREAM\",\n    name: \"Wrapped Cream Finance\",\n    logo: \"/tokens/cream.svg\",\n    icon: \"/tokens/cream.svg\",\n  },\n  HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e: {\n    symbol: \"HNT\",\n    name: \"Wrapped Helium\",\n  },\n  AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy: {\n    symbol: \"SUSHI\",\n    name: \"Wrapped Sushi\",\n  },\n  AcstFzGGawvvdVhYV9bftr7fmBHbePUjhv53YK1W3dZo: {\n    symbol: \"LSD\",\n    name: \"LSD\",\n    website: \"https://solible.com\",\n  },\n  \"91fSFQsPzMLat9DHwLdQacW3i3EGnWds5tA5mt7yLiT9\": {\n    symbol: \"Unlimited Energy\",\n    name: \"Unlimited Energy\",\n    website: \"https://solible.com\",\n  },\n  \"29PEpZeuqWf9tS2gwCjpeXNdXLkaZSMR2s1ibkvGsfnP\": {\n    symbol: \"Need for Speed\",\n    name: \"Need for Speed\",\n    website: \"https://solible.com\",\n  },\n  HsY8PNar8VExU335ZRYzg89fX7qa4upYu6vPMPFyCDdK: {\n    symbol: \"ADOR OPENS\",\n    name: \"ADOR OPENS\",\n    website: \"https://solible.com\",\n  },\n  EDP8TpLJ77M3KiDgFkZW4v4mhmKJHZi9gehYXenfFZuL: {\n    symbol: \"CMS - Rare\",\n    name: \"CMS - Rare\",\n    website: \"https://solible.com\",\n  },\n  BrUKFwAABkExb1xzYU4NkRWzjBihVQdZ3PBz4m5S8if3: {\n    symbol: \"Tesla\",\n    name: \"Tesla\",\n    website: \"https://solible.com\",\n  },\n  \"9CmQwpvVXRyixjiE3LrbSyyopPZohNDN1RZiTk8rnXsQ\": {\n    symbol: \"DeceFi\",\n    name: \"DeceFi\",\n    website: \"https://solible.com\",\n  },\n  F6ST1wWkx2PeH45sKmRxo1boyuzzWCfpnvyKL4BGeLxF: {\n    symbol: \"Power User\",\n    name: \"Power User\",\n    website: \"https://solible.com\",\n  },\n  dZytJ7iPDcCu9mKe3srL7bpUeaR3zzkcVqbtqsmxtXZ: {\n    symbol: \"VIP Member\",\n    name: \"VIP Member\",\n    website: \"https://solible.com\",\n  },\n  \"8T4vXgwZUWwsbCDiptHFHjdfexvLG9UP8oy1psJWEQdS\": {\n    symbol: \"Uni Christmas\",\n    name: \"Uni Christmas\",\n    website: \"https://solible.com\",\n  },\n  EjFGGJSyp9UDS8aqafET5LX49nsG326MeNezYzpiwgpQ: {\n    symbol: \"BNB\",\n    name: \"BNB\",\n    website: \"https://solible.com\",\n  },\n  FkmkTr4en8CXkfo9jAwEMov6PVNLpYMzWr3Udqf9so8Z: {\n    symbol: \"Seldom\",\n    name: \"Seldom\",\n    website: \"https://solible.com\",\n  },\n  \"2gn1PJdMAU92SU5inLSp4Xp16ZC5iLF6ScEi7UBvp8ZD\": {\n    symbol: \"Satoshi Closeup\",\n    name: \"Satoshi Closeup\",\n    website: \"https://solible.com\",\n  },\n  \"7mhZHtPL4GFkquQR4Y6h34Q8hNkQvGc1FaNtyE43NvUR\": {\n    symbol: \"Satoshi GB\",\n    name: \"Satoshi GB\",\n    website: \"https://solible.com\",\n  },\n  \"8RoKfLx5RCscbtVh8kYb81TF7ngFJ38RPomXtUREKsT2\": {\n    symbol: \"Satoshi OG\",\n    name: \"Satoshi OG\",\n    website: \"https://solible.com\",\n  },\n  \"9rw5hyDngBQ3yDsCRHqgzGHERpU2zaLh1BXBUjree48J\": {\n    symbol: \"Satoshi BTC\",\n    name: \"Satoshi BTC\",\n    website: \"https://solible.com\",\n  },\n  AiD7J6D5Hny5DJB1MrYBc2ePQqy2Yh4NoxWwYfR7PzxH: {\n    symbol: \"Satoshi GB\",\n    name: \"Satoshi GB\",\n    website: \"https://solible.com\",\n  },\n  bxiA13fpU1utDmYuUvxvyMT8odew5FEm96MRv7ij3eb: {\n    symbol: \"Satoshi\",\n    name: \"Satoshi\",\n    website: \"https://solible.com\",\n  },\n  GoC24kpj6TkvjzspXrjSJC2CVb5zMWhLyRcHJh9yKjRF: {\n    symbol: \"Satoshi Closeup\",\n    name: \"Satoshi Closeup\",\n    website: \"https://solible.com\",\n  },\n  oCUduD44ETuZ65bpWdPzPDSnAdreg1sJrugfwyFZVHV: {\n    symbol: \"Satoshi BTC\",\n    name: \"Satoshi BTC\",\n    website: \"https://solible.com\",\n  },\n  \"9Vvre2DxBB9onibwYDHeMsY1cj6BDKtEDccBPWRN215E\": {\n    symbol: \"Satoshi Nakamoto\",\n    name: \"Satoshi Nakamoto\",\n    website: \"https://solible.com\",\n  },\n  \"7RpFk44cMTAUt9CcjEMWnZMypE9bYQsjBiSNLn5qBvhP\": {\n    symbol: \"Charles Hoskinson\",\n    name: \"Charles Hoskinson\",\n    website: \"https://solible.com\",\n  },\n  GyRkPAxpd9XrMHcBF6fYHVRSZQvQBwAGKAGQeBPSKzMq: {\n    symbol: \"SBF\",\n    name: \"SBF\",\n    website: \"https://solible.com\",\n  },\n  AgdBQN2Sy2abiZ2KToWeUsQ9PHdCv95wt6kVWRf5zDkx: {\n    symbol: \"Bitcoin Tram\",\n    name: \"Bitcoin Tram\",\n    website: \"https://solible.com\",\n  },\n  \"7TRzvCqXN8KSXggbSyeEG2Z9YBBhEFmbtmv6FLbd4mmd\": {\n    symbol: \"SRM tee-shirt\",\n    name: \"SRM tee-shirt\",\n    website: \"https://solible.com\",\n  },\n  EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp: {\n    symbol: \"FIDA\",\n    name: \"FIDA\",\n    logo: \"/tokens/fida.svg\",\n    icon: \"/tokens/fida.svg\",\n    website: \"https://bonfida.com\",\n  },\n  kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6: {\n    symbol: \"KIN\",\n    name: \"KIN\",\n    logo: \"/tokens/kin.svg\",\n    icon: \"/tokens/kin.svg\",\n    website: \"https://kin.org\",\n  },\n  FtgGSFADXBtroxq8VCausXRr2of47QBf5AS1NtZCu4GD: {\n    symbol: \"BRZ\",\n    name: \"BRZ\",\n    logo: \"/tokens/brz.png\",\n    icon: \"/tokens/brz.png\",\n    website: \"https://brztoken.io\",\n  },\n  MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb: {\n    symbol: \"MAPS\",\n    name: \"MAPS\",\n    logo: \"/tokens/maps.svg\",\n    icon: \"/tokens/maps.svg\",\n    website: \"https://maps.me/\",\n  },\n  Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB: {\n    symbol: \"USDT\",\n    name: \"USDT\",\n    logo: \"/tokens/usdt.svg\",\n    icon: \"/tokens/usdt.svg\",\n    website: \"https://tether.to\",\n  },\n};\n","import { Cluster } from \"providers/cluster\";\n\nconst MARKET_REGISTRY: { [key: string]: string } = {\n  \"7kgkDyW7dmyMeP8KFXzbcUZz1R2WHsovDZ7n3ihZuNDS\": \"Serum: MSRM / USDC\",\n  \"6WpkeqE5oU1MUNPWvMDHhru1G5gjxMgAtib5wXuBSvgm\": \"Serum: MSRM / USDC - Request Queue\",\n  \"DwpUjRHQuotE1LG2R68wZM3nwkv2fChHibcm7NzL8WGq\": \"Serum: MSRM / USDC - Event Queue\",\n  \"7zyPwxjHMJsTdPe7Rd992oe1cVhrZcbkcH9qURzKV8wV\": \"Serum: MSRM / USDC - Order Book (Bids)\",\n  \"4nHe9oNh7JJoJZ1HrktVghB19Cis4N848so7UCWXhF2t\": \"Serum: MSRM / USDC - Order Book (Asks)\",\n  \"8gbnu8XUNmigCSKP43UXbtYYTUHJPRbctyB7Kj1QbTyZ\": \"Serum: MSRM / USDC - Base Asset Vault\",\n  \"8MboeurJ28fQj3n18jBrM7oQSu3coyFbQUpxWnabF3gc\": \"Serum: MSRM / USDC - Quote Currency Vault\",\n  \"GFyDCG3EBVrAWiHKLf7zF2DLqMp89dLHUtsYKwFUe4AC\": \"Serum: MSRM / USDC - Vault Owner\",\n\n  \"H4snTKK9adiU15gP22ErfZYtro3aqR9BTMXiH3AwiUTQ\": \"Serum: MSRM / USDT\",\n  \"3mrit8EKnsy9M8L7EQ24GjNeuwXssVGqDRLZXDarb9Wk\": \"Serum: MSRM / USDT - Request Queue\",\n  \"98qQ1Dintci8xSUAHEJqQukSKnE9g1LQY2jxNwwgcQQu\": \"Serum: MSRM / USDT - Event Queue\",\n  \"83Snk2SJTX8KKMPmi5UX9JYKxy2QWrn2jFC9zH6NmP7L\": \"Serum: MSRM / USDT - Order Book (Bids)\",\n  \"CKjPS8ntVbN7YjGk4Goq24ScaA1qjNFFqQpVuzNkFRo4\": \"Serum: MSRM / USDT - Order Book (Asks)\",\n  \"mKeCpjYQWzptDQn5J5XfSzyoNmsnH9W3RryzUWFe3G7\": \"Serum: MSRM / USDT - Base Asset Vault\",\n  \"9o8XKrbbbA8eXMe72Tsopkk8y7aFF2HQPDMoxdyX4S9b\": \"Serum: MSRM / USDT - Quote Currency Vault\",\n  \"12rqwuEgBYiGhBrDJStCiqEtzQpTTiZbh7teNVLuYcFA\": \"Serum: MSRM / USDT - Vault Owner\",\n\n  \"CAgAeMD7quTdnr6RPa7JySQpjf3irAmefYNdTb6anemq\": \"Serum: BTC / USDC\",\n  \"5PMuDUdk7VFLSYXDo6wHsEfyfWAf1rG4rkdmrmnK4ZME\": \"Serum: BTC / USDC - Request Queue\",\n  \"DrGCgNJAwpihVrRCzd69Ys6k5ggu1qC2FQFjCESnj3Do\": \"Serum: BTC / USDC - Event Queue\",\n  \"6oVGgm4D2fgvv3jcTy3DzUHCbu14J6pe7RYqxHA5FGB1\": \"Serum: BTC / USDC - Order Book (Bids)\",\n  \"AXjn1qHYrAad5nVznXm7Txyp8WmdzJEEi5NM2axSLtnL\": \"Serum: BTC / USDC - Order Book (Asks)\",\n  \"CAiSJtSZfA5usmP9ikPz69nzJLMejbjo7CrGQLwSXR8h\": \"Serum: BTC / USDC - Base Asset Vault\",\n  \"HcEnLVJxG126a68FX6pzw252pL9jUrxkucsbth8hzh9U\": \"Serum: BTC / USDC - Quote Currency Vault\",\n  \"3bYr6BzwMqrrH1N3BGjYeEPRrRxde25zj3Garud4qom3\": \"Serum: BTC / USDC - Vault Owner\",\n\n  \"8AcVjMG2LTbpkjNoyq8RwysokqZunkjy3d5JDzxC6BJa\": \"Serum: BTC / USDT\",\n  \"DoYVFapBvZksM6DqqsWgLrqYQL5JknhnjFcEPb2jCr6D\": \"Serum: BTC / USDT - Request Queue\",\n  \"6iveBLh1CWrE1T4p7AE1tX3DPSpnbPLxCPZ2RxTfeTvT\": \"Serum: BTC / USDT - Event Queue\",\n  \"5N2uRKMNDv22rgV8Cm8VtyTByvKGfdFBTtUToqga3bxR\": \"Serum: BTC / USDT - Order Book (Bids)\",\n  \"7g8U7LqXbMcRyLnU3KhDNJKrq4VTDbvcVTL3Qt1onKJD\": \"Serum: BTC / USDT - Order Book (Asks)\",\n  \"5piQPUuxpGR1HVDA7vMJneH3bcogmXJo7crgNmwaP49D\": \"Serum: BTC / USDT - Base Asset Vault\",\n  \"5Gb6ngdANPa3upkaGbcR9ib55PcsktDhiQcsVr3XCZhj\": \"Serum: BTC / USDT - Quote Currency Vault\",\n  \"4rJea7ape61LD6CredX9Xd5mWpKQiJrcWwencsUe1s5r\": \"Serum: BTC / USDT - Vault Owner\",\n\n  \"ASKiV944nKg1W9vsf7hf3fTsjawK6DwLwrnB2LH9n61c\": \"Serum: ETH / USDC\",\n  \"BWqhtYi9sQgN8wfsJNBkKA5fMmbmctFwjUL1xZSHEEdm\": \"Serum: ETH / USDC - Request Queue\",\n  \"PzjG3J5Lzm2P9BaeHHogxacp1BDMtawvrz88fWuadT4\": \"Serum: ETH / USDC - Event Queue\",\n  \"9HqtE85iR2DFMDduCAZe9DG9ygckE7WgmVmbdvKVj3x1\": \"Serum: ETH / USDC - Order Book (Bids)\",\n  \"tSZM7972KpDL1WV2r9fTwGhaoPWhJ8nMnEzuvhW9b6Y\": \"Serum: ETH / USDC - Order Book (Asks)\",\n  \"HSzt9nNG6MuD1iojc76Ke3eeZ9tN4nnd2NduR3ZccE48\": \"Serum: ETH / USDC - Base Asset Vault\",\n  \"Hmxx3y5EiaaYrC65uoxmsP97TTDs7ffHAi44oiKxTypU\": \"Serum: ETH / USDC - Quote Currency Vault\",\n  \"4PfXQMYgQPZe7Z6SuAFKmRiM2jNMi9XbN2vbMS2BhwSm\": \"Serum: ETH / USDC - Vault Owner\",\n\n  \"HfCZdJ1wfsWKfYP2qyWdXTT5PWAGWFctzFjLH48U1Hsd\": \"Serum: ETH / USDT\",\n  \"78dUr2kcuvDnsxTb8caFaGeD8GBmreReSLevDEJjVJmf\": \"Serum: ETH / USDT - Request Queue\",\n  \"2GQd5e5z5BvsPyqSVVUs5Qgk8uSPf43MWnKAMfEQRPH7\": \"Serum: ETH / USDT - Event Queue\",\n  \"888UP9HWwY1vaCMpNpP4nzQXgn7hpqomaFwQcV95FkYB\": \"Serum: ETH / USDT - Order Book (Bids)\",\n  \"RCDCybQ7ivCzZPLWQWXNmQo1b6kyAbrkYZStnpJC3Dd\": \"Serum: ETH / USDT - Order Book (Asks)\",\n  \"E67Asz53dn73aw7Eju1UdL72qVGTK4Svv3Bk7BYdmwTa\": \"Serum: ETH / USDT - Base Asset Vault\",\n  \"J9EEc8dgJyygNWwN8xzsMh342hS58JRyuX4mBqKNUyQn\": \"Serum: ETH / USDT - Quote Currency Vault\",\n  \"9UY946SraowE1R97at4qc8NXfJdr75mBLTbjesN4JKb8\": \"Serum: ETH / USDT - Vault Owner\",\n\n  \"68J6nkWToik6oM9rTatKSR5ibVSykAtzftBUEAvpRsys\": \"Serum: SRM / USDC\",\n  \"GPwEA9RMXAk2ovJZke6xczWt9HM9NzAAC5GD8JeTNRfL\": \"Serum: SRM / USDC - Request Queue\",\n  \"2N1a9yuTRePYzjszUHr2qyjhrKdH3UqUosEbW9sRm5Sq\": \"Serum: SRM / USDC - Event Queue\",\n  \"GKiV6ogZunNyk5nhcRZLTmDbXztDynyB674apQgGo5ve\": \"Serum: SRM / USDC - Order Book (Bids)\",\n  \"CASsL5nemAKjD6qCPKXWmfWK1WHQXARVoBUynmTnfgS2\": \"Serum: SRM / USDC - Order Book (Asks)\",\n  \"7pzWoBvBdQkF8SLA2PjYNX2aPddPCSnqQ8LTefvQAaq2\": \"Serum: SRM / USDC - Base Asset Vault\",\n  \"Gge5vGgh15dWeJPJSQyErqiTVffUNkctteAoT4tHjRFB\": \"Serum: SRM / USDC - Quote Currency Vault\",\n  \"AZVmspyVcUv78HX9PtMFr5guSswotsV6Afsr7Vaifz2P\": \"Serum: SRM / USDC - Vault Owner\",\n\n  \"HARFLhSq8nECZk4DVFKvzqXMNMA9a3hjvridGMFizeLa\": \"Serum: SRM / USDT\",\n  \"3p86S1RzNo7sCVBD3awQ9M88C9bHdgCeDirU2bDv7P3n\": \"Serum: SRM / USDT - Request Queue\",\n  \"yaJV7SqjmDyQXkpEtyxF4R1k3UdVJtdKse7RHB3hKLE\": \"Serum: SRM / USDT - Event Queue\",\n  \"4KoZ6w5hbUGUgBJyAvUZAtHx2MCDyoGrFXZyAXrpu3ep\": \"Serum: SRM / USDT - Order Book (Bids)\",\n  \"CS3k6C8gWUupTBeEeh8AyK8fHN16Yj9zXaqLPh3Q4Ti8\": \"Serum: SRM / USDT - Order Book (Asks)\",\n  \"8u5NUxd5ShNe5LNv42MXqJ7uuWgAigGe9b5DueLttTh7\": \"Serum: SRM / USDT - Base Asset Vault\",\n  \"FvTgrXUUD2KiLBybdPa3zG5tJJuCD3qyrJsennNRc58W\": \"Serum: SRM / USDT - Quote Currency Vault\",\n  \"7SjKY8GoSVTNZa26gNyMtgdUMEKYcxNPtbGVFTmiFbhS\": \"Serum: SRM / USDT - Vault Owner\",\n\n  \"FZqrBXz7ADGsmDf1TM9YgysPUfvtG8rJiNUrqDpHc9Au\": \"Serum: FTC / USDC\",\n  \"2spxPVwPaMWruDHiFfwbchwWG6Lx2soxaCGhjK6DFL1a\": \"Serum: FTC / USDC - Request Queue\",\n  \"9YbacjStsjbAL2P2tjn3TEALBABBh2jsroq911bEbmva\": \"Serum: FTC / USDC - Event Queue\",\n  \"8Vwf6LVGyB5XcxRUPC1S4U2U3GkoEf9x6yTLhwGE611y\": \"Serum: FTC / USDC - Order Book (Bids)\",\n  \"GjasUQFVeXcaGcZk5qFRfdWpbbEMcAbv2EVSFxpu6EDR\": \"Serum: FTC / USDC - Order Book (Asks)\",\n  \"6HmxKKjmmRZZqUYTH63whUWWF7vdNQfiKx2BtUrtFB3A\": \"Serum: FTC / USDC - Base Asset Vault\",\n  \"2mULsMxTia5uAiFi8huEQ3zeCe8UBXRdnVaQYybnsJ6L\": \"Serum: FTC / USDC - Quote Currency Vault\",\n  \"G4FCN83ZSRh4baXDY8eNLhk8reWxKZke3dnDBPmev1Bk\": \"Serum: FTC / USDC - Vault Owner\",\n\n  \"DHDdghmkBhEpReno3tbzBPtsxCt6P3KrMzZvxavTktJt\": \"Serum: FTT / USDT\",\n  \"6cXxUcn7yAkgEWAHqXDav7zeEkbGRAC3cR8VpgzD8kxy\": \"Serum: FTT / USDT - Request Queue\",\n  \"GmE8DSdDkEJJfzABt7DRYB2DUrPKSLgjzBMsgHjpKmZX\": \"Serum: FTT / USDT - Event Queue\",\n  \"DiBDJzU91rSGqrTjnVtQgnsJ3dGYQ2TYwspwxsMLzZV4\": \"Serum: FTT / USDT - Order Book (Bids)\",\n  \"B2qVWSfy4HFK9tGATeYWFbMZ6fi54DEiMCh5bDGmy9n4\": \"Serum: FTT / USDT - Order Book (Asks)\",\n  \"6xKUQy2Ao4KVvyPns88AwPXchemb9EY4YB3r8gczg6gu\": \"Serum: FTT / USDT - Base Asset Vault\",\n  \"DEixXfs1PJ4q8VcNYJas2JFDdgFnKMS5mEj9WKP9Kn1J\": \"Serum: FTT / USDT - Quote Currency Vault\",\n  \"F3Wh4ZAEkR8xrdXwzrADLotvJmYjUiQNwWVvm91mAAa8\": \"Serum: FTT / USDT - Vault Owner\",\n\n  \"FJg9FUtbN3fg3YFbMCFiZKjGh5Bn4gtzxZmtxFzmz9kT\": \"Serum: YFI / USDC\",\n  \"13mTW8D1yoyXMVyCKtmVBtH1sSnHBUWCjfjNJp6CEtDf\": \"Serum: YFI / USDC - Request Queue\",\n  \"EzZkAWQ97k5D1Augf1bopK7zf9CwJZ9V6eCua6yNGnNj\": \"Serum: YFI / USDC - Event Queue\",\n  \"5ULcF7rHaMFqmGWBYxcsFGSpo2SfWYzJ4TcMAYWrMG3S\": \"Serum: YFI / USDC - Order Book (Bids)\",\n  \"78XjqnsSY9CWibWCiAumfx8oSL7yCjoWA1DuuvN4TfUr\": \"Serum: YFI / USDC - Order Book (Asks)\",\n  \"7j3UcJ77HqA7MTpBNYniBtkDs2F5EgxaLv4oRhK1t63Z\": \"Serum: YFI / USDC - Base Asset Vault\",\n  \"AbMjvkKRRa5SSwR1MHrSL5inxuybDDMfL3F5RJuMyaHL\": \"Serum: YFI / USDC - Quote Currency Vault\",\n  \"AnuZK381G6gSbfMsWykkD33WwS4BENfL2rqciQhfbN9L\": \"Serum: YFI / USDC - Vault Owner\",\n\n  \"5zu5bTZZvqESAAgFsr12CUMxdQvMrvU9CgvC1GW8vJdf\": \"Serum: YFI / USDT\",\n  \"HRhgyAnVKX5waJWyC9Yd8jiBnEtwxzjKwk2feSVKrWs3\": \"Serum: YFI / USDT - Request Queue\",\n  \"DZ9rDKDzimKwTCspqePzH5768rqxkjEkDdhHT46ZqSiJ\": \"Serum: YFI / USDT - Event Queue\",\n  \"M6cbtnTtDKeehBpie5edWNLX9C3CNFzZA7HBhjevXiJ\": \"Serum: YFI / USDT - Order Book (Bids)\",\n  \"C7XehQ7R7R8CrxJkJFhoRtsV4SJyKhYoawqadxxYYs3F\": \"Serum: YFI / USDT - Order Book (Asks)\",\n  \"9gFKq8bvkCYwqoLQj6ZXckggS2BEb7Jj6mnUMPxagDVj\": \"Serum: YFI / USDT - Base Asset Vault\",\n  \"8GF7m51UzcvRWwcRcXRpttetB7PwfHdwn9fqE9PCLk6F\": \"Serum: YFI / USDT - Quote Currency Vault\",\n  \"Ci5BrxgxTB2nfmsBz5REpDaChJTZk7FhFTBb8jFbfJp5\": \"Serum: YFI / USDT - Vault Owner\",\n\n  \"7GZ59DMgJ7D6dfoJTpszPayTRyua9jwcaGJXaRMMF1my\": \"Serum: LINK / USDC\",\n  \"8wTo4Tn3QfzYwyjoofutKU4CE8i98Zj8AJrSa2BL4vso\": \"Serum: LINK / USDC - Request Queue\",\n  \"4BTeKadBCoTaCrxwSYj36FNiutZFvRMi8bvuPqZA9pKW\": \"Serum: LINK / USDC - Event Queue\",\n  \"GoaFC6qRq7MNy1suxvPSNYeoioN32kad17qbdqqWEnTe\": \"Serum: LINK / USDC - Order Book (Bids)\",\n  \"9cLbP6pEwEXDttbgTrPqYzxyXnHFygj29DT1EdtrQFfS\": \"Serum: LINK / USDC - Order Book (Asks)\",\n  \"2vXebfXSBhQ1aEV5Nnv4j3eo1RJVuJP7CoWmHNdvPvhk\": \"Serum: LINK / USDC - Base Asset Vault\",\n  \"BnzYkmNRVZ6Q71mvzLwYqkU5B4S2hUdqm1GyU2DfQJEC\": \"Serum: LINK / USDC - Quote Currency Vault\",\n  \"Fpg7XoRAfvrxaVSHmuUS8HRfGzBjRmMoWvRDHoW6G3zV\": \"Serum: LINK / USDC - Vault Owner\",\n\n  \"F5xschQBMpu1gD2q1babYEAVJHR1buj1YazLiXyQNqSW\": \"Serum: LINK / USDT\",\n  \"Ga48n8R13mW4jFnUXmejVa4tPpR8nAo3mYKG95qZEUZV\": \"Serum: LINK / USDT - Request Queue\",\n  \"H7ZHuTaMHswJWbJxsCgtV4ar28Kjty2hB1DbZVT3icjB\": \"Serum: LINK / USDT - Event Queue\",\n  \"HAx1rwxYapD4CPm9G3H2hq1bufykJg6LksZjU39HwHov\": \"Serum: LINK / USDT - Order Book (Bids)\",\n  \"7sjAfkzD9xCU68dmvCtt5mEFBaFzqF8GrYjKdUDhLnst\": \"Serum: LINK / USDT - Order Book (Asks)\",\n  \"5vNPSbGTMUzKPQtDdDBGUCeCip9uD8igj4Erfdzz7YdU\": \"Serum: LINK / USDT - Base Asset Vault\",\n  \"76jYTFWR1qjaxNeNvLmHuLeitBEdpQ9P7QPBa4pMp5ve\": \"Serum: LINK / USDT - Quote Currency Vault\",\n  \"BeZc9vWGyNJ5g6gG8JoRSkvY5oJgyjV7ErLajfVDJ3FA\": \"Serum: LINK / USDT - Vault Owner\",\n\n  \"4eM8iy2k7VXec5VxRk8xFRhHw5Cn67m5FjNzCEegWibm\": \"Serum: XRP / USDC\",\n  \"56RPf4XMR1wLhPKnxgr1cko9gpDWwE7i8w5owWLW4qNT\": \"Serum: XRP / USDC - Request Queue\",\n  \"49oPGPoTexM5CLzrbrMNiNbrrRjhBfLvEPTZRzsPYL3g\": \"Serum: XRP / USDC - Event Queue\",\n  \"66oziZDCXpsCJkYHcxucmEp6bCPaRJUPeeAjSwnudkhb\": \"Serum: XRP / USDC - Order Book (Bids)\",\n  \"9cy917jmyRQqQCocgtnPv5gjiUMx4x4npUPF2CP9bHxP\": \"Serum: XRP / USDC - Order Book (Asks)\",\n  \"9Sfk6Hk9V8FR3kxYNhNt1STKAtWuXifQGKxUJ9g3Np4b\": \"Serum: XRP / USDC - Base Asset Vault\",\n  \"8gDM85fdTxEWYVbBPDQFh1d5gVRTDQ4vhpCai3UTEdS7\": \"Serum: XRP / USDC - Quote Currency Vault\",\n  \"5LaKtnftuks8DB8aJGuHrMnY95KJcUhSpJ77pRi5mvGP\": \"Serum: XRP / USDC - Vault Owner\",\n\n  \"H5BtazuKhHtZCZjFTZSRd4W3QZRaRgq6JcQCBLbjkj1o\": \"Serum: XRP / USDT\",\n  \"6tYvWamhBADnQ3rv7BvAUMyKgcJ2CgtNGSw79REXnsc6\": \"Serum: XRP / USDT - Request Queue\",\n  \"eKr9MEvo1Nv1CMYTjUE3cw1qk3infy5VdtaCZEFkZzn\": \"Serum: XRP / USDT - Event Queue\",\n  \"HrmGTNSsAoe7cUdtZPqzZmnTfnS9WvNwwqiAYXi8ZwAW\": \"Serum: XRP / USDT - Order Book (Bids)\",\n  \"BVejg9wNCCai4n2EgTpkiPev3gvS15f1AoKTmK9b2pNs\": \"Serum: XRP / USDT - Order Book (Asks)\",\n  \"2SmRPibwnar9Gd9byx5nK6D8ikAcEUQn7ZC6yqjTBkDg\": \"Serum: XRP / USDT - Base Asset Vault\",\n  \"3jjzgJWeFk3J57JvSJ6P22GdyQFkBTbTLsWB6eSNf6WJ\": \"Serum: XRP / USDT - Quote Currency Vault\",\n  \"GJKaUk5NCHL4LTpP1Yn57qzTdCtjd3mSCyvXdktF4uPx\": \"Serum: XRP / USDT - Vault Owner\",\n\n  \"BGjv1z7GLAHQH9F9Xd6a3idz5JUo1tka8rsLizPvPq5Z\": \"Serum: SRM / USDC\",\n  \"E6EQQpB7nQwbzggSCUUPhjE8C9TGSw5dguQuQPMgr5Dt\": \"Serum: SRM / USDC - Request Queue\",\n  \"8yG8L7hcUtnboi4RcGQ1SBz9njeXzPvJUrmYrysFr1rT\": \"Serum: SRM / USDC - Event Queue\",\n  \"FjPSrcboahL3jGe4GVZDPURQWE8dL3TWVFHNznK6qaXi\": \"Serum: SRM / USDC - Order Book (Bids)\",\n  \"Bh5JCiV2uMsNLDiy5oKJ23YmCPwnmeGQ34kGHUF5dhgu\": \"Serum: SRM / USDC - Order Book (Asks)\",\n  \"8q42g61uTZ9bH9RFdWJyceBTcsRJyaeehzUtSyYzMbj2\": \"Serum: SRM / USDC - Base Asset Vault\",\n  \"2Rn3quSFg8cKTcHwadmEXoR2dcjqhsF3s3AJXZUDKMJb\": \"Serum: SRM / USDC - Quote Currency Vault\",\n  \"BeiNALSUcT23SqwnGKxJ6XUG1jeFcCozKd3SBKVgDRBN\": \"Serum: SRM / USDC - Vault Owner\",\n\n  \"9kJ8YCHZSiqXgfFyT9LoNVFEv8og3C5oN1pPCwmYRgCz\": \"Serum: SRM / USDT\",\n  \"9DsKwjwP1wkg2UaYXESQtbbTYJ6Q888gfuoa1yAuzMAp\": \"Serum: SRM / USDT - Request Queue\",\n  \"BKhdZHfXaVQ1TjG8mNvifJiMxazjRpWcznjCbtxt3YNv\": \"Serum: SRM / USDT - Event Queue\",\n  \"4iy4REdaS3AEWC4fGZmxP121qKTZ659EeKYyP5uB66qj\": \"Serum: SRM / USDT - Order Book (Bids)\",\n  \"2BmuY8oAZVUSn9F2r8JGcLcJN8VHc5QFecub7XBx234W\": \"Serum: SRM / USDT - Order Book (Asks)\",\n  \"HZ1aXc9KVfGGS9mD2mzxHh5jeJSvQrx1dz4zGWBaGmkE\": \"Serum: SRM / USDT - Base Asset Vault\",\n  \"FEyMWn3KnWVEMeJr8q7nQxfQu3jq15MchkhLq94kEoVh\": \"Serum: SRM / USDT - Quote Currency Vault\",\n  \"9sBxruSjQ97z8k42RXAr2grx9S7Fsk2yisbvZE9cNfjG\": \"Serum: SRM / USDT - Vault Owner\",\n};\n\nfunction get(address: string, cluster: Cluster): string | undefined {\n  if (cluster === Cluster.MainnetBeta) return MARKET_REGISTRY[address];\n}\n\nexport const SerumMarketRegistry = {\n  get,\n};\n","import bs58 from \"bs58\";\nimport {\n  SystemProgram,\n  StakeProgram,\n  VOTE_PROGRAM_ID,\n  BPF_LOADER_PROGRAM_ID,\n  BPF_LOADER_DEPRECATED_PROGRAM_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  ParsedTransaction,\n  TransactionInstruction,\n  Transaction,\n  PartiallyDecodedInstruction,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { TokenRegistry } from \"tokenRegistry\";\nimport { Cluster } from \"providers/cluster\";\nimport { SerumMarketRegistry } from \"serumMarketRegistry\";\n\nexport type ProgramName = typeof PROGRAM_NAME_BY_ID[keyof typeof PROGRAM_NAME_BY_ID];\n\nexport enum PROGRAM_NAMES {\n  BREAK_SOLANA = \"Break Solana Program\",\n  BUDGET = \"Budget Program\",\n  CONFIG = \"Config Program\",\n  EXCHANGE = \"Exchange Program\",\n  STAKE = \"Stake Program\",\n  STORAGE = \"Storage Program\",\n  SYSTEM = \"System Program\",\n  VEST = \"Vest Program\",\n  VOTE = \"Vote Program\",\n  SPL_TOKEN = \"SPL Token Program\",\n  ASSOCIATED_TOKEN = \"SPL Associated Token Program\",\n  MEMO = \"Memo Program\",\n  SWAP = \"Swap Program\",\n  LENDING = \"Lending Program\",\n}\n\nexport const SEARCHABLE_PROGRAMS: ProgramName[] = [\n  PROGRAM_NAMES.BREAK_SOLANA,\n  PROGRAM_NAMES.BUDGET,\n  PROGRAM_NAMES.CONFIG,\n  PROGRAM_NAMES.EXCHANGE,\n  PROGRAM_NAMES.STAKE,\n  PROGRAM_NAMES.STORAGE,\n  PROGRAM_NAMES.SYSTEM,\n  PROGRAM_NAMES.VEST,\n  PROGRAM_NAMES.VOTE,\n  PROGRAM_NAMES.SPL_TOKEN,\n  PROGRAM_NAMES.ASSOCIATED_TOKEN,\n  PROGRAM_NAMES.MEMO,\n  PROGRAM_NAMES.SWAP,\n  PROGRAM_NAMES.LENDING,\n];\n\nexport const PROGRAM_NAME_BY_ID = {\n  BrEAK7zGZ6dM71zUDACDqJnekihmwF15noTddWTsknjC: PROGRAM_NAMES.BREAK_SOLANA,\n  Budget1111111111111111111111111111111111111: PROGRAM_NAMES.BUDGET,\n  Config1111111111111111111111111111111111111: PROGRAM_NAMES.CONFIG,\n  Exchange11111111111111111111111111111111111: PROGRAM_NAMES.EXCHANGE,\n  [StakeProgram.programId.toBase58()]: PROGRAM_NAMES.STAKE,\n  Storage111111111111111111111111111111111111: PROGRAM_NAMES.STORAGE,\n  [SystemProgram.programId.toBase58()]: PROGRAM_NAMES.SYSTEM,\n  Vest111111111111111111111111111111111111111: PROGRAM_NAMES.VEST,\n  [VOTE_PROGRAM_ID.toBase58()]: PROGRAM_NAMES.VOTE,\n  TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA: PROGRAM_NAMES.SPL_TOKEN,\n  ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL: PROGRAM_NAMES.ASSOCIATED_TOKEN,\n  Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo: PROGRAM_NAMES.MEMO,\n  SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8: PROGRAM_NAMES.SWAP,\n  LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi: PROGRAM_NAMES.LENDING,\n} as const;\n\nexport type LoaderName = typeof LOADER_IDS[keyof typeof LOADER_IDS];\nexport const LOADER_IDS = {\n  MoveLdr111111111111111111111111111111111111: \"Move Loader\",\n  NativeLoader1111111111111111111111111111111: \"Native Loader\",\n  [BPF_LOADER_DEPRECATED_PROGRAM_ID.toBase58()]: \"BPF Loader\",\n  [BPF_LOADER_PROGRAM_ID.toBase58()]: \"BPF Loader 2\",\n} as const;\n\nconst SYSVAR_ID: { [key: string]: string } = {\n  Sysvar1111111111111111111111111111111111111: \"SYSVAR\",\n};\n\nexport const SYSVAR_IDS = {\n  [SYSVAR_CLOCK_PUBKEY.toBase58()]: \"Sysvar: Clock\",\n  SysvarEpochSchedu1e111111111111111111111111: \"Sysvar: Epoch Schedule\",\n  SysvarFees111111111111111111111111111111111: \"Sysvar: Fees\",\n  SysvarRecentB1ockHashes11111111111111111111: \"Sysvar: Recent Blockhashes\",\n  [SYSVAR_RENT_PUBKEY.toBase58()]: \"Sysvar: Rent\",\n  [SYSVAR_REWARDS_PUBKEY.toBase58()]: \"Sysvar: Rewards\",\n  SysvarS1otHashes111111111111111111111111111: \"Sysvar: Slot Hashes\",\n  SysvarS1otHistory11111111111111111111111111: \"Sysvar: Slot History\",\n  [SYSVAR_STAKE_HISTORY_PUBKEY.toBase58()]: \"Sysvar: Stake History\",\n};\n\nexport function addressLabel(\n  address: string,\n  cluster: Cluster\n): string | undefined {\n  return (\n    PROGRAM_NAME_BY_ID[address] ||\n    LOADER_IDS[address] ||\n    SYSVAR_IDS[address] ||\n    SYSVAR_ID[address] ||\n    TokenRegistry.get(address, cluster)?.name ||\n    SerumMarketRegistry.get(address, cluster)\n  );\n}\n\nexport function displayAddress(address: string, cluster: Cluster): string {\n  return addressLabel(address, cluster) || address;\n}\n\nexport function intoTransactionInstruction(\n  tx: ParsedTransaction,\n  instruction: ParsedInstruction | PartiallyDecodedInstruction\n): TransactionInstruction | undefined {\n  const message = tx.message;\n  if (\"parsed\" in instruction) return;\n\n  const keys = [];\n  for (const account of instruction.accounts) {\n    const accountKey = message.accountKeys.find(({ pubkey }) =>\n      pubkey.equals(account)\n    );\n    if (!accountKey) return;\n    keys.push({\n      pubkey: accountKey.pubkey,\n      isSigner: accountKey.signer,\n      isWritable: accountKey.writable,\n    });\n  }\n\n  return new TransactionInstruction({\n    data: bs58.decode(instruction.data),\n    keys: keys,\n    programId: instruction.programId,\n  });\n}\n\nexport function intoParsedTransaction(tx: Transaction): ParsedTransaction {\n  const message = tx.compileMessage();\n  return {\n    signatures: tx.signatures.map((value) =>\n      bs58.encode(value.signature as any)\n    ),\n    message: {\n      accountKeys: message.accountKeys.map((key, index) => ({\n        pubkey: key,\n        signer: tx.signatures.some(({ publicKey }) => publicKey.equals(key)),\n        writable: message.isAccountWritable(index),\n      })),\n      instructions: message.instructions.map((ix) => ({\n        programId: message.accountKeys[ix.programIdIndex],\n        accounts: ix.accounts.map((index) => message.accountKeys[index]),\n        data: ix.data,\n      })),\n      recentBlockhash: message.recentBlockhash,\n    },\n  };\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Select, { InputActionMeta, ActionMeta, ValueType } from \"react-select\";\nimport StateManager from \"react-select\";\nimport {\n  LOADER_IDS,\n  PROGRAM_NAME_BY_ID,\n  SYSVAR_IDS,\n  LoaderName,\n  SEARCHABLE_PROGRAMS,\n} from \"utils/tx\";\nimport { TokenRegistry } from \"tokenRegistry\";\nimport { Cluster, useCluster } from \"providers/cluster\";\n\nexport function SearchBar() {\n  const [search, setSearch] = React.useState(\"\");\n  const selectRef = React.useRef<StateManager<any> | null>(null);\n  const history = useHistory();\n  const location = useLocation();\n  const { cluster } = useCluster();\n\n  const onChange = (\n    { pathname }: ValueType<any, false>,\n    meta: ActionMeta<any>\n  ) => {\n    if (meta.action === \"select-option\") {\n      history.push({ ...location, pathname });\n      setSearch(\"\");\n    }\n  };\n\n  const onInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === \"input-change\") setSearch(value);\n  };\n\n  const resetValue = \"\" as any;\n  return (\n    <div className=\"container my-4\">\n      <div className=\"row align-items-center\">\n        <div className=\"col\">\n          <Select\n            ref={(ref) => (selectRef.current = ref)}\n            options={buildOptions(search, cluster)}\n            noOptionsMessage={() => \"No Results\"}\n            placeholder=\"Search for blocks, accounts, transactions, programs, and tokens\"\n            value={resetValue}\n            inputValue={search}\n            blurInputOnSelect\n            onMenuClose={() => selectRef.current?.blur()}\n            onChange={onChange}\n            styles={{\n              /* work around for https://github.com/JedWatson/react-select/issues/3857 */\n              placeholder: (style) => ({ ...style, pointerEvents: \"none\" }),\n              input: (style) => ({ ...style, width: \"100%\" }),\n            }}\n            onInputChange={onInputChange}\n            components={{ DropdownIndicator }}\n            classNamePrefix=\"search-bar\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction buildProgramOptions(search: string) {\n  const matchedPrograms = Object.entries(PROGRAM_NAME_BY_ID).filter(\n    ([address, name]) => {\n      return (\n        SEARCHABLE_PROGRAMS.includes(name) &&\n        (name.toLowerCase().includes(search.toLowerCase()) ||\n          address.includes(search))\n      );\n    }\n  );\n\n  if (matchedPrograms.length > 0) {\n    return {\n      label: \"Programs\",\n      options: matchedPrograms.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nconst SEARCHABLE_LOADERS: LoaderName[] = [\"BPF Loader\", \"BPF Loader 2\"];\n\nfunction buildLoaderOptions(search: string) {\n  const matchedLoaders = Object.entries(LOADER_IDS).filter(\n    ([address, name]) => {\n      return (\n        SEARCHABLE_LOADERS.includes(name) &&\n        (name.toLowerCase().includes(search.toLowerCase()) ||\n          address.includes(search))\n      );\n    }\n  );\n\n  if (matchedLoaders.length > 0) {\n    return {\n      label: \"Program Loaders\",\n      options: matchedLoaders.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildSysvarOptions(search: string) {\n  const matchedSysvars = Object.entries(SYSVAR_IDS).filter(\n    ([address, name]) => {\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedSysvars.length > 0) {\n    return {\n      label: \"Sysvars\",\n      options: matchedSysvars.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildTokenOptions(search: string, cluster: Cluster) {\n  const matchedTokens = Object.entries(TokenRegistry.all(cluster)).filter(\n    ([address, details]) => {\n      const searchLower = search.toLowerCase();\n      return (\n        details.name.toLowerCase().includes(searchLower) ||\n        details.symbol.toLowerCase().includes(searchLower) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedTokens.length > 0) {\n    return {\n      label: \"Tokens\",\n      options: matchedTokens.map(([id, details]) => ({\n        label: details.name,\n        value: [details.name, details.symbol, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildOptions(rawSearch: string, cluster: Cluster) {\n  const search = rawSearch.trim();\n  if (search.length === 0) return [];\n\n  const options = [];\n\n  const programOptions = buildProgramOptions(search);\n  if (programOptions) {\n    options.push(programOptions);\n  }\n\n  const loaderOptions = buildLoaderOptions(search);\n  if (loaderOptions) {\n    options.push(loaderOptions);\n  }\n\n  const sysvarOptions = buildSysvarOptions(search);\n  if (sysvarOptions) {\n    options.push(sysvarOptions);\n  }\n\n  const tokenOptions = buildTokenOptions(search, cluster);\n  if (tokenOptions) {\n    options.push(tokenOptions);\n  }\n\n  if (!isNaN(Number(search))) {\n    options.push({\n      label: \"Block\",\n      options: [\n        {\n          label: `Slot #${search}`,\n          value: [search],\n          pathname: `/block/${search}`,\n        },\n      ],\n    });\n  }\n\n  // Prefer nice suggestions over raw suggestions\n  if (options.length > 0) return options;\n\n  try {\n    const decoded = bs58.decode(search);\n    if (decoded.length === 32) {\n      options.push({\n        label: \"Account\",\n        options: [\n          {\n            label: search,\n            value: [search],\n            pathname: \"/address/\" + search,\n          },\n        ],\n      });\n    } else if (decoded.length === 64) {\n      options.push({\n        label: \"Transaction\",\n        options: [\n          {\n            label: search,\n            value: [search],\n            pathname: \"/tx/\" + search,\n          },\n        ],\n      });\n    }\n  } catch (err) {}\n  return options;\n}\n\nfunction DropdownIndicator() {\n  return (\n    <div className=\"search-indicator\">\n      <span className=\"fe fe-search\"></span>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport type CacheEntry<T> = {\n  status: FetchStatus;\n  data?: T;\n};\n\nexport type State<T> = {\n  entries: {\n    [key: string]: CacheEntry<T>;\n  };\n  url: string;\n};\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\nexport type Update<T> = {\n  type: ActionType.Update;\n  url: string;\n  key: string | number;\n  status: FetchStatus;\n  data?: T;\n};\n\nexport type Clear = {\n  type: ActionType.Clear;\n  url: string;\n};\n\nexport type Action<T> = Update<T> | Clear;\nexport type Dispatch<T> = (action: Action<T>) => void;\ntype Reducer<T, U> = (state: State<T>, action: Action<U>) => State<T>;\ntype Reconciler<T, U> = (\n  entry: T | undefined,\n  update: U | undefined\n) => T | undefined;\n\nfunction defaultReconciler<T>(entry: T | undefined, update: T | undefined) {\n  if (entry) {\n    if (update) {\n      return {\n        ...entry,\n        ...update,\n      };\n    } else {\n      return entry;\n    }\n  } else {\n    return update;\n  }\n}\n\nfunction defaultReducer<T>(state: State<T>, action: Action<T>) {\n  return reducer(state, action, defaultReconciler);\n}\n\nexport function useReducer<T>(url: string) {\n  return React.useReducer<Reducer<T, T>>(defaultReducer, { url, entries: {} });\n}\n\nexport function useCustomReducer<T, U>(\n  url: string,\n  reconciler: Reconciler<T, U>\n) {\n  const customReducer = React.useMemo(() => {\n    return (state: State<T>, action: Action<U>) => {\n      return reducer(state, action, reconciler);\n    };\n  }, [reconciler]);\n  return React.useReducer<Reducer<T, U>>(customReducer, { url, entries: {} });\n}\n\nexport function reducer<T, U>(\n  state: State<T>,\n  action: Action<U>,\n  reconciler: Reconciler<T, U>\n): State<T> {\n  if (action.type === ActionType.Clear) {\n    return { url: action.url, entries: {} };\n  } else if (action.url !== state.url) {\n    return state;\n  }\n\n  switch (action.type) {\n    case ActionType.Update: {\n      const key = action.key;\n      const entry = state.entries[key];\n      const entries = {\n        ...state.entries,\n        [key]: {\n          ...entry,\n          status: action.status,\n          data: reconciler(entry?.data, action.data),\n        },\n      };\n      return { ...state, entries };\n    }\n  }\n}\n","import React from \"react\";\nimport {\n  PublicKey,\n  ConfirmedSignatureInfo,\n  TransactionSignature,\n  Connection,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\ntype AccountHistory = {\n  fetched: ConfirmedSignatureInfo[];\n  foundOldest: boolean;\n};\n\ntype HistoryUpdate = {\n  history?: AccountHistory;\n  before?: TransactionSignature;\n};\n\ntype State = Cache.State<AccountHistory>;\ntype Dispatch = Cache.Dispatch<HistoryUpdate>;\n\nfunction combineFetched(\n  fetched: ConfirmedSignatureInfo[],\n  current: ConfirmedSignatureInfo[] | undefined,\n  before: TransactionSignature | undefined\n) {\n  if (current === undefined || current.length === 0) {\n    return fetched;\n  }\n\n  // History was refreshed, fetch results should be prepended if contiguous\n  if (before === undefined) {\n    const end = fetched.findIndex((f) => f.signature === current[0].signature);\n    if (end < 0) return fetched;\n    return fetched.slice(0, end).concat(current);\n  }\n\n  // More history was loaded, fetch results should be appended\n  if (current[current.length - 1].signature === before) {\n    return current.concat(fetched);\n  }\n\n  return fetched;\n}\n\nfunction reconcile(\n  history: AccountHistory | undefined,\n  update: HistoryUpdate | undefined\n) {\n  if (update?.history === undefined) return history;\n  return {\n    fetched: combineFetched(\n      update.history.fetched,\n      history?.fetched,\n      update?.before\n    ),\n    foundOldest: update?.history?.foundOldest || history?.foundOldest || false,\n  };\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype HistoryProviderProps = { children: React.ReactNode };\nexport function HistoryProvider({ children }: HistoryProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useCustomReducer(url, reconcile);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchAccountHistory(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string,\n  options: { before?: TransactionSignature; limit: number }\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: pubkey.toBase58(),\n    url,\n  });\n\n  let status;\n  let history;\n  try {\n    const connection = new Connection(url);\n    const fetched = await connection.getConfirmedSignaturesForAddress2(\n      pubkey,\n      options\n    );\n    history = {\n      fetched,\n      foundOldest: fetched.length < options.limit,\n    };\n    status = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    status = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key: pubkey.toBase58(),\n    status,\n    data: {\n      history,\n      before: options?.before,\n    },\n  });\n}\n\nexport function useAccountHistories() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useAccountHistories must be used within a AccountsProvider`\n    );\n  }\n\n  return context.entries;\n}\n\nexport function useAccountHistory(\n  address: string\n): Cache.CacheEntry<AccountHistory> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccountHistory must be used within a AccountsProvider`);\n  }\n\n  return context.entries[address];\n}\n\nexport function useFetchAccountHistory() {\n  const { cluster, url } = useCluster();\n  const state = React.useContext(StateContext);\n  const dispatch = React.useContext(DispatchContext);\n  if (!state || !dispatch) {\n    throw new Error(\n      `useFetchAccountHistory must be used within a AccountsProvider`\n    );\n  }\n\n  return React.useCallback(\n    (pubkey: PublicKey, refresh?: boolean) => {\n      const before = state.entries[pubkey.toBase58()];\n      if (!refresh && before?.data?.fetched && before.data.fetched.length > 0) {\n        if (before.data.foundOldest) return;\n        const oldest =\n          before.data.fetched[before.data.fetched.length - 1].signature;\n        fetchAccountHistory(dispatch, pubkey, cluster, url, {\n          before: oldest,\n          limit: 25,\n        });\n      } else {\n        fetchAccountHistory(dispatch, pubkey, cluster, url, { limit: 25 });\n      }\n    },\n    [state, dispatch, cluster, url]\n  );\n}\n","import { coercion, struct, Struct } from \"superstruct\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst PubkeyValue = struct(\"Pubkey\", (value) => value instanceof PublicKey);\nexport const Pubkey: Struct<PublicKey, any> = coercion(PubkeyValue, (value) => {\n  if (typeof value === \"string\") return new PublicKey(value);\n  throw new Error(\"invalid pubkey\");\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  StructType,\n  number,\n  optional,\n  enums,\n  any,\n  boolean,\n  string,\n  array,\n  pick,\n  nullable,\n} from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type TokenAccountType = StructType<typeof TokenAccountType>;\nexport const TokenAccountType = enums([\"mint\", \"account\", \"multisig\"]);\n\nexport type TokenAccountState = StructType<typeof AccountState>;\nconst AccountState = enums([\"initialized\", \"uninitialized\", \"frozen\"]);\n\nconst TokenAmount = pick({\n  decimals: number(),\n  uiAmount: number(),\n  amount: string(),\n});\n\nexport type TokenAccountInfo = StructType<typeof TokenAccountInfo>;\nexport const TokenAccountInfo = pick({\n  mint: Pubkey,\n  owner: Pubkey,\n  tokenAmount: TokenAmount,\n  delegate: optional(Pubkey),\n  state: AccountState,\n  isNative: boolean(),\n  rentExemptReserve: optional(TokenAmount),\n  delegatedAmount: optional(TokenAmount),\n  closeAuthority: optional(Pubkey),\n});\n\nexport type MintAccountInfo = StructType<typeof MintAccountInfo>;\nexport const MintAccountInfo = pick({\n  mintAuthority: nullable(Pubkey),\n  supply: string(),\n  decimals: number(),\n  isInitialized: boolean(),\n  freezeAuthority: nullable(Pubkey),\n});\n\nexport type MultisigAccountInfo = StructType<typeof MultisigAccountInfo>;\nexport const MultisigAccountInfo = pick({\n  numRequiredSigners: number(),\n  numValidSigners: number(),\n  isInitialized: boolean(),\n  signers: array(Pubkey),\n});\n\nexport type TokenAccount = StructType<typeof TokenAccount>;\nexport const TokenAccount = pick({\n  type: TokenAccountType,\n  info: any(),\n});\n","import React from \"react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { TokenAccountInfo } from \"validators/accounts/token\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { coerce } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\n\nexport type TokenInfoWithPubkey = {\n  info: TokenAccountInfo;\n  pubkey: PublicKey;\n};\n\ninterface AccountTokens {\n  tokens?: TokenInfoWithPubkey[];\n}\n\ntype State = Cache.State<AccountTokens>;\ntype Dispatch = Cache.Dispatch<AccountTokens>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TokensProvider({ children }: ProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<AccountTokens>(url);\n\n  React.useEffect(() => {\n    dispatch({ url, type: ActionType.Clear });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nasync function fetchAccountTokens(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  const key = pubkey.toBase58();\n  dispatch({\n    type: ActionType.Update,\n    key,\n    status: FetchStatus.Fetching,\n    url,\n  });\n\n  let status;\n  let data;\n  try {\n    const { value } = await new Connection(\n      url,\n      \"recent\"\n    ).getParsedTokenAccountsByOwner(pubkey, { programId: TOKEN_PROGRAM_ID });\n    data = {\n      tokens: value.map((accountInfo) => {\n        const parsedInfo = accountInfo.account.data.parsed.info;\n        const info = coerce(parsedInfo, TokenAccountInfo);\n        return { info, pubkey: accountInfo.pubkey };\n      }),\n    };\n    status = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    status = FetchStatus.FetchFailed;\n  }\n  dispatch({ type: ActionType.Update, url, status, data, key });\n}\n\nexport function useAccountOwnedTokens(\n  address: string\n): Cache.CacheEntry<AccountTokens> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useAccountOwnedTokens must be used within a AccountsProvider`\n    );\n  }\n\n  return context.entries[address];\n}\n\nexport function useFetchAccountOwnedTokens() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchAccountOwnedTokens must be used within a AccountsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchAccountTokens(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { object, any, StructType, string } from \"superstruct\";\n\nexport type ParsedInfo = StructType<typeof ParsedInfo>;\nexport const ParsedInfo = object({\n  type: string(),\n  info: any(),\n});\n","import { coercion, struct, Struct } from \"superstruct\";\nimport BN from \"bn.js\";\n\nexport const BigNumValue = struct(\"BigNum\", (value) => value instanceof BN);\nexport const BigNum: Struct<BN, any> = coercion(BigNumValue, (value) => {\n  if (typeof value === \"string\") return new BN(value, 10);\n  throw new Error(\"invalid big num\");\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { object, StructType, number, nullable, enums } from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\nimport { BigNum } from \"validators/bignum\";\n\nexport type StakeAccountType = StructType<typeof StakeAccountType>;\nexport const StakeAccountType = enums([\n  \"uninitialized\",\n  \"initialized\",\n  \"delegated\",\n  \"rewardsPool\",\n]);\n\nexport type StakeMeta = StructType<typeof StakeMeta>;\nexport const StakeMeta = object({\n  rentExemptReserve: BigNum,\n  authorized: object({\n    staker: Pubkey,\n    withdrawer: Pubkey,\n  }),\n  lockup: object({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: Pubkey,\n  }),\n});\n\nexport type StakeAccountInfo = StructType<typeof StakeAccountInfo>;\nexport const StakeAccountInfo = object({\n  meta: StakeMeta,\n  stake: nullable(\n    object({\n      delegation: object({\n        voter: Pubkey,\n        stake: BigNum,\n        activationEpoch: BigNum,\n        deactivationEpoch: BigNum,\n        warmupCooldownRate: number(),\n      }),\n      creditsObserved: number(),\n    })\n  ),\n});\n\nexport type StakeAccount = StructType<typeof StakeAccount>;\nexport const StakeAccount = object({\n  type: StakeAccountType,\n  info: StakeAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  StructType,\n  enums,\n  pick,\n  number,\n  array,\n  object,\n  nullable,\n  string,\n} from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type VoteAccountType = StructType<typeof VoteAccountType>;\nexport const VoteAccountType = enums([\"vote\"]);\n\nexport type AuthorizedVoter = StructType<typeof AuthorizedVoter>;\nexport const AuthorizedVoter = pick({\n  authorizedVoter: Pubkey,\n  epoch: number(),\n});\n\nexport type PriorVoter = StructType<typeof PriorVoter>;\nexport const PriorVoter = pick({\n  authorizedPubkey: Pubkey,\n  epochOfLastAuthorizedSwitch: number(),\n  targetEpoch: number(),\n});\n\nexport type EpochCredits = StructType<typeof EpochCredits>;\nexport const EpochCredits = pick({\n  epoch: number(),\n  credits: string(),\n  previousCredits: string(),\n});\n\nexport type Vote = StructType<typeof Vote>;\nexport const Vote = object({\n  slot: number(),\n  confirmationCount: number(),\n});\n\nexport type VoteAccountInfo = StructType<typeof VoteAccountInfo>;\nexport const VoteAccountInfo = pick({\n  authorizedVoters: array(AuthorizedVoter),\n  authorizedWithdrawer: Pubkey,\n  commission: number(),\n  epochCredits: array(EpochCredits),\n  lastTimestamp: object({\n    slot: number(),\n    timestamp: number(),\n  }),\n  nodePubkey: Pubkey,\n  priorVoters: array(PriorVoter),\n  rootSlot: nullable(number()),\n  votes: array(Vote),\n});\n\nexport type VoteAccount = StructType<typeof VoteAccount>;\nexport const VoteAccount = pick({\n  type: VoteAccountType,\n  info: VoteAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { StructType, object, string, enums, pick } from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type NonceAccountType = StructType<typeof NonceAccountType>;\nexport const NonceAccountType = enums([\"uninitialized\", \"initialized\"]);\n\nexport type NonceAccountInfo = StructType<typeof NonceAccountInfo>;\nexport const NonceAccountInfo = pick({\n  authority: Pubkey,\n  blockhash: string(),\n  feeCalculator: pick({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type NonceAccount = StructType<typeof NonceAccount>;\nexport const NonceAccount = object({\n  type: NonceAccountType,\n  info: NonceAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  StructType,\n  enums,\n  array,\n  number,\n  object,\n  boolean,\n  string,\n  pick,\n  literal,\n  union,\n} from \"superstruct\";\n\nexport type SysvarAccountType = StructType<typeof SysvarAccountType>;\nexport const SysvarAccountType = enums([\n  \"clock\",\n  \"epochSchedule\",\n  \"fees\",\n  \"recentBlockhashes\",\n  \"rent\",\n  \"rewards\",\n  \"slotHashes\",\n  \"slotHistory\",\n  \"stakeHistory\",\n]);\n\nexport type ClockAccountInfo = StructType<typeof ClockAccountInfo>;\nexport const ClockAccountInfo = pick({\n  slot: number(),\n  epoch: number(),\n  leaderScheduleEpoch: number(),\n  unixTimestamp: number(),\n});\n\nexport type SysvarClockAccount = StructType<typeof SysvarClockAccount>;\nexport const SysvarClockAccount = object({\n  type: literal(\"clock\"),\n  info: ClockAccountInfo,\n});\n\nexport type EpochScheduleInfo = StructType<typeof EpochScheduleInfo>;\nexport const EpochScheduleInfo = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\nexport type SysvarEpochScheduleAccount = StructType<\n  typeof SysvarEpochScheduleAccount\n>;\nexport const SysvarEpochScheduleAccount = object({\n  type: literal(\"epochSchedule\"),\n  info: EpochScheduleInfo,\n});\n\nexport type FeesInfo = StructType<typeof FeesInfo>;\nexport const FeesInfo = pick({\n  feeCalculator: pick({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type SysvarFeesAccount = StructType<typeof SysvarFeesAccount>;\nexport const SysvarFeesAccount = object({\n  type: literal(\"fees\"),\n  info: FeesInfo,\n});\n\nexport type RecentBlockhashesEntry = StructType<typeof RecentBlockhashesEntry>;\nexport const RecentBlockhashesEntry = pick({\n  blockhash: string(),\n  feeCalculator: pick({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type RecentBlockhashesInfo = StructType<typeof RecentBlockhashesInfo>;\nexport const RecentBlockhashesInfo = array(RecentBlockhashesEntry);\n\nexport type SysvarRecentBlockhashesAccount = StructType<\n  typeof SysvarRecentBlockhashesAccount\n>;\nexport const SysvarRecentBlockhashesAccount = object({\n  type: literal(\"recentBlockhashes\"),\n  info: RecentBlockhashesInfo,\n});\n\nexport type RentInfo = StructType<typeof RentInfo>;\nexport const RentInfo = pick({\n  lamportsPerByteYear: string(),\n  exemptionThreshold: number(),\n  burnPercent: number(),\n});\n\nexport type SysvarRentAccount = StructType<typeof SysvarRentAccount>;\nexport const SysvarRentAccount = object({\n  type: literal(\"rent\"),\n  info: RentInfo,\n});\n\nexport type RewardsInfo = StructType<typeof RewardsInfo>;\nexport const RewardsInfo = pick({\n  validatorPointValue: number(),\n});\n\nexport type SysvarRewardsAccount = StructType<typeof SysvarRewardsAccount>;\nexport const SysvarRewardsAccount = object({\n  type: literal(\"rewards\"),\n  info: RewardsInfo,\n});\n\nexport type SlotHashEntry = StructType<typeof SlotHashEntry>;\nexport const SlotHashEntry = pick({\n  slot: number(),\n  hash: string(),\n});\n\nexport type SlotHashesInfo = StructType<typeof SlotHashesInfo>;\nexport const SlotHashesInfo = array(SlotHashEntry);\n\nexport type SysvarSlotHashesAccount = StructType<\n  typeof SysvarSlotHashesAccount\n>;\nexport const SysvarSlotHashesAccount = object({\n  type: literal(\"slotHashes\"),\n  info: SlotHashesInfo,\n});\n\nexport type SlotHistoryInfo = StructType<typeof SlotHistoryInfo>;\nexport const SlotHistoryInfo = pick({\n  nextSlot: number(),\n  bits: string(),\n});\n\nexport type SysvarSlotHistoryAccount = StructType<\n  typeof SysvarSlotHistoryAccount\n>;\nexport const SysvarSlotHistoryAccount = object({\n  type: literal(\"slotHistory\"),\n  info: SlotHistoryInfo,\n});\n\nexport type StakeHistoryEntryItem = StructType<typeof StakeHistoryEntryItem>;\nexport const StakeHistoryEntryItem = pick({\n  effective: number(),\n  activating: number(),\n  deactivating: number(),\n});\n\nexport type StakeHistoryEntry = StructType<typeof StakeHistoryEntry>;\nexport const StakeHistoryEntry = pick({\n  epoch: number(),\n  stakeHistory: StakeHistoryEntryItem,\n});\n\nexport type StakeHistoryInfo = StructType<typeof StakeHistoryInfo>;\nexport const StakeHistoryInfo = array(StakeHistoryEntry);\n\nexport type SysvarStakeHistoryAccount = StructType<\n  typeof SysvarStakeHistoryAccount\n>;\nexport const SysvarStakeHistoryAccount = object({\n  type: literal(\"stakeHistory\"),\n  info: StakeHistoryInfo,\n});\n\nexport type SysvarAccount = StructType<typeof SysvarAccount>;\nexport const SysvarAccount = union([\n  SysvarClockAccount,\n  SysvarEpochScheduleAccount,\n  SysvarFeesAccount,\n  SysvarRecentBlockhashesAccount,\n  SysvarRentAccount,\n  SysvarRewardsAccount,\n  SysvarSlotHashesAccount,\n  SysvarSlotHistoryAccount,\n  SysvarStakeHistoryAccount,\n]);\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  StructType,\n  pick,\n  array,\n  boolean,\n  object,\n  number,\n  string,\n  record,\n  union,\n  literal,\n} from \"superstruct\";\n\nexport type StakeConfigInfo = StructType<typeof StakeConfigInfo>;\nexport const StakeConfigInfo = pick({\n  warmupCooldownRate: number(),\n  slashPenalty: number(),\n});\n\nexport type ConfigKey = StructType<typeof ConfigKey>;\nexport const ConfigKey = pick({\n  pubkey: string(),\n  signer: boolean(),\n});\n\nexport type ValidatorInfoConfigData = StructType<\n  typeof ValidatorInfoConfigData\n>;\nexport const ValidatorInfoConfigData = record(string(), string());\n\nexport type ValidatorInfoConfigInfo = StructType<\n  typeof ValidatorInfoConfigInfo\n>;\nexport const ValidatorInfoConfigInfo = pick({\n  keys: array(ConfigKey),\n  configData: ValidatorInfoConfigData,\n});\n\nexport type ValidatorInfoAccount = StructType<typeof ValidatorInfoAccount>;\nexport const ValidatorInfoAccount = object({\n  type: literal(\"validatorInfo\"),\n  info: ValidatorInfoConfigInfo,\n});\n\nexport type StakeConfigInfoAccount = StructType<typeof StakeConfigInfoAccount>;\nexport const StakeConfigInfoAccount = object({\n  type: literal(\"stakeConfig\"),\n  info: StakeConfigInfo,\n});\n\nexport type ConfigAccount = StructType<typeof ConfigAccount>;\nexport const ConfigAccount = union([\n  StakeConfigInfoAccount,\n  ValidatorInfoAccount,\n]);\n","import React from \"react\";\n\nconst initialState = new Map();\nconst FlaggedContext = React.createContext<Map<string, boolean>>(initialState);\n\ntype ProviderProps = { children: React.ReactNode };\n\nexport function FlaggedAccountsProvider({ children }: ProviderProps) {\n  const [flaggedAccounts, setFlaggedAccounts] = React.useState<\n    Map<string, boolean>\n  >(initialState);\n\n  React.useEffect(() => {\n    window\n      .fetch(\n        \"https://solana-labs.github.io/solana-flagged-accounts/flagged.txt\"\n      )\n      .then((res) => {\n        return res.text();\n      })\n      .then((body: string) => {\n        const flaggedAccounts = new Map<string, boolean>();\n        body\n          .split(\"\\n\")\n          .forEach((account) => flaggedAccounts.set(account, true));\n        setFlaggedAccounts(flaggedAccounts);\n      });\n  }, []);\n\n  return (\n    <FlaggedContext.Provider value={flaggedAccounts}>\n      {children}\n    </FlaggedContext.Provider>\n  );\n}\n\nexport function useFlaggedAccounts() {\n  const flaggedAccounts = React.useContext(FlaggedContext);\n  if (!flaggedAccounts) {\n    throw new Error(\n      `useFlaggedAccounts must be used within a AccountsProvider`\n    );\n  }\n\n  return { flaggedAccounts };\n}\n","import React from \"react\";\nimport { PublicKey, Connection, StakeActivationData } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { HistoryProvider } from \"./history\";\nimport { TokensProvider } from \"./tokens\";\nimport { coerce } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { StakeAccount } from \"validators/accounts/stake\";\nimport {\n  TokenAccount,\n  MintAccountInfo,\n  TokenAccountInfo,\n} from \"validators/accounts/token\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\nimport { VoteAccount } from \"validators/accounts/vote\";\nimport { NonceAccount } from \"validators/accounts/nonce\";\nimport { SysvarAccount } from \"validators/accounts/sysvar\";\nimport { ConfigAccount } from \"validators/accounts/config\";\nimport { FlaggedAccountsProvider } from \"./flagged-accounts\";\nexport { useAccountHistory } from \"./history\";\n\nexport type StakeProgramData = {\n  program: \"stake\";\n  parsed: StakeAccount;\n  activation?: StakeActivationData;\n};\n\nexport type TokenProgramData = {\n  program: \"spl-token\";\n  parsed: TokenAccount;\n};\n\nexport type VoteProgramData = {\n  program: \"vote\";\n  parsed: VoteAccount;\n};\n\nexport type NonceProgramData = {\n  program: \"nonce\";\n  parsed: NonceAccount;\n};\n\nexport type SysvarProgramData = {\n  program: \"sysvar\";\n  parsed: SysvarAccount;\n};\n\nexport type ConfigProgramData = {\n  program: \"config\";\n  parsed: ConfigAccount;\n};\n\nexport type ProgramData =\n  | StakeProgramData\n  | TokenProgramData\n  | VoteProgramData\n  | NonceProgramData\n  | SysvarProgramData\n  | ConfigProgramData;\n\nexport interface Details {\n  executable: boolean;\n  owner: PublicKey;\n  space?: number;\n  data?: ProgramData;\n}\n\nexport interface Account {\n  pubkey: PublicKey;\n  lamports: number;\n  details?: Details;\n}\n\ntype State = Cache.State<Account>;\ntype Dispatch = Cache.Dispatch<Account>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype AccountsProviderProps = { children: React.ReactNode };\nexport function AccountsProvider({ children }: AccountsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Account>(url);\n\n  // Clear accounts cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <TokensProvider>\n          <HistoryProvider>\n            <FlaggedAccountsProvider>{children}</FlaggedAccountsProvider>\n          </HistoryProvider>\n        </TokensProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchAccountInfo(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: pubkey.toBase58(),\n    status: Cache.FetchStatus.Fetching,\n    url,\n  });\n\n  let data;\n  let fetchStatus;\n  try {\n    const connection = new Connection(url, \"single\");\n    const result = (await connection.getParsedAccountInfo(pubkey)).value;\n\n    let lamports, details;\n    if (result === null) {\n      lamports = 0;\n    } else {\n      lamports = result.lamports;\n\n      // Only save data in memory if we can decode it\n      let space;\n      if (!(\"parsed\" in result.data)) {\n        space = result.data.length;\n      }\n\n      let data: ProgramData | undefined;\n      if (\"parsed\" in result.data) {\n        try {\n          const info = coerce(result.data.parsed, ParsedInfo);\n          switch (result.data.program) {\n            case \"stake\": {\n              const parsed = coerce(info, StakeAccount);\n              const isDelegated = parsed.type === \"delegated\";\n              const activation = isDelegated\n                ? await connection.getStakeActivation(pubkey)\n                : undefined;\n\n              data = {\n                program: result.data.program,\n                parsed,\n                activation,\n              };\n              break;\n            }\n            case \"vote\":\n              data = {\n                program: result.data.program,\n                parsed: coerce(info, VoteAccount),\n              };\n              break;\n            case \"nonce\":\n              data = {\n                program: result.data.program,\n                parsed: coerce(info, NonceAccount),\n              };\n              break;\n            case \"sysvar\":\n              data = {\n                program: result.data.program,\n                parsed: coerce(info, SysvarAccount),\n              };\n              break;\n            case \"config\":\n              data = {\n                program: result.data.program,\n                parsed: coerce(info, ConfigAccount),\n              };\n              break;\n\n            case \"spl-token\":\n              data = {\n                program: result.data.program,\n                parsed: coerce(info, TokenAccount),\n              };\n              break;\n            default:\n              data = undefined;\n          }\n        } catch (error) {\n          reportError(error, { url, address: pubkey.toBase58() });\n        }\n      }\n\n      details = {\n        space,\n        executable: result.executable,\n        owner: result.owner,\n        data,\n      };\n    }\n    data = { pubkey, lamports, details };\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    data,\n    key: pubkey.toBase58(),\n    url,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a AccountsProvider`);\n  }\n  return context.entries;\n}\n\nexport function useAccountInfo(\n  address: string | undefined\n): Cache.CacheEntry<Account> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccountInfo must be used within a AccountsProvider`);\n  }\n  if (address === undefined) return;\n  return context.entries[address];\n}\n\nexport function useMintAccountInfo(\n  address: string | undefined\n): MintAccountInfo | undefined {\n  const accountInfo = useAccountInfo(address);\n  return React.useMemo(() => {\n    if (address === undefined) return;\n\n    try {\n      const data = accountInfo?.data?.details?.data;\n      if (!data) return;\n      if (data.program !== \"spl-token\" || data.parsed.type !== \"mint\") {\n        return;\n      }\n\n      return coerce(data.parsed.info, MintAccountInfo);\n    } catch (err) {\n      reportError(err, { address });\n    }\n  }, [address, accountInfo]);\n}\n\nexport function useTokenAccountInfo(\n  address: string | undefined\n): TokenAccountInfo | undefined {\n  const accountInfo = useAccountInfo(address);\n  if (address === undefined) return;\n\n  try {\n    const data = accountInfo?.data?.details?.data;\n    if (!data) return;\n    if (data.program !== \"spl-token\" || data.parsed.type !== \"account\") {\n      return;\n    }\n\n    return coerce(data.parsed.info, TokenAccountInfo);\n  } catch (err) {\n    reportError(err, { address });\n  }\n}\n\nexport function useFetchAccountInfo() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchAccountInfo must be used within a AccountsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchAccountInfo(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\n\nexport function TableCardBody({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <tbody className=\"list\">{children}</tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { clusterPath } from \"utils/url\";\nimport { displayAddress } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\n\ntype CopyState = \"copy\" | \"copied\";\ntype Props = {\n  pubkey: PublicKey;\n  alignRight?: boolean;\n  link?: boolean;\n  raw?: boolean;\n  truncate?: boolean;\n  truncateUnknown?: boolean;\n};\n\nexport function Address({\n  pubkey,\n  alignRight,\n  link,\n  raw,\n  truncate,\n  truncateUnknown,\n}: Props) {\n  const [state, setState] = useState<CopyState>(\"copy\");\n  const address = pubkey.toBase58();\n  const { cluster } = useCluster();\n\n  const copyToClipboard = () => navigator.clipboard.writeText(address);\n  const handleClick = () =>\n    copyToClipboard().then(() => {\n      setState(\"copied\");\n      setTimeout(() => setState(\"copy\"), 1000);\n    });\n\n  const copyIcon =\n    state === \"copy\" ? (\n      <span className=\"fe fe-copy\" onClick={handleClick}></span>\n    ) : (\n      <span className=\"fe fe-check-circle\"></span>\n    );\n\n  if (truncateUnknown && address === displayAddress(address, cluster)) {\n    truncate = true;\n  }\n\n  const content = (\n    <>\n      <span className=\"c-pointer font-size-tiny mr-2\">{copyIcon}</span>\n      <span className=\"text-monospace\">\n        {link ? (\n          <Link\n            className={truncate ? \"text-truncate address-truncate\" : \"\"}\n            to={clusterPath(`/address/${address}`)}\n          >\n            {raw ? address : displayAddress(address, cluster)}\n          </Link>\n        ) : (\n          <span className={truncate ? \"text-truncate address-truncate\" : \"\"}>\n            {raw ? address : displayAddress(address, cluster)}\n          </span>\n        )}\n      </span>\n    </>\n  );\n\n  return (\n    <>\n      <div\n        className={`d-none d-lg-flex align-items-center ${\n          alignRight ? \"justify-content-end\" : \"\"\n        }`}\n      >\n        {content}\n      </div>\n      <div className=\"d-flex d-lg-none align-items-center\">{content}</div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { lamportsToSolString } from \"utils\";\nimport { displayTimestampUtc } from \"utils/date\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { Address } from \"components/common/Address\";\nimport {\n  StakeAccountInfo,\n  StakeMeta,\n  StakeAccountType,\n} from \"validators/accounts/stake\";\nimport BN from \"bn.js\";\nimport { StakeActivationData } from \"@solana/web3.js\";\n\nconst MAX_EPOCH = new BN(2).pow(new BN(64)).sub(new BN(1));\n\nexport function StakeAccountSection({\n  account,\n  stakeAccount,\n  activation,\n  stakeAccountType,\n}: {\n  account: Account;\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n}) {\n  return (\n    <>\n      <LockupCard stakeAccount={stakeAccount} />\n      <OverviewCard\n        account={account}\n        stakeAccount={stakeAccount}\n        stakeAccountType={stakeAccountType}\n      />\n      {stakeAccount.meta && (\n        <>\n          <DelegationCard\n            stakeAccount={stakeAccount}\n            activation={activation}\n            stakeAccountType={stakeAccountType}\n          />\n          <AuthoritiesCard meta={stakeAccount.meta} />\n        </>\n      )}\n    </>\n  );\n}\n\nfunction LockupCard({ stakeAccount }: { stakeAccount: StakeAccountInfo }) {\n  const unixTimestamp = 1000 * (stakeAccount.meta?.lockup.unixTimestamp || 0);\n  if (Date.now() < unixTimestamp) {\n    const prettyTimestamp = displayTimestampUtc(unixTimestamp);\n    return (\n      <div className=\"alert alert-warning text-center\">\n        <strong>Account is locked!</strong> Lockup expires on {prettyTimestamp}\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst TYPE_NAMES = {\n  uninitialized: \"Uninitialized\",\n  initialized: \"Initialized\",\n  delegated: \"Delegated\",\n  rewardsPool: \"RewardsPool\",\n};\n\nfunction OverviewCard({\n  account,\n  stakeAccount,\n  stakeAccountType,\n}: {\n  account: Account;\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Stake Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-right text-uppercase\">\n            {lamportsToSolString(account.lamports || 0)}\n          </td>\n        </tr>\n        {stakeAccount.meta && (\n          <tr>\n            <td>Rent Reserve (SOL)</td>\n            <td className=\"text-lg-right\">\n              {lamportsToSolString(stakeAccount.meta.rentExemptReserve)}\n            </td>\n          </tr>\n        )}\n        {!stakeAccount.meta && (\n          <tr>\n            <td>State</td>\n            <td className=\"text-lg-right\">{TYPE_NAMES[stakeAccountType]}</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction DelegationCard({\n  stakeAccount,\n  stakeAccountType,\n  activation,\n}: {\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n}) {\n  const displayStatus = () => {\n    let status = TYPE_NAMES[stakeAccountType];\n    let activationState = \"\";\n    if (stakeAccountType !== \"delegated\") {\n      status = \"Not delegated\";\n    } else {\n      activationState = activation ? `(${activation.state})` : \"\";\n    }\n\n    return [status, activationState].join(\" \");\n  };\n\n  let voterPubkey, activationEpoch, deactivationEpoch;\n  const delegation = stakeAccount?.stake?.delegation;\n  if (delegation) {\n    voterPubkey = delegation.voter;\n    activationEpoch = delegation.activationEpoch.eq(MAX_EPOCH)\n      ? \"-\"\n      : delegation.activationEpoch.toString();\n    deactivationEpoch = delegation.deactivationEpoch.eq(MAX_EPOCH)\n      ? \"-\"\n      : delegation.deactivationEpoch.toString();\n  }\n\n  const { stake } = stakeAccount;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Stake Delegation\n        </h3>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Status</td>\n          <td className=\"text-lg-right\">{displayStatus()}</td>\n        </tr>\n\n        {stake && (\n          <>\n            <tr>\n              <td>Delegated Stake (SOL)</td>\n              <td className=\"text-lg-right\">\n                {lamportsToSolString(stake.delegation.stake)}\n              </td>\n            </tr>\n\n            {activation && (\n              <>\n                <tr>\n                  <td>Active Stake (SOL)</td>\n                  <td className=\"text-lg-right\">\n                    {lamportsToSolString(activation.active)}\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>Inactive Stake (SOL)</td>\n                  <td className=\"text-lg-right\">\n                    {lamportsToSolString(activation.inactive)}\n                  </td>\n                </tr>\n              </>\n            )}\n\n            {voterPubkey && (\n              <tr>\n                <td>Delegated Vote Address</td>\n                <td className=\"text-lg-right\">\n                  <Address pubkey={voterPubkey} alignRight link />\n                </td>\n              </tr>\n            )}\n\n            <tr>\n              <td>Activation Epoch</td>\n              <td className=\"text-lg-right\">{activationEpoch}</td>\n            </tr>\n\n            <tr>\n              <td>Deactivation Epoch</td>\n              <td className=\"text-lg-right\">{deactivationEpoch}</td>\n            </tr>\n          </>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction AuthoritiesCard({ meta }: { meta: StakeMeta }) {\n  const hasLockup = meta && meta.lockup.unixTimestamp > 0;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Authorities\n        </h3>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Stake Authority Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={meta.authorized.staker} alignRight link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Withdraw Authority Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={meta.authorized.withdrawer} alignRight link />\n          </td>\n        </tr>\n\n        {hasLockup && (\n          <tr>\n            <td>Lockup Authority Address</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={meta.lockup.custodian} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Account } from \"providers/accounts\";\nimport { lamportsToSolString } from \"utils\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { addressLabel } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\n\nexport function UnknownAccountCard({ account }: { account: Account }) {\n  const { details, lamports } = account;\n  const { cluster } = useCluster();\n  if (lamports === undefined) return null;\n\n  const label = addressLabel(account.pubkey.toBase58(), cluster);\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Overview</h3>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-right\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-right text-uppercase\">\n            {lamportsToSolString(lamports)}\n          </td>\n        </tr>\n\n        {details?.space !== undefined && (\n          <tr>\n            <td>Data (Bytes)</td>\n            <td className=\"text-lg-right\">{details.space}</td>\n          </tr>\n        )}\n\n        {details && (\n          <tr>\n            <td>Owner</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={details.owner} alignRight link />\n            </td>\n          </tr>\n        )}\n\n        {details && (\n          <tr>\n            <td>Executable</td>\n            <td className=\"text-lg-right\">\n              {details.executable ? \"Yes\" : \"No\"}\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport {\n  TokenAccount,\n  MintAccountInfo,\n  TokenAccountInfo,\n  MultisigAccountInfo,\n} from \"validators/accounts/token\";\nimport { coerce } from \"superstruct\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { UnknownAccountCard } from \"./UnknownAccountCard\";\nimport { TokenRegistry } from \"tokenRegistry\";\nimport { useCluster } from \"providers/cluster\";\nimport { normalizeTokenAmount } from \"utils\";\nimport { addressLabel } from \"utils/tx\";\nimport { reportError } from \"utils/sentry\";\n\nexport function TokenAccountSection({\n  account,\n  tokenAccount,\n}: {\n  account: Account;\n  tokenAccount: TokenAccount;\n}) {\n  try {\n    switch (tokenAccount.type) {\n      case \"mint\": {\n        const info = coerce(tokenAccount.info, MintAccountInfo);\n        return <MintAccountCard account={account} info={info} />;\n      }\n      case \"account\": {\n        const info = coerce(tokenAccount.info, TokenAccountInfo);\n        return <TokenAccountCard account={account} info={info} />;\n      }\n      case \"multisig\": {\n        const info = coerce(tokenAccount.info, MultisigAccountInfo);\n        return <MultisigAccountCard account={account} info={info} />;\n      }\n    }\n  } catch (err) {\n    reportError(err, {\n      address: account.pubkey.toBase58(),\n    });\n  }\n  return <UnknownAccountCard account={account} />;\n}\n\nfunction MintAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: MintAccountInfo;\n}) {\n  const { cluster } = useCluster();\n  const mintAddress = account.pubkey.toBase58();\n  const fetchInfo = useFetchAccountInfo();\n  const refresh = () => fetchInfo(account.pubkey);\n\n  const tokenInfo = TokenRegistry.get(mintAddress, cluster);\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          {tokenInfo ? \"Overview\" : \"Token Mint\"}\n        </h3>\n        <button className=\"btn btn-white btn-sm\" onClick={refresh}>\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>\n            {info.mintAuthority === null ? \"Fixed Supply\" : \"Current Supply\"}\n          </td>\n          <td className=\"text-lg-right\">\n            {normalizeTokenAmount(info.supply, info.decimals).toFixed(\n              info.decimals\n            )}\n          </td>\n        </tr>\n        {tokenInfo?.website && (\n          <tr>\n            <td>Website</td>\n            <td className=\"text-lg-right\">\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href={tokenInfo.website}\n              >\n                {tokenInfo.website}\n                <span className=\"fe fe-external-link ml-2\"></span>\n              </a>\n            </td>\n          </tr>\n        )}\n        {info.mintAuthority && (\n          <tr>\n            <td>Mint Authority</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={info.mintAuthority} alignRight link />\n            </td>\n          </tr>\n        )}\n        {info.freezeAuthority && (\n          <tr>\n            <td>Freeze Authority</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={info.freezeAuthority} alignRight link />\n            </td>\n          </tr>\n        )}\n        <tr>\n          <td>Decimals</td>\n          <td className=\"text-lg-right\">{info.decimals}</td>\n        </tr>\n        {!info.isInitialized && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-right\">Uninitialized</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction TokenAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: TokenAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  const { cluster } = useCluster();\n\n  const label = addressLabel(account.pubkey.toBase58(), cluster);\n\n  let unit, balance;\n  if (info.isNative) {\n    unit = \"SOL\";\n    balance = (\n      <>\n        ◎\n        <span className=\"text-monospace\">\n          {new Intl.NumberFormat(\"en-US\", { maximumFractionDigits: 9 }).format(\n            info.tokenAmount.uiAmount\n          )}\n        </span>\n      </>\n    );\n  } else {\n    balance = <>{info.tokenAmount.uiAmount}</>;\n    unit = TokenRegistry.get(info.mint.toBase58(), cluster)?.symbol || \"tokens\";\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Token Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-right\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Mint</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.mint} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Owner</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.owner} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Token balance ({unit})</td>\n          <td className=\"text-lg-right\">{balance}</td>\n        </tr>\n        {info.state === \"uninitialized\" && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-right\">Uninitialized</td>\n          </tr>\n        )}\n        {info.rentExemptReserve && (\n          <tr>\n            <td>Rent-exempt reserve (SOL)</td>\n            <td className=\"text-lg-right\">\n              <>\n                ◎\n                <span className=\"text-monospace\">\n                  {new Intl.NumberFormat(\"en-US\", {\n                    maximumFractionDigits: 9,\n                  }).format(info.rentExemptReserve.uiAmount)}\n                </span>\n              </>\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction MultisigAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: MultisigAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Multisig Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Required Signers</td>\n          <td className=\"text-lg-right\">{info.numRequiredSigners}</td>\n        </tr>\n        <tr>\n          <td>Valid Signers</td>\n          <td className=\"text-lg-right\">{info.numValidSigners}</td>\n        </tr>\n        {info.signers.map((signer) => (\n          <tr key={signer.toString()}>\n            <td>Signer</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={signer} alignRight link />\n            </td>\n          </tr>\n        ))}\n        {!info.isInitialized && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-right\">Uninitialized</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function ErrorCard({\n  retry,\n  retryText,\n  text,\n  subtext,\n}: {\n  retry?: () => void;\n  retryText?: string;\n  text: string;\n  subtext?: string;\n}) {\n  const buttonText = retryText || \"Try Again\";\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        {text}\n        {retry && (\n          <>\n            <span\n              className=\"btn btn-white ml-3 d-none d-md-inline\"\n              onClick={retry}\n            >\n              {buttonText}\n            </span>\n            <div className=\"d-block d-md-none mt-4\">\n              <span className=\"btn btn-white w-100\" onClick={retry}>\n                {buttonText}\n              </span>\n            </div>\n            {subtext && (\n              <div className=\"text-muted\">\n                <hr></hr>\n                {subtext}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function LoadingCard({ message }: { message?: string }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n        {message || \"Loading\"}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { FetchStatus } from \"providers/cache\";\nimport {\n  useFetchAccountOwnedTokens,\n  useAccountOwnedTokens,\n  TokenInfoWithPubkey,\n} from \"providers/accounts/tokens\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Address } from \"components/common/Address\";\nimport { TokenRegistry } from \"tokenRegistry\";\nimport { useQuery } from \"utils/url\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useCluster } from \"providers/cluster\";\n\ntype Display = \"summary\" | \"detail\" | null;\n\nconst useQueryDisplay = (): Display => {\n  const query = useQuery();\n  const filter = query.get(\"display\");\n  if (filter === \"summary\" || filter === \"detail\") {\n    return filter;\n  } else {\n    return null;\n  }\n};\n\nexport function OwnedTokensCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const ownedTokens = useAccountOwnedTokens(address);\n  const fetchAccountTokens = useFetchAccountOwnedTokens();\n  const refresh = () => fetchAccountTokens(pubkey);\n  const [showDropdown, setDropdown] = React.useState(false);\n  const display = useQueryDisplay();\n\n  // Fetch owned tokens\n  React.useEffect(() => {\n    if (!ownedTokens) refresh();\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (ownedTokens === undefined) {\n    return null;\n  }\n\n  const { status } = ownedTokens;\n  const tokens = ownedTokens.data?.tokens;\n  const fetching = status === FetchStatus.Fetching;\n  if (fetching && (tokens === undefined || tokens.length === 0)) {\n    return <LoadingCard message=\"Loading token holdings\" />;\n  } else if (tokens === undefined) {\n    return <ErrorCard retry={refresh} text=\"Failed to fetch token holdings\" />;\n  }\n\n  if (tokens.length === 0) {\n    return (\n      <ErrorCard\n        retry={refresh}\n        retryText=\"Try Again\"\n        text={\"No token holdings found\"}\n      />\n    );\n  }\n\n  return (\n    <>\n      {showDropdown && (\n        <div className=\"dropdown-exit\" onClick={() => setDropdown(false)} />\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Token Holdings</h3>\n          <DisplayDropdown\n            display={display}\n            toggle={() => setDropdown((show) => !show)}\n            show={showDropdown}\n          />\n        </div>\n        {display === \"detail\" ? (\n          <HoldingsDetailTable tokens={tokens} />\n        ) : (\n          <HoldingsSummaryTable tokens={tokens} />\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction HoldingsDetailTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const detailsList: React.ReactNode[] = [];\n  const { cluster } = useCluster();\n  const showLogos = tokens.some(\n    (t) =>\n      TokenRegistry.get(t.info.mint.toBase58(), cluster)?.icon !== undefined\n  );\n  tokens.forEach((tokenAccount) => {\n    const address = tokenAccount.pubkey.toBase58();\n    const mintAddress = tokenAccount.info.mint.toBase58();\n    const tokenDetails = TokenRegistry.get(mintAddress, cluster);\n    detailsList.push(\n      <tr key={address}>\n        {showLogos && (\n          <td className=\"w-1 p-0 text-center\">\n            {tokenDetails?.icon && (\n              <img\n                src={tokenDetails.icon}\n                alt=\"token icon\"\n                className=\"token-icon rounded-circle border border-4 border-gray-dark\"\n              />\n            )}\n          </td>\n        )}\n        <td>\n          <Address pubkey={tokenAccount.pubkey} link truncate />\n        </td>\n        <td>\n          <Address pubkey={tokenAccount.info.mint} link truncate />\n        </td>\n        <td>\n          {tokenAccount.info.tokenAmount.uiAmount}{\" \"}\n          {tokenDetails && tokenDetails.symbol}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <thead>\n          <tr>\n            {showLogos && (\n              <th className=\"text-muted w-1 p-0 text-center\">Logo</th>\n            )}\n            <th className=\"text-muted\">Account Address</th>\n            <th className=\"text-muted\">Mint Address</th>\n            <th className=\"text-muted\">Balance</th>\n          </tr>\n        </thead>\n        <tbody className=\"list\">{detailsList}</tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction HoldingsSummaryTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const { cluster } = useCluster();\n  const mappedTokens = new Map<string, number>();\n  for (const { info: token } of tokens) {\n    const mintAddress = token.mint.toBase58();\n    const totalByMint = mappedTokens.get(mintAddress);\n\n    let amount = token.tokenAmount.uiAmount;\n    if (totalByMint !== undefined) {\n      amount += totalByMint;\n    }\n\n    mappedTokens.set(mintAddress, amount);\n  }\n\n  const detailsList: React.ReactNode[] = [];\n  const showLogos = tokens.some(\n    (t) =>\n      TokenRegistry.get(t.info.mint.toBase58(), cluster)?.icon !== undefined\n  );\n  mappedTokens.forEach((totalByMint, mintAddress) => {\n    const tokenDetails = TokenRegistry.get(mintAddress, cluster);\n    detailsList.push(\n      <tr key={mintAddress}>\n        {showLogos && (\n          <td className=\"w-1 p-0 text-center\">\n            {tokenDetails?.icon && (\n              <img\n                src={tokenDetails.icon}\n                alt=\"token icon\"\n                className=\"token-icon rounded-circle border border-4 border-gray-dark\"\n              />\n            )}\n          </td>\n        )}\n        <td>\n          <Address pubkey={new PublicKey(mintAddress)} link />\n        </td>\n        <td>\n          {totalByMint} {tokenDetails && tokenDetails.symbol}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <thead>\n          <tr>\n            {showLogos && (\n              <th className=\"text-muted w-1 p-0 text-center\">Logo</th>\n            )}\n            <th className=\"text-muted\">Mint Address</th>\n            <th className=\"text-muted\">Total Balance</th>\n          </tr>\n        </thead>\n        <tbody className=\"list\">{detailsList}</tbody>\n      </table>\n    </div>\n  );\n}\n\ntype DropdownProps = {\n  display: Display;\n  toggle: () => void;\n  show: boolean;\n};\n\nconst DisplayDropdown = ({ display, toggle, show }: DropdownProps) => {\n  const buildLocation = (location: Location, display: Display) => {\n    const params = new URLSearchParams(location.search);\n    if (display === null) {\n      params.delete(\"display\");\n    } else {\n      params.set(\"display\", display);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const DISPLAY_OPTIONS: Display[] = [null, \"detail\"];\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {display === \"detail\" ? \"Detailed\" : \"Summary\"}\n      </button>\n      <div\n        className={`dropdown-menu-right dropdown-menu${show ? \" show\" : \"\"}`}\n      >\n        {DISPLAY_OPTIONS.map((displayOption) => {\n          return (\n            <Link\n              key={displayOption || \"null\"}\n              to={(location) => buildLocation(location, displayOption)}\n              className={`dropdown-item${\n                displayOption === display ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {displayOption === \"detail\" ? \"Detailed\" : \"Summary\"}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TransactionSignature } from \"@solana/web3.js\";\nimport { clusterPath } from \"utils/url\";\n\ntype CopyState = \"copy\" | \"copied\";\ntype Props = {\n  signature: TransactionSignature;\n  alignRight?: boolean;\n  link?: boolean;\n  truncate?: boolean;\n};\n\nexport function Signature({ signature, alignRight, link, truncate }: Props) {\n  const [state, setState] = useState<CopyState>(\"copy\");\n\n  const copyToClipboard = () => navigator.clipboard.writeText(signature);\n  const handleClick = () =>\n    copyToClipboard().then(() => {\n      setState(\"copied\");\n      setTimeout(() => setState(\"copy\"), 1000);\n    });\n\n  const copyIcon =\n    state === \"copy\" ? (\n      <span className=\"fe fe-copy\" onClick={handleClick}></span>\n    ) : (\n      <span className=\"fe fe-check-circle\"></span>\n    );\n\n  const copyButton = (\n    <span className=\"c-pointer font-size-tiny mr-2\">{copyIcon}</span>\n  );\n\n  return (\n    <div\n      className={`d-flex align-items-center ${\n        alignRight ? \"justify-content-end\" : \"\"\n      }`}\n    >\n      {copyButton}\n      <span className=\"text-monospace\">\n        {link ? (\n          <Link\n            className={truncate ? \"text-truncate signature-truncate\" : \"\"}\n            to={clusterPath(`/tx/${signature}`)}\n          >\n            {signature}\n          </Link>\n        ) : (\n          signature\n        )}\n      </span>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\n\ntype CopyState = \"copy\" | \"copied\";\ntype Props = {\n  slot: number;\n  link?: boolean;\n};\nexport function Slot({ slot, link }: Props) {\n  const [state, setState] = useState<CopyState>(\"copy\");\n\n  const copyToClipboard = () => navigator.clipboard.writeText(slot.toString());\n  const handleClick = () =>\n    copyToClipboard().then(() => {\n      setState(\"copied\");\n      setTimeout(() => setState(\"copy\"), 1000);\n    });\n\n  const copyIcon =\n    state === \"copy\" ? (\n      <span className=\"fe fe-copy\" onClick={handleClick}></span>\n    ) : (\n      <span className=\"fe fe-check-circle\"></span>\n    );\n\n  const copyButton = (\n    <span className=\"c-pointer font-size-tiny mr-2\">{copyIcon}</span>\n  );\n\n  return link ? (\n    <span className=\"text-monospace\">\n      {copyButton}\n      <Link to={clusterPath(`/block/${slot}`)}>\n        {slot.toLocaleString(\"en-US\")}\n      </Link>\n    </span>\n  ) : (\n    <span className=\"text-monospace\">{slot.toLocaleString(\"en-US\")}</span>\n  );\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { FetchStatus } from \"providers/cache\";\nimport { useAccountInfo, useAccountHistory } from \"providers/accounts\";\nimport { useFetchAccountHistory } from \"providers/accounts/history\";\nimport { Signature } from \"components/common/Signature\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { displayTimestamp } from \"utils/date\";\n\nexport function TransactionHistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const info = useAccountInfo(address);\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, true);\n  const loadMore = () => fetchAccountHistory(pubkey);\n\n  React.useEffect(() => {\n    if (!history) refresh();\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!history || info?.data === undefined) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    }\n\n    return (\n      <ErrorCard retry={refresh} text=\"Failed to fetch transaction history\" />\n    );\n  }\n\n  const transactions = history.data.fetched;\n  if (transactions.length === 0) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    }\n    return (\n      <ErrorCard\n        retry={loadMore}\n        retryText=\"Try again\"\n        text=\"No transaction history found\"\n      />\n    );\n  }\n\n  const hasTimestamps = !!transactions.find((element) => !!element.blockTime);\n  const detailsList: React.ReactNode[] = [];\n  for (var i = 0; i < transactions.length; i++) {\n    const slot = transactions[i].slot;\n    const slotTransactions = [transactions[i]];\n    while (i + 1 < transactions.length) {\n      const nextSlot = transactions[i + 1].slot;\n      if (nextSlot !== slot) break;\n      slotTransactions.push(transactions[++i]);\n    }\n\n    slotTransactions.forEach(({ signature, err, blockTime }) => {\n      let statusText;\n      let statusClass;\n      if (err) {\n        statusClass = \"warning\";\n        statusText = \"Failed\";\n      } else {\n        statusClass = \"success\";\n        statusText = \"Success\";\n      }\n\n      detailsList.push(\n        <tr key={signature}>\n          <td className=\"w-1\">\n            <Slot slot={slot} link />\n          </td>\n\n          {hasTimestamps && (\n            <td className=\"text-muted\">\n              {blockTime ? displayTimestamp(blockTime * 1000, true) : \"---\"}\n            </td>\n          )}\n\n          <td>\n            <span className={`badge badge-soft-${statusClass}`}>\n              {statusText}\n            </span>\n          </td>\n\n          <td>\n            <Signature signature={signature} link />\n          </td>\n        </tr>\n      );\n    });\n  }\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Transaction History</h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          disabled={fetching}\n          onClick={refresh}\n        >\n          {fetching ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n              Loading\n            </>\n          ) : (\n            <>\n              <span className=\"fe fe-refresh-cw mr-2\"></span>\n              Refresh\n            </>\n          )}\n        </button>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Slot</th>\n              {hasTimestamps && <th className=\"text-muted\">Timestamp</th>}\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        {history.data.foundOldest ? (\n          <div className=\"text-muted text-center\">Fetched full history</div>\n        ) : (\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={loadMore}\n            disabled={fetching}\n          >\n            {fetching ? (\n              <>\n                <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n                Loading\n              </>\n            ) : (\n              \"Load More\"\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Connection,\n  TransactionSignature,\n  ParsedConfirmedTransaction,\n  ConfirmedTransaction,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nexport interface Details {\n  transaction?: ParsedConfirmedTransaction | null;\n  raw?: ConfirmedTransaction | null;\n}\n\ntype State = Cache.State<Details>;\ntype Dispatch = Cache.Dispatch<Details>;\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype DetailsProviderProps = { children: React.ReactNode };\nexport function DetailsProvider({ children }: DetailsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Details>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchDetails(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: signature,\n    url,\n  });\n\n  let fetchStatus;\n  let transaction;\n  try {\n    transaction = await new Connection(url).getParsedConfirmedTransaction(\n      signature\n    );\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    key: signature,\n    data: { transaction },\n    url,\n  });\n}\n\nexport function useFetchTransactionDetails() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchDetails(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n\nexport function useTransactionDetails(\n  signature: TransactionSignature\n): Cache.CacheEntry<Details> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries[signature];\n}\n\nexport type TransactionDetailsCache = {\n  [key: string]: Cache.CacheEntry<Details>;\n};\nexport function useTransactionDetailsCache(): TransactionDetailsCache {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionDetailsCache must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries;\n}\n\nasync function fetchRawTransaction(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  let fetchStatus;\n  let transaction;\n  try {\n    transaction = await new Connection(url).getConfirmedTransaction(signature);\n    fetchStatus = FetchStatus.Fetched;\n    dispatch({\n      type: ActionType.Update,\n      status: fetchStatus,\n      key: signature,\n      data: {\n        raw: transaction,\n      },\n      url,\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n  }\n}\n\nexport function useFetchRawTransaction() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchRawTransaaction must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchRawTransaction(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  enums,\n  object,\n  StructType,\n  number,\n  string,\n  optional,\n  array,\n  pick,\n  nullable,\n  union,\n} from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type TokenAmountUi = StructType<typeof TokenAmountUi>;\nexport const TokenAmountUi = object({\n  amount: string(),\n  decimals: number(),\n  uiAmount: number(),\n});\n\nconst InitializeMint = pick({\n  mint: Pubkey,\n  decimals: number(),\n  mintAuthority: Pubkey,\n  rentSysvar: Pubkey,\n  freezeAuthority: optional(Pubkey),\n});\n\nconst InitializeAccount = pick({\n  account: Pubkey,\n  mint: Pubkey,\n  owner: Pubkey,\n  rentSysvar: Pubkey,\n});\n\nconst InitializeMultisig = pick({\n  multisig: Pubkey,\n  rentSysvar: Pubkey,\n  signers: array(Pubkey),\n  m: number(),\n});\n\nconst Transfer = object({\n  source: Pubkey,\n  destination: Pubkey,\n  amount: union([string(), number()]),\n  authority: optional(Pubkey),\n  multisigAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst Approve = object({\n  source: Pubkey,\n  delegate: Pubkey,\n  amount: union([string(), number()]),\n  owner: optional(Pubkey),\n  multisigOwner: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst Revoke = object({\n  source: Pubkey,\n  owner: optional(Pubkey),\n  multisigOwner: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst AuthorityType = enums([\n  \"mintTokens\",\n  \"freezeAccount\",\n  \"accountOwner\",\n  \"closeAccount\",\n]);\n\nconst SetAuthority = object({\n  mint: optional(Pubkey),\n  account: optional(Pubkey),\n  authorityType: AuthorityType,\n  newAuthority: nullable(Pubkey),\n  authority: optional(Pubkey),\n  multisigAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst MintTo = object({\n  mint: Pubkey,\n  account: Pubkey,\n  amount: union([string(), number()]),\n  mintAuthority: optional(Pubkey),\n  multisigMintAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst Burn = object({\n  account: Pubkey,\n  mint: Pubkey,\n  amount: union([string(), number()]),\n  authority: optional(Pubkey),\n  multisigAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst CloseAccount = object({\n  account: Pubkey,\n  destination: Pubkey,\n  owner: optional(Pubkey),\n  multisigOwner: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst FreezeAccount = object({\n  account: Pubkey,\n  mint: Pubkey,\n  freezeAuthority: optional(Pubkey),\n  multisigFreezeAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst ThawAccount = object({\n  account: Pubkey,\n  mint: Pubkey,\n  freezeAuthority: optional(Pubkey),\n  multisigFreezeAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n});\n\nconst TransferChecked = object({\n  source: Pubkey,\n  mint: Pubkey,\n  destination: Pubkey,\n  authority: optional(Pubkey),\n  multisigAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst ApproveChecked = object({\n  source: Pubkey,\n  mint: Pubkey,\n  delegate: Pubkey,\n  owner: optional(Pubkey),\n  multisigOwner: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst MintToChecked = object({\n  account: Pubkey,\n  mint: Pubkey,\n  mintAuthority: optional(Pubkey),\n  multisigMintAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst BurnChecked = object({\n  account: Pubkey,\n  mint: Pubkey,\n  authority: optional(Pubkey),\n  multisigAuthority: optional(Pubkey),\n  signers: optional(array(Pubkey)),\n  tokenAmount: TokenAmountUi,\n});\n\nexport type TokenInstructionType = StructType<typeof TokenInstructionType>;\nexport const TokenInstructionType = enums([\n  \"initializeMint\",\n  \"initializeAccount\",\n  \"initializeMultisig\",\n  \"transfer\",\n  \"approve\",\n  \"revoke\",\n  \"setAuthority\",\n  \"mintTo\",\n  \"burn\",\n  \"closeAccount\",\n  \"freezeAccount\",\n  \"thawAccount\",\n  \"transfer2\",\n  \"approve2\",\n  \"mintTo2\",\n  \"burn2\",\n  \"transferChecked\",\n  \"approveChecked\",\n  \"mintToChecked\",\n  \"burnChecked\",\n]);\n\nexport const IX_STRUCTS = {\n  initializeMint: InitializeMint,\n  initializeAccount: InitializeAccount,\n  initializeMultisig: InitializeMultisig,\n  transfer: Transfer,\n  approve: Approve,\n  revoke: Revoke,\n  setAuthority: SetAuthority,\n  mintTo: MintTo,\n  burn: Burn,\n  closeAccount: CloseAccount,\n  freezeAccount: FreezeAccount,\n  thawAccount: ThawAccount,\n  transfer2: TransferChecked,\n  approve2: ApproveChecked,\n  mintTo2: MintToChecked,\n  burn2: BurnChecked,\n  transferChecked: TransferChecked,\n  approveChecked: ApproveChecked,\n  mintToChecked: MintToChecked,\n  burnChecked: BurnChecked,\n};\n\nexport const IX_TITLES = {\n  initializeMint: \"Initialize Mint\",\n  initializeAccount: \"Initialize Account\",\n  initializeMultisig: \"Initialize Multisig\",\n  transfer: \"Transfer\",\n  approve: \"Approve\",\n  revoke: \"Revoke\",\n  setAuthority: \"Set Authority\",\n  mintTo: \"Mint To\",\n  burn: \"Burn\",\n  closeAccount: \"Close Account\",\n  freezeAccount: \"Freeze Account\",\n  thawAccount: \"Thaw Account\",\n  transfer2: \"Transfer (Checked)\",\n  approve2: \"Approve (Checked)\",\n  mintTo2: \"Mint To (Checked)\",\n  burn2: \"Burn (Checked)\",\n  transferChecked: \"Transfer (Checked)\",\n  approveChecked: \"Approve (Checked)\",\n  mintToChecked: \"Mint To (Checked)\",\n  burnChecked: \"Burn (Checked)\",\n};\n","import { TransactionInstruction } from \"@solana/web3.js\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\", // mainnet / testnet / devnet\n  \"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\", // mainnet - legacy\n  \"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\", // testnet - legacy\n  \"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\", // testnet - legacy\n  \"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\", // testnet - legacy\n  \"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\", // devnet - legacy\n  \"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\", // devnet - legacy\n  \"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\", // devnet - legacy\n  \"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\", // devnet - legacy\n  \"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\", // localnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Swap\",\n  1: \"Swap\",\n  2: \"Deposit All Token Types\",\n  3: \"Withdraw All Token Types\",\n  4: \"Deposit Single Token Type Exact Amount In\",\n  5: \"Withdraw Single Token Type Exact Amount Out\",\n};\n\nexport function isTokenSwapInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parseTokenSwapInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Token Swap instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","import { TransactionInstruction } from \"@solana/web3.js\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi\", // mainnet / testnet / devnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Lending Market\",\n  1: \"Initialize Reserve\",\n  2: \"Initialize Obligation\",\n  3: \"Reserve Deposit\",\n  4: \"Reserve Withdraw\",\n  5: \"Borrow\",\n  6: \"Repay Loan\",\n  7: \"Liquidate Loan\",\n  8: \"Accrue Interest\",\n};\n\nexport function isTokenLendingInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parseTokenLendingInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Token Swap instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { decodeInstruction, MARKETS } from \"@project-serum/serum\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { coerce, enums, number, optional, pick, StructType } from \"superstruct\";\nimport { BigNumValue } from \"validators/bignum\";\nimport { Pubkey } from \"validators/pubkey\";\n\nconst SERUM_PROGRAM_ID = \"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn\";\n\nexport const SERUM_DECODED_MAX = 6;\n\nexport type Side = StructType<typeof Side>;\nexport const Side = enums([\"buy\", \"sell\"]);\n\nexport type OrderType = StructType<typeof OrderType>;\nexport const OrderType = enums([\"limit\", \"ioc\", \"postOnly\"]);\n\nexport type InitializeMarket = {\n  market: PublicKey;\n  requestQueue: PublicKey;\n  eventQueue: PublicKey;\n  bids: PublicKey;\n  asks: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  baseMint: PublicKey;\n  quoteMint: PublicKey;\n  baseLotSize: BN;\n  quoteLotSize: BN;\n  feeRateBps: number;\n  vaultSignerNonce: BN;\n  quoteDustThreshold: BN;\n  programId: PublicKey;\n};\n\nexport const InitializeMarketDecode = pick({\n  baseLotSize: BigNumValue,\n  quoteLotSize: BigNumValue,\n  feeRateBps: number(),\n  quoteDustThreshold: BigNumValue,\n  vaultSignerNonce: BigNumValue,\n});\n\nexport function decodeInitializeMarket(\n  ix: TransactionInstruction\n): InitializeMarket {\n  const decoded = coerce(\n    decodeInstruction(ix.data).initializeMarket,\n    InitializeMarketDecode\n  );\n\n  let initializeMarket: InitializeMarket = {\n    market: ix.keys[0].pubkey,\n    requestQueue: ix.keys[1].pubkey,\n    eventQueue: ix.keys[2].pubkey,\n    bids: ix.keys[3].pubkey,\n    asks: ix.keys[4].pubkey,\n    baseVault: ix.keys[5].pubkey,\n    quoteVault: ix.keys[6].pubkey,\n    baseMint: ix.keys[7].pubkey,\n    quoteMint: ix.keys[8].pubkey,\n    programId: ix.programId,\n    baseLotSize: decoded.baseLotSize as BN,\n    quoteLotSize: decoded.quoteLotSize as BN,\n    feeRateBps: decoded.feeRateBps,\n    quoteDustThreshold: decoded.quoteDustThreshold as BN,\n    vaultSignerNonce: decoded.vaultSignerNonce as BN,\n  };\n\n  return initializeMarket;\n}\n\nexport type NewOrder = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  requestQueue: PublicKey;\n  payer: PublicKey;\n  owner: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  programId: PublicKey;\n  feeDiscountPubkey?: PublicKey;\n  side: Side;\n  limitPrice: BN;\n  maxQuantity: BN;\n  orderType: OrderType;\n  clientId: BN;\n};\n\nexport const NewOrderDecode = pick({\n  side: Side,\n  limitPrice: BigNumValue,\n  maxQuantity: BigNumValue,\n  orderType: OrderType,\n  clientId: BigNumValue,\n  feeDiscountPubkey: optional(Pubkey),\n});\n\nexport function decodeNewOrder(ix: TransactionInstruction): NewOrder {\n  const decoded = coerce(decodeInstruction(ix.data).newOrder, NewOrderDecode);\n\n  let newOrder: NewOrder = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    requestQueue: ix.keys[2].pubkey,\n    payer: ix.keys[3].pubkey,\n    owner: ix.keys[4].pubkey,\n    baseVault: ix.keys[5].pubkey,\n    quoteVault: ix.keys[6].pubkey,\n    programId: ix.programId,\n    side: decoded.side as Side,\n    limitPrice: decoded.limitPrice as BN,\n    maxQuantity: decoded.maxQuantity as BN,\n    orderType: decoded.orderType as OrderType,\n    clientId: decoded.clientId as BN,\n  };\n\n  if (decoded.feeDiscountPubkey) {\n    newOrder.feeDiscountPubkey = decoded.feeDiscountPubkey;\n  }\n\n  return newOrder;\n}\n\nexport type MatchOrders = {\n  market: PublicKey;\n  requestQueue: PublicKey;\n  eventQueue: PublicKey;\n  bids: PublicKey;\n  asks: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  limit: number;\n  programId: PublicKey;\n};\n\nexport const MatchOrdersDecode = pick({\n  limit: number(),\n});\n\nexport function decodeMatchOrders(ix: TransactionInstruction): MatchOrders {\n  const decoded = coerce(\n    decodeInstruction(ix.data).matchOrders,\n    MatchOrdersDecode\n  );\n\n  const matchOrders: MatchOrders = {\n    market: ix.keys[0].pubkey,\n    requestQueue: ix.keys[1].pubkey,\n    eventQueue: ix.keys[2].pubkey,\n    bids: ix.keys[3].pubkey,\n    asks: ix.keys[4].pubkey,\n    baseVault: ix.keys[5].pubkey,\n    quoteVault: ix.keys[6].pubkey,\n    programId: ix.programId,\n    limit: decoded.limit,\n  };\n\n  return matchOrders;\n}\n\nexport type ConsumeEvents = {\n  market: PublicKey;\n  eventQueue: PublicKey;\n  openOrdersAccounts: PublicKey[];\n  limit: number;\n  programId: PublicKey;\n};\n\nexport const ConsumeEventsDecode = pick({\n  limit: number(),\n});\n\nexport function decodeConsumeEvents(ix: TransactionInstruction): ConsumeEvents {\n  const decoded = coerce(\n    decodeInstruction(ix.data).consumeEvents,\n    ConsumeEventsDecode\n  );\n\n  const consumeEvents: ConsumeEvents = {\n    openOrdersAccounts: ix.keys.slice(0, -2).map((k) => k.pubkey),\n    market: ix.keys[ix.keys.length - 3].pubkey,\n    eventQueue: ix.keys[ix.keys.length - 2].pubkey,\n    programId: ix.programId,\n    limit: decoded.limit,\n  };\n\n  return consumeEvents;\n}\n\nexport type CancelOrder = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  owner: PublicKey;\n  requestQueue: PublicKey;\n  side: \"buy\" | \"sell\";\n  orderId: BN;\n  openOrdersSlot: number;\n  programId: PublicKey;\n};\n\nexport const CancelOrderDecode = pick({\n  side: Side,\n  orderId: BigNumValue,\n  openOrdersSlot: number(),\n});\n\nexport function decodeCancelOrder(ix: TransactionInstruction): CancelOrder {\n  const decoded = coerce(\n    decodeInstruction(ix.data).cancelOrder,\n    CancelOrderDecode\n  );\n\n  const cancelOrder: CancelOrder = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    requestQueue: ix.keys[2].pubkey,\n    owner: ix.keys[3].pubkey,\n    programId: ix.programId,\n    openOrdersSlot: decoded.openOrdersSlot,\n    orderId: decoded.orderId as BN,\n    side: decoded.side,\n  };\n\n  return cancelOrder;\n}\n\nexport type CancelOrderByClientId = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  owner: PublicKey;\n  requestQueue: PublicKey;\n  clientId: BN;\n  programId: PublicKey;\n};\n\nexport const CancelOrderByClientIdDecode = pick({\n  clientId: BigNumValue,\n});\n\nexport function decodeCancelOrderByClientId(\n  ix: TransactionInstruction\n): CancelOrderByClientId {\n  const decoded = coerce(\n    decodeInstruction(ix.data).cancelOrderByClientId,\n    CancelOrderByClientIdDecode\n  );\n\n  const cancelOrderByClientId: CancelOrderByClientId = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    requestQueue: ix.keys[2].pubkey,\n    owner: ix.keys[3].pubkey,\n    programId: ix.programId,\n    clientId: decoded.clientId as BN,\n  };\n\n  return cancelOrderByClientId;\n}\n\nexport type SettleFunds = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  owner: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  baseWallet: PublicKey;\n  quoteWallet: PublicKey;\n  vaultSigner: PublicKey;\n  programId: PublicKey;\n  referrerQuoteWallet?: PublicKey;\n};\n\nexport function decodeSettleFunds(ix: TransactionInstruction): SettleFunds {\n  let settleFunds: SettleFunds = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    owner: ix.keys[2].pubkey,\n    baseVault: ix.keys[3].pubkey,\n    quoteVault: ix.keys[4].pubkey,\n    baseWallet: ix.keys[5].pubkey,\n    quoteWallet: ix.keys[6].pubkey,\n    vaultSigner: ix.keys[7].pubkey,\n    programId: ix.programId,\n  };\n\n  if (ix.keys.length > 9) {\n    settleFunds.referrerQuoteWallet = ix.keys[9].pubkey;\n  }\n\n  return settleFunds;\n}\n\nexport function isSerumInstruction(instruction: TransactionInstruction) {\n  return (\n    instruction.programId.toBase58() === SERUM_PROGRAM_ID ||\n    MARKETS.some(\n      (market) =>\n        market.programId && market.programId.equals(instruction.programId)\n    )\n  );\n}\n\nexport function parseSerumInstructionKey(\n  instruction: TransactionInstruction\n): string {\n  const decoded = decodeInstruction(instruction.data);\n  const keys = Object.keys(decoded);\n\n  if (keys.length < 1) {\n    throw new Error(\"Serum instruction key not decoded\");\n  }\n\n  return keys[0];\n}\n\nconst SERUM_CODE_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Market\",\n  1: \"New Order\",\n  2: \"Match Orders\",\n  3: \"Consume Events\",\n  4: \"Cancel Order\",\n  5: \"Settle Funds\",\n  6: \"Cancel Order By Client Id\",\n  7: \"Disable Market\",\n  8: \"Sweep Fees\",\n  9: \"New Order\",\n};\n\nexport function parseSerumInstructionCode(instruction: TransactionInstruction) {\n  return instruction.data.slice(1, 5).readUInt32LE(0);\n}\n\nexport function parseSerumInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = parseSerumInstructionCode(instruction);\n\n  if (!(code in SERUM_CODE_LOOKUP)) {\n    throw new Error(`Unrecognized Serum instruction code: ${code}`);\n  }\n\n  return SERUM_CODE_LOOKUP[code];\n}\n","import React from \"react\";\nimport {\n  TransactionSignature,\n  Connection,\n  SignatureResult,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { DetailsProvider } from \"./details\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\nexport { useTransactionDetails } from \"./details\";\n\nexport type Confirmations = number | \"max\";\n\nexport type Timestamp = number | \"unavailable\";\n\nexport interface TransactionStatusInfo {\n  slot: number;\n  result: SignatureResult;\n  timestamp: Timestamp;\n  confirmations: Confirmations;\n}\n\nexport interface TransactionStatus {\n  signature: TransactionSignature;\n  info: TransactionStatusInfo | null;\n}\n\ntype State = Cache.State<TransactionStatus>;\ntype Dispatch = Cache.Dispatch<TransactionStatus>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype TransactionsProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<TransactionStatus>(url);\n\n  // Clear accounts cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <DetailsProvider>{children}</DetailsProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport async function fetchTransactionStatus(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: signature,\n    status: FetchStatus.Fetching,\n    url,\n  });\n\n  let fetchStatus;\n  let data;\n  try {\n    const connection = new Connection(url);\n    const { value } = await connection.getSignatureStatus(signature, {\n      searchTransactionHistory: true,\n    });\n\n    let info = null;\n    if (value !== null) {\n      let confirmations: Confirmations;\n      if (typeof value.confirmations === \"number\") {\n        confirmations = value.confirmations;\n      } else {\n        confirmations = \"max\";\n      }\n\n      let blockTime = null;\n      try {\n        blockTime = await connection.getBlockTime(value.slot);\n      } catch (error) {\n        if (cluster === Cluster.MainnetBeta && confirmations === \"max\") {\n          reportError(error, { slot: `${value.slot}` });\n        }\n      }\n      let timestamp: Timestamp = blockTime !== null ? blockTime : \"unavailable\";\n\n      info = {\n        slot: value.slot,\n        timestamp,\n        confirmations,\n        result: { err: value.err },\n      };\n    }\n    data = { signature, info };\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    key: signature,\n    status: fetchStatus,\n    data,\n    url,\n  });\n}\n\nexport function useTransactions() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n  return context;\n}\n\nexport function useTransactionStatus(\n  signature: TransactionSignature | undefined\n): Cache.CacheEntry<TransactionStatus> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionStatus must be used within a TransactionsProvider`\n    );\n  }\n\n  if (signature === undefined) {\n    return undefined;\n  }\n\n  return context.entries[signature];\n}\n\nexport function useFetchTransactionStatus() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTransactionStatus must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      fetchTransactionStatus(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { wrap } from \"utils\";\n\nexport function RawDetails({ ix }: { ix: TransactionInstruction }) {\n  const data = wrap(ix.data.toString(\"hex\"), 50);\n  return (\n    <>\n      {ix.keys.map(({ pubkey, isSigner, isWritable }, keyIndex) => (\n        <tr key={keyIndex}>\n          <td>\n            <div className=\"mr-2 d-md-inline\">Account #{keyIndex + 1}</div>\n            {!isWritable && (\n              <span className=\"badge badge-soft-info mr-1\">Readonly</span>\n            )}\n            {isSigner && (\n              <span className=\"badge badge-soft-info mr-1\">Signer</span>\n            )}\n          </td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={pubkey} alignRight link />\n          </td>\n        </tr>\n      ))}\n\n      <tr>\n        <td>Instruction Data (Hex)</td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left mb-0\">{data}</pre>\n        </td>\n      </tr>\n    </>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction } from \"@solana/web3.js\";\n\nexport function RawParsedDetails({\n  ix,\n  children,\n}: {\n  ix: ParsedInstruction;\n  children?: React.ReactNode;\n}) {\n  return (\n    <>\n      {children}\n\n      <tr>\n        <td>Instruction Data (JSON)</td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left\">\n            {JSON.stringify(ix.parsed, null, 2)}\n          </pre>\n        </td>\n      </tr>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport {\n  TransactionInstruction,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { RawDetails } from \"./RawDetails\";\nimport { RawParsedDetails } from \"./RawParsedDetails\";\nimport { SignatureContext } from \"../../pages/TransactionDetailsPage\";\nimport {\n  useTransactionDetails,\n  useFetchRawTransaction,\n} from \"providers/transactions/details\";\nimport { Address } from \"components/common/Address\";\n\ntype InstructionProps = {\n  title: string;\n  children?: React.ReactNode;\n  result: SignatureResult;\n  index: number;\n  ix: TransactionInstruction | ParsedInstruction;\n  defaultRaw?: boolean;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function InstructionCard({\n  title,\n  children,\n  result,\n  index,\n  ix,\n  defaultRaw,\n  innerCards,\n  childIndex,\n}: InstructionProps) {\n  const [resultClass] = ixResult(result, index);\n  const [showRaw, setShowRaw] = React.useState(defaultRaw || false);\n  const signature = useContext(SignatureContext);\n  const details = useTransactionDetails(signature);\n  let raw: TransactionInstruction | undefined = undefined;\n  if (details && childIndex === undefined) {\n    raw = details?.data?.raw?.transaction.instructions[index];\n  }\n  const fetchRaw = useFetchRawTransaction();\n  const fetchRawTrigger = () => fetchRaw(signature);\n\n  const rawClickHandler = () => {\n    if (!defaultRaw && !showRaw && !raw) {\n      fetchRawTrigger();\n    }\n\n    return setShowRaw((r) => !r);\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          <span className={`badge badge-soft-${resultClass} mr-2`}>\n            #{index + 1}\n            {childIndex !== undefined ? `.${childIndex + 1}` : \"\"}\n          </span>\n          {title}\n        </h3>\n\n        <button\n          disabled={defaultRaw}\n          className={`btn btn-sm d-flex ${\n            showRaw ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={rawClickHandler}\n        >\n          <span className=\"fe fe-code mr-1\"></span>\n          Raw\n        </button>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <tbody className=\"list\">\n            {showRaw ? (\n              <>\n                <tr>\n                  <td>Program</td>\n                  <td className=\"text-lg-right\">\n                    <Address pubkey={ix.programId} alignRight link />\n                  </td>\n                </tr>\n                {\"parsed\" in ix ? (\n                  <RawParsedDetails ix={ix}>\n                    {raw ? <RawDetails ix={raw} /> : null}\n                  </RawParsedDetails>\n                ) : (\n                  <RawDetails ix={ix} />\n                )}\n              </>\n            ) : (\n              children\n            )}\n            {innerCards && innerCards.length > 0 && (\n              <tr>\n                <td colSpan={2}>\n                  Inner Instructions\n                  <div className=\"inner-cards\">{innerCards}</div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction ixResult(result: SignatureResult, index: number) {\n  if (result.err) {\n    const err = result.err as any;\n    const ixError = err[\"InstructionError\"];\n    if (ixError && Array.isArray(ixError)) {\n      const [errorIndex, error] = ixError;\n      if (Number.isInteger(errorIndex) && errorIndex === index) {\n        return [\"warning\", `Error: ${JSON.stringify(error)}`];\n      }\n    }\n    return [\"dark\"];\n  }\n  return [\"success\"];\n}\n","import React from \"react\";\nimport {\n  TransactionInstruction,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\n\nexport function UnknownDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction | ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Unknown\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { TransferInfo } from \"./types\";\n\nexport function TransferDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: TransferInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Transfer\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AllocateInfo } from \"./types\";\n\nexport function AllocateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AllocateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Allocate Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React, { useState, ReactNode } from \"react\";\n\ntype CopyableProps = {\n  text: string;\n  children: ReactNode;\n  bottom?: boolean;\n  right?: boolean;\n};\n\ntype State = \"hide\" | \"copy\" | \"copied\";\n\nfunction Popover({\n  state,\n  bottom,\n  right,\n}: {\n  state: State;\n  bottom?: boolean;\n  right?: boolean;\n}) {\n  if (state === \"hide\") return null;\n  const text = state === \"copy\" ? \"Copy\" : \"Copied!\";\n  return (\n    <div\n      className={`popover bs-popover-${bottom ? \"bottom\" : \"top\"}${\n        right ? \" right\" : \"\"\n      } show`}\n    >\n      <div className={`arrow${right ? \" right\" : \"\"}`} />\n      <div className=\"popover-body\">{text}</div>\n    </div>\n  );\n}\n\nexport function Copyable({ bottom, right, text, children }: CopyableProps) {\n  const [state, setState] = useState<State>(\"hide\");\n\n  const copyToClipboard = () => navigator.clipboard.writeText(text);\n  const handleClick = () =>\n    copyToClipboard().then(() => {\n      setState(\"copied\");\n      setTimeout(() => setState(\"hide\"), 1000);\n    });\n\n  return (\n    <div\n      className=\"popover-container c-pointer\"\n      onClick={handleClick}\n      onMouseOver={() => setState(\"copy\")}\n      onMouseOut={() => state === \"copy\" && setState(\"hide\")}\n    >\n      {children}\n      <Popover bottom={bottom} right={right} state={state} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { AllocateWithSeedInfo } from \"./types\";\n\nexport function AllocateWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AllocateWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Allocate Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable right text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AssignInfo } from \"./types\";\n\nexport function AssignDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AssignInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Assign Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { AssignWithSeedInfo } from \"./types\";\n\nexport function AssignWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AssignWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Assign Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable right text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateAccountInfo } from \"./types\";\n\nexport function CreateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateAccountInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Create Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { CreateAccountWithSeedInfo } from \"./types\";\n\nexport function CreateWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateAccountWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Create Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable right text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeNonceInfo } from \"./types\";\n\nexport function NonceInitializeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Initialize Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AdvanceNonceInfo } from \"./types\";\n\nexport function NonceAdvanceDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AdvanceNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Advance Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { WithdrawNonceInfo } from \"./types\";\n\nexport function NonceWithdrawDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: WithdrawNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Withdraw Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AuthorizeNonceInfo } from \"./types\";\n\nexport function NonceAuthorizeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AuthorizeNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Authorize Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Old Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAuthorized} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { TransferWithSeedInfo } from \"./types\";\n\nexport function TransferWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: TransferWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Transfer w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Destination Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sourceBase} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable right text={info.sourceSeed}>\n            <code>{info.sourceSeed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sourceOwner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, pick, string, StructType } from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type CreateAccountInfo = StructType<typeof CreateAccountInfo>;\nexport const CreateAccountInfo = pick({\n  source: Pubkey,\n  newAccount: Pubkey,\n  lamports: number(),\n  space: number(),\n  owner: Pubkey,\n});\n\nexport type AssignInfo = StructType<typeof AssignInfo>;\nexport const AssignInfo = pick({\n  account: Pubkey,\n  owner: Pubkey,\n});\n\nexport type TransferInfo = StructType<typeof TransferInfo>;\nexport const TransferInfo = pick({\n  source: Pubkey,\n  destination: Pubkey,\n  lamports: number(),\n});\n\nexport type CreateAccountWithSeedInfo = StructType<\n  typeof CreateAccountWithSeedInfo\n>;\nexport const CreateAccountWithSeedInfo = pick({\n  source: Pubkey,\n  newAccount: Pubkey,\n  base: Pubkey,\n  seed: string(),\n  lamports: number(),\n  space: number(),\n  owner: Pubkey,\n});\n\nexport type AdvanceNonceInfo = StructType<typeof AdvanceNonceInfo>;\nexport const AdvanceNonceInfo = pick({\n  nonceAccount: Pubkey,\n  nonceAuthority: Pubkey,\n});\n\nexport type WithdrawNonceInfo = StructType<typeof WithdrawNonceInfo>;\nexport const WithdrawNonceInfo = pick({\n  nonceAccount: Pubkey,\n  destination: Pubkey,\n  nonceAuthority: Pubkey,\n  lamports: number(),\n});\n\nexport type InitializeNonceInfo = StructType<typeof InitializeNonceInfo>;\nexport const InitializeNonceInfo = pick({\n  nonceAccount: Pubkey,\n  nonceAuthority: Pubkey,\n});\n\nexport type AuthorizeNonceInfo = StructType<typeof AuthorizeNonceInfo>;\nexport const AuthorizeNonceInfo = pick({\n  nonceAccount: Pubkey,\n  nonceAuthority: Pubkey,\n  newAuthorized: Pubkey,\n});\n\nexport type AllocateInfo = StructType<typeof AllocateInfo>;\nexport const AllocateInfo = pick({\n  account: Pubkey,\n  space: number(),\n});\n\nexport type AllocateWithSeedInfo = StructType<typeof AllocateWithSeedInfo>;\nexport const AllocateWithSeedInfo = pick({\n  account: Pubkey,\n  base: Pubkey,\n  seed: string(),\n  space: number(),\n  owner: Pubkey,\n});\n\nexport type AssignWithSeedInfo = StructType<typeof AssignWithSeedInfo>;\nexport const AssignWithSeedInfo = pick({\n  account: Pubkey,\n  base: Pubkey,\n  seed: string(),\n  owner: Pubkey,\n});\n\nexport type TransferWithSeedInfo = StructType<typeof TransferWithSeedInfo>;\nexport const TransferWithSeedInfo = pick({\n  source: Pubkey,\n  sourceBase: Pubkey,\n  destination: Pubkey,\n  lamports: number(),\n  sourceSeed: string(),\n  sourceOwner: Pubkey,\n});\n\nexport type SystemInstructionType = StructType<typeof SystemInstructionType>;\nexport const SystemInstructionType = enums([\n  \"createAccount\",\n  \"createAccountWithSeed\",\n  \"allocate\",\n  \"allocateWithSeed\",\n  \"assign\",\n  \"assignWithSeed\",\n  \"transfer\",\n  \"advanceNonce\",\n  \"withdrawNonce\",\n  \"authorizeNonce\",\n  \"initializeNonce\",\n  \"transferWithSeed\",\n]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedInstruction,\n  ParsedTransaction,\n} from \"@solana/web3.js\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { TransferDetailsCard } from \"./TransferDetailsCard\";\nimport { AllocateDetailsCard } from \"./AllocateDetailsCard\";\nimport { AllocateWithSeedDetailsCard } from \"./AllocateWithSeedDetailsCard\";\nimport { AssignDetailsCard } from \"./AssignDetailsCard\";\nimport { AssignWithSeedDetailsCard } from \"./AssignWithSeedDetailsCard\";\nimport { CreateDetailsCard } from \"./CreateDetailsCard\";\nimport { CreateWithSeedDetailsCard } from \"./CreateWithSeedDetailsCard\";\nimport { NonceInitializeDetailsCard } from \"./NonceInitializeDetailsCard\";\nimport { NonceAdvanceDetailsCard } from \"./NonceAdvanceDetailsCard\";\nimport { NonceWithdrawDetailsCard } from \"./NonceWithdrawDetailsCard\";\nimport { NonceAuthorizeDetailsCard } from \"./NonceAuthorizeDetailsCard\";\nimport { TransferWithSeedDetailsCard } from \"./TransferWithSeedDetailsCard\";\nimport { ParsedInfo } from \"validators\";\nimport { coerce } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  CreateAccountInfo,\n  CreateAccountWithSeedInfo,\n  AllocateInfo,\n  AllocateWithSeedInfo,\n  AssignInfo,\n  AssignWithSeedInfo,\n  TransferInfo,\n  AdvanceNonceInfo,\n  AuthorizeNonceInfo,\n  InitializeNonceInfo,\n  WithdrawNonceInfo,\n  TransferWithSeedInfo,\n} from \"./types\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function SystemDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = coerce(props.ix.parsed, ParsedInfo);\n    switch (parsed.type) {\n      case \"createAccount\": {\n        const info = coerce(parsed.info, CreateAccountInfo);\n        return <CreateDetailsCard info={info} {...props} />;\n      }\n      case \"createAccountWithSeed\": {\n        const info = coerce(parsed.info, CreateAccountWithSeedInfo);\n        return <CreateWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"allocate\": {\n        const info = coerce(parsed.info, AllocateInfo);\n        return <AllocateDetailsCard info={info} {...props} />;\n      }\n      case \"allocateWithSeed\": {\n        const info = coerce(parsed.info, AllocateWithSeedInfo);\n        return <AllocateWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"assign\": {\n        const info = coerce(parsed.info, AssignInfo);\n        return <AssignDetailsCard info={info} {...props} />;\n      }\n      case \"assignWithSeed\": {\n        const info = coerce(parsed.info, AssignWithSeedInfo);\n        return <AssignWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"transfer\": {\n        const info = coerce(parsed.info, TransferInfo);\n        return <TransferDetailsCard info={info} {...props} />;\n      }\n      case \"advanceNonce\": {\n        const info = coerce(parsed.info, AdvanceNonceInfo);\n        return <NonceAdvanceDetailsCard info={info} {...props} />;\n      }\n      case \"withdrawNonce\": {\n        const info = coerce(parsed.info, WithdrawNonceInfo);\n        return <NonceWithdrawDetailsCard info={info} {...props} />;\n      }\n      case \"authorizeNonce\": {\n        const info = coerce(parsed.info, AuthorizeNonceInfo);\n        return <NonceAuthorizeDetailsCard info={info} {...props} />;\n      }\n      case \"initializeNonce\": {\n        const info = coerce(parsed.info, InitializeNonceInfo);\n        return <NonceInitializeDetailsCard info={info} {...props} />;\n      }\n      case \"transferWithSeed\": {\n        const info = coerce(parsed.info, TransferWithSeedInfo);\n        return <TransferWithSeedDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  SystemProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeInfo } from \"./types\";\n\nexport function InitializeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Initialize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.authorized.staker} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.authorized.withdrawer} alignRight link />\n        </td>\n      </tr>\n\n      {info.lockup.epoch > 0 && (\n        <tr>\n          <td>Lockup Expiry Epoch</td>\n          <td className=\"text-lg-right\">{info.lockup.epoch}</td>\n        </tr>\n      )}\n\n      {info.lockup.unixTimestamp > 0 && (\n        <tr>\n          <td>Lockup Expiry Timestamp</td>\n          <td className=\"text-lg-right\">\n            {new Date(info.lockup.unixTimestamp * 1000).toUTCString()}\n          </td>\n        </tr>\n      )}\n\n      {!info.lockup.custodian.equals(SystemProgram.programId) && (\n        <tr>\n          <td>Lockup Custodian Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.lockup.custodian} alignRight link />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DelegateInfo } from \"./types\";\n\nexport function DelegateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DelegateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Delegate Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Delegated Vote Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.voteAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AuthorizeInfo } from \"./types\";\n\nexport function AuthorizeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AuthorizeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Authorize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Old Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.authority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Type</td>\n        <td className=\"text-lg-right\">{info.authorityType}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SplitInfo } from \"./types\";\n\nexport function SplitDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SplitInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Split Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newSplitAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Split Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { WithdrawInfo } from \"./types\";\n\nexport function WithdrawDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: WithdrawInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Withdraw Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.withdrawAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Amount (SOL)</td>\n        <td className=\"text-lg-right\">{lamportsToSolString(info.lamports)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DeactivateInfo } from \"./types\";\n\nexport function DeactivateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DeactivateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Deactivate Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, pick, string, StructType } from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type InitializeInfo = StructType<typeof InitializeInfo>;\nexport const InitializeInfo = pick({\n  stakeAccount: Pubkey,\n  authorized: pick({\n    staker: Pubkey,\n    withdrawer: Pubkey,\n  }),\n  lockup: pick({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: Pubkey,\n  }),\n});\n\nexport type DelegateInfo = StructType<typeof DelegateInfo>;\nexport const DelegateInfo = pick({\n  stakeAccount: Pubkey,\n  voteAccount: Pubkey,\n  stakeAuthority: Pubkey,\n});\n\nexport type AuthorizeInfo = StructType<typeof AuthorizeInfo>;\nexport const AuthorizeInfo = pick({\n  authorityType: string(),\n  stakeAccount: Pubkey,\n  authority: Pubkey,\n  newAuthority: Pubkey,\n});\n\nexport type SplitInfo = StructType<typeof SplitInfo>;\nexport const SplitInfo = pick({\n  stakeAccount: Pubkey,\n  stakeAuthority: Pubkey,\n  newSplitAccount: Pubkey,\n  lamports: number(),\n});\n\nexport type WithdrawInfo = StructType<typeof WithdrawInfo>;\nexport const WithdrawInfo = pick({\n  stakeAccount: Pubkey,\n  withdrawAuthority: Pubkey,\n  destination: Pubkey,\n  lamports: number(),\n});\n\nexport type DeactivateInfo = StructType<typeof DeactivateInfo>;\nexport const DeactivateInfo = pick({\n  stakeAccount: Pubkey,\n  stakeAuthority: Pubkey,\n});\n\nexport type MergeInfo = StructType<typeof MergeInfo>;\nexport const MergeInfo = pick({\n  source: Pubkey,\n  destination: Pubkey,\n  stakeAuthority: Pubkey,\n  stakeHistorySysvar: Pubkey,\n  clockSysvar: Pubkey,\n});\n\nexport type StakeInstructionType = StructType<typeof StakeInstructionType>;\nexport const StakeInstructionType = enums([\n  \"initialize\",\n  \"delegate\",\n  \"authorize\",\n  \"split\",\n  \"withdraw\",\n  \"deactivate\",\n  \"merge\",\n]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { MergeInfo } from \"./types\";\n\nexport function MergeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: MergeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Merge\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Source</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Destination</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Clock Sysvar</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.clockSysvar} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake History Sysvar</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeHistorySysvar} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedTransaction,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InitializeDetailsCard } from \"./InitializeDetailsCard\";\nimport { DelegateDetailsCard } from \"./DelegateDetailsCard\";\nimport { AuthorizeDetailsCard } from \"./AuthorizeDetailsCard\";\nimport { SplitDetailsCard } from \"./SplitDetailsCard\";\nimport { WithdrawDetailsCard } from \"./WithdrawDetailsCard\";\nimport { DeactivateDetailsCard } from \"./DeactivateDetailsCard\";\nimport { ParsedInfo } from \"validators\";\nimport { reportError } from \"utils/sentry\";\nimport { coerce } from \"superstruct\";\nimport {\n  AuthorizeInfo,\n  DeactivateInfo,\n  DelegateInfo,\n  InitializeInfo,\n  MergeInfo,\n  SplitInfo,\n  WithdrawInfo,\n} from \"./types\";\nimport { MergeDetailsCard } from \"./MergeDetailsCard\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function StakeDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = coerce(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"initialize\": {\n        const info = coerce(parsed.info, InitializeInfo);\n        return <InitializeDetailsCard info={info} {...props} />;\n      }\n      case \"delegate\": {\n        const info = coerce(parsed.info, DelegateInfo);\n        return <DelegateDetailsCard info={info} {...props} />;\n      }\n      case \"authorize\": {\n        const info = coerce(parsed.info, AuthorizeInfo);\n        return <AuthorizeDetailsCard info={info} {...props} />;\n      }\n      case \"split\": {\n        const info = coerce(parsed.info, SplitInfo);\n        return <SplitDetailsCard info={info} {...props} />;\n      }\n      case \"withdraw\": {\n        const info = coerce(parsed.info, WithdrawInfo);\n        return <WithdrawDetailsCard info={info} {...props} />;\n      }\n      case \"deactivate\": {\n        const info = coerce(parsed.info, DeactivateInfo);\n        return <DeactivateDetailsCard info={info} {...props} />;\n      }\n      case \"merge\": {\n        const info = coerce(parsed.info, MergeInfo);\n        return <MergeDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, pick, string, StructType } from \"superstruct\";\nimport { Pubkey } from \"validators/pubkey\";\n\nexport type WriteInfo = StructType<typeof WriteInfo>;\nexport const WriteInfo = pick({\n  account: Pubkey,\n  bytes: string(),\n  offset: number(),\n});\n\nexport type FinalizeInfo = StructType<typeof FinalizeInfo>;\nexport const FinalizeInfo = pick({\n  account: Pubkey,\n});\n\nexport type BpfLoaderInstructionType = StructType<\n  typeof BpfLoaderInstructionType\n>;\nexport const BpfLoaderInstructionType = enums([\"write\", \"finalize\"]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedInstruction,\n  ParsedTransaction,\n  BPF_LOADER_PROGRAM_ID,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { coerce } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { WriteInfo, FinalizeInfo } from \"./types\";\nimport { reportError } from \"utils/sentry\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { Address } from \"components/common/Address\";\nimport { wrap } from \"utils\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfLoaderDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = coerce(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"write\": {\n        const info = coerce(parsed.info, WriteInfo);\n        return <BpfLoaderWriteDetailsCard info={info} {...props} />;\n      }\n      case \"finalize\": {\n        const info = coerce(parsed.info, FinalizeInfo);\n        return <BpfLoaderFinalizeDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\ntype Props<T> = {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: T;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfLoaderWriteDetailsCard(props: Props<WriteInfo>) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const bytes = wrap(info.bytes, 50);\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"BPF Loader 2: Write\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={BPF_LOADER_PROGRAM_ID} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>\n          Bytes <span className=\"text-muted\">(base 64)</span>\n        </td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left mb-0\">{bytes}</pre>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Offset</td>\n        <td className=\"text-lg-right\">{info.offset}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n\nexport function BpfLoaderFinalizeDetailsCard(props: Props<FinalizeInfo>) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"BPF Loader 2: Finalize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={BPF_LOADER_PROGRAM_ID} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React, { useState, ReactNode } from \"react\";\n\ntype Props = {\n  text: string;\n  children: ReactNode;\n  bottom?: boolean;\n  right?: boolean;\n};\n\ntype State = \"hide\" | \"show\";\n\nfunction Popover({\n  state,\n  bottom,\n  right,\n  text,\n}: {\n  state: State;\n  bottom?: boolean;\n  right?: boolean;\n  text: string;\n}) {\n  if (state === \"hide\") return null;\n  return (\n    <div\n      className={`popover bs-popover-${bottom ? \"bottom\" : \"top\"}${\n        right ? \" right\" : \"\"\n      } show`}\n    >\n      <div className={`arrow${right ? \" right\" : \"\"}`} />\n      <div className=\"popover-body\">{text}</div>\n    </div>\n  );\n}\n\nexport function InfoTooltip({ bottom, right, text, children }: Props) {\n  const [state, setState] = useState<State>(\"hide\");\n\n  const justify = right ? \"end\" : \"start\";\n  return (\n    <div\n      className=\"popover-container w-100\"\n      onMouseOver={() => setState(\"show\")}\n      onMouseOut={() => setState(\"hide\")}\n    >\n      <div className={`d-flex align-items-center justify-content-${justify}`}>\n        {children}\n        <span className=\"fe fe-help-circle ml-2\"></span>\n      </div>\n      <Popover bottom={bottom} right={right} state={state} text={text} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { coerce } from \"superstruct\";\nimport {\n  SignatureResult,\n  ParsedTransaction,\n  PublicKey,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport {\n  IX_STRUCTS,\n  TokenInstructionType,\n  IX_TITLES,\n  TokenAmountUi,\n} from \"./types\";\nimport { ParsedInfo } from \"validators\";\nimport {\n  useTokenAccountInfo,\n  useMintAccountInfo,\n  useFetchAccountInfo,\n} from \"providers/accounts\";\nimport { normalizeTokenAmount } from \"utils\";\nimport { reportError } from \"utils/sentry\";\nimport { useCluster } from \"providers/cluster\";\nimport { TokenRegistry } from \"tokenRegistry\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function TokenDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = coerce(props.ix.parsed, ParsedInfo);\n    const { type: rawType, info } = parsed;\n    const type = coerce(rawType, TokenInstructionType);\n    const title = `Token: ${IX_TITLES[type]}`;\n    const coerced = coerce(info, IX_STRUCTS[type] as any);\n    return <TokenInstruction title={title} info={coerced} {...props} />;\n  } catch (err) {\n    reportError(err, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\ntype InfoProps = {\n  ix: ParsedInstruction;\n  info: any;\n  result: SignatureResult;\n  index: number;\n  title: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nfunction TokenInstruction(props: InfoProps) {\n  const { mintAddress: infoMintAddress, tokenAddress } = React.useMemo(() => {\n    let mintAddress: string | undefined;\n    let tokenAddress: string | undefined;\n\n    // No sense fetching accounts if we don't need to convert an amount\n    if (!(\"amount\" in props.info)) return {};\n\n    if (\"mint\" in props.info && props.info.mint instanceof PublicKey) {\n      mintAddress = props.info.mint.toBase58();\n    } else if (\n      \"account\" in props.info &&\n      props.info.account instanceof PublicKey\n    ) {\n      tokenAddress = props.info.account.toBase58();\n    } else if (\n      \"source\" in props.info &&\n      props.info.source instanceof PublicKey\n    ) {\n      tokenAddress = props.info.source.toBase58();\n    }\n    return {\n      mintAddress,\n      tokenAddress,\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const tokenInfo = useTokenAccountInfo(tokenAddress);\n  const mintAddress = infoMintAddress || tokenInfo?.mint.toBase58();\n  const mintInfo = useMintAccountInfo(mintAddress);\n  const { cluster } = useCluster();\n  const fetchAccountInfo = useFetchAccountInfo();\n\n  React.useEffect(() => {\n    if (tokenAddress && !tokenInfo) {\n      fetchAccountInfo(new PublicKey(tokenAddress));\n    }\n  }, [fetchAccountInfo, tokenAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    if (mintAddress && !mintInfo) {\n      fetchAccountInfo(new PublicKey(mintAddress));\n    }\n  }, [fetchAccountInfo, mintAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attributes: JSX.Element[] = [];\n  let decimals = mintInfo?.decimals;\n  let tokenSymbol = \"\";\n\n  if (\"tokenAmount\" in props.info) {\n    decimals = props.info.tokenAmount.decimals;\n  }\n\n  if (mintAddress) {\n    const tokenDetails = TokenRegistry.get(mintAddress, cluster);\n\n    if (tokenDetails && \"symbol\" in tokenDetails) {\n      tokenSymbol = tokenDetails.symbol;\n    }\n\n    attributes.push(\n      <tr key={mintAddress}>\n        <td>Token</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={new PublicKey(mintAddress)} alignRight link />\n        </td>\n      </tr>\n    );\n  }\n\n  for (let key in props.info) {\n    let value = props.info[key];\n    if (value === undefined) continue;\n\n    // Flatten lists of public keys\n    if (Array.isArray(value) && value.every((v) => v instanceof PublicKey)) {\n      for (let i = 0; i < value.length; i++) {\n        let publicKey = value[i];\n        let label = `${key.charAt(0).toUpperCase() + key.slice(1)} - #${i + 1}`;\n\n        attributes.push(\n          <tr key={key + i}>\n            <td>{label}</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={publicKey} alignRight link />\n            </td>\n          </tr>\n        );\n      }\n      continue;\n    }\n\n    if (key === \"tokenAmount\") {\n      key = \"amount\";\n      value = (value as TokenAmountUi).amount;\n    }\n\n    let tag;\n    let labelSuffix = \"\";\n    if (value instanceof PublicKey) {\n      tag = <Address pubkey={value} alignRight link />;\n    } else if (key === \"amount\") {\n      let amount;\n      if (decimals === undefined) {\n        labelSuffix = \" (raw)\";\n        amount = new Intl.NumberFormat(\"en-US\").format(value);\n      } else {\n        amount = new Intl.NumberFormat(\"en-US\", {\n          minimumFractionDigits: decimals,\n          maximumFractionDigits: decimals,\n        }).format(normalizeTokenAmount(value, decimals));\n      }\n      tag = (\n        <>\n          {amount} {tokenSymbol}\n        </>\n      );\n    } else {\n      tag = <>{value}</>;\n    }\n\n    let label = key.charAt(0).toUpperCase() + key.slice(1) + labelSuffix;\n\n    attributes.push(\n      <tr key={key}>\n        <td>{label}</td>\n        <td className=\"text-lg-right\">{tag}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <InstructionCard\n      ix={props.ix}\n      index={props.index}\n      result={props.result}\n      title={props.title}\n      innerCards={props.innerCards}\n      childIndex={props.childIndex}\n    >\n      {attributes}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { NewOrder } from \"./types\";\n\nexport function NewOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: NewOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: New Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Payer</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.payer} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Order Type</td>\n        <td className=\"text-lg-right\">{info.orderType}</td>\n      </tr>\n\n      <tr>\n        <td>Limit Price</td>\n        <td className=\"text-lg-right\">{info.limitPrice.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Max Quantity</td>\n        <td className=\"text-lg-right\">{info.maxQuantity.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-right\">{info.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { MatchOrders } from \"./types\";\n\nexport function MatchOrdersDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: MatchOrders;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Match Orders\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-right\">{info.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeMarket } from \"./types\";\n\nexport function InitializeMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Initialize Market\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseMint} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteMint} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Lot Size</td>\n        <td className=\"text-lg-right\">{info.baseLotSize.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Quote Lot Size</td>\n        <td className=\"text-lg-right\">{info.quoteLotSize.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Rate Bps</td>\n        <td className=\"text-lg-right\">{info.feeRateBps}</td>\n      </tr>\n\n      <tr>\n        <td>Quote Dust Threshold</td>\n        <td className=\"text-lg-right\">\n          {info.quoteDustThreshold.toString(10)}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer Nonce</td>\n        <td className=\"text-lg-right\">{info.vaultSignerNonce.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { ConsumeEvents } from \"./types\";\n\nexport function ConsumeEventsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: ConsumeEvents;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Consume Events\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Accounts</td>\n        <td className=\"text-lg-right\">\n          {info.openOrdersAccounts.map((account, index) => {\n            return <Address pubkey={account} key={index} alignRight link />;\n          })}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-right\">{info.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrder } from \"./types\";\n\nexport function CancelOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Cancel Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Slot</td>\n        <td className=\"text-lg-right\">{info.openOrdersSlot}</td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-right\">{info.orderId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrderByClientId } from \"./types\";\n\nexport function CancelOrderByClientIdDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrderByClientId;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Cancel Order By Client Id\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-right\">{info.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SettleFunds } from \"./types\";\n\nexport function SettleFundsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SettleFunds;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Settle Funds\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Wallet</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseWallet} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Wallet</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteWallet} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.vaultSigner} alignRight link />\n        </td>\n      </tr>\n\n      {info.referrerQuoteWallet && (\n        <tr>\n          <td>Referrer Quote Wallet</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.referrerQuoteWallet} alignRight link />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  decodeCancelOrder,\n  decodeCancelOrderByClientId,\n  decodeConsumeEvents,\n  decodeInitializeMarket,\n  decodeMatchOrders,\n  decodeNewOrder,\n  decodeSettleFunds,\n  parseSerumInstructionCode,\n  parseSerumInstructionKey,\n  parseSerumInstructionTitle,\n  SERUM_DECODED_MAX,\n} from \"./serum/types\";\nimport { NewOrderDetailsCard } from \"./serum/NewOrderDetailsCard\";\nimport { MatchOrdersDetailsCard } from \"./serum/MatchOrdersDetailsCard\";\nimport { InitializeMarketDetailsCard } from \"./serum/InitializeMarketDetailsCard\";\nimport { ConsumeEventsDetailsCard } from \"./serum/ConsumeEventsDetails\";\nimport { CancelOrderDetailsCard } from \"./serum/CancelOrderDetails\";\nimport { CancelOrderByClientIdDetailsCard } from \"./serum/CancelOrderByClientIdDetails\";\nimport { SettleFundsDetailsCard } from \"./serum/SettleFundsDetailsCard\";\n\nexport function SerumDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseSerumInstructionTitle(ix);\n    const code = parseSerumInstructionCode(ix);\n\n    if (code <= SERUM_DECODED_MAX) {\n      switch (parseSerumInstructionKey(ix)) {\n        case \"initializeMarket\":\n          return (\n            <InitializeMarketDetailsCard\n              info={decodeInitializeMarket(ix)}\n              {...props}\n            />\n          );\n        case \"newOrder\":\n          return <NewOrderDetailsCard info={decodeNewOrder(ix)} {...props} />;\n        case \"matchOrders\":\n          return (\n            <MatchOrdersDetailsCard info={decodeMatchOrders(ix)} {...props} />\n          );\n        case \"consumeEvents\":\n          return (\n            <ConsumeEventsDetailsCard\n              info={decodeConsumeEvents(ix)}\n              {...props}\n            />\n          );\n        case \"cancelOrder\":\n          return (\n            <CancelOrderDetailsCard info={decodeCancelOrder(ix)} {...props} />\n          );\n        case \"cancelOrderByClientId\":\n          return (\n            <CancelOrderByClientIdDetailsCard\n              info={decodeCancelOrderByClientId(ix)}\n              {...props}\n            />\n          );\n        case \"settleFunds\":\n          return (\n            <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n          );\n      }\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Serum: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parseTokenSwapInstructionTitle } from \"./token-swap/types\";\n\nexport function TokenSwapDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseTokenSwapInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Token Swap: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parseTokenLendingInstructionTitle } from \"./token-lending/types\";\n\nexport function TokenLendingDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseTokenLendingInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Token Lending: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { wrap } from \"utils\";\n\nexport function MemoDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const data = wrap(ix.parsed, 50);\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Memo\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Data (UTF-8)</td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left mb-0\">{data}</pre>\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { BigNumber } from \"bignumber.js\";\nimport { lamportsToSolString } from \"utils\";\n\nexport function BalanceDelta({\n  delta,\n  isSol = false,\n}: {\n  delta: BigNumber;\n  isSol?: boolean;\n}) {\n  let sols;\n\n  if (isSol) {\n    sols = lamportsToSolString(delta.toNumber());\n  }\n\n  if (delta.gt(0)) {\n    return (\n      <span className=\"badge badge-soft-success\">\n        +{isSol ? sols : delta.toString()}\n      </span>\n    );\n  } else if (delta.lt(0)) {\n    return (\n      <span className=\"badge badge-soft-warning\">\n        {isSol ? <>-{sols}</> : delta.toString()}\n      </span>\n    );\n  }\n\n  return <span className=\"badge badge-soft-secondary\">0</span>;\n}\n","import React from \"react\";\nimport {\n  ParsedMessageAccount,\n  PublicKey,\n  TokenAmount,\n  TokenBalance,\n} from \"@solana/web3.js\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Address } from \"components/common/Address\";\nimport { BalanceDelta } from \"components/common/BalanceDelta\";\nimport { SignatureProps } from \"pages/TransactionDetailsPage\";\nimport { useCluster } from \"providers/cluster\";\nimport { useTransactionDetails } from \"providers/transactions\";\nimport { TokenRegistry } from \"tokenRegistry\";\n\ntype TokenBalanceRow = {\n  account: PublicKey;\n  mint: string;\n  balance: TokenAmount;\n  delta: BigNumber;\n  accountIndex: number;\n};\n\nexport function TokenBalancesCard({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n  const { cluster } = useCluster();\n\n  if (!details) {\n    return null;\n  }\n\n  const preTokenBalances = details.data?.transaction?.meta?.preTokenBalances;\n  const postTokenBalances = details.data?.transaction?.meta?.postTokenBalances;\n\n  const accountKeys =\n    details.data?.transaction?.transaction.message.accountKeys;\n\n  if (!preTokenBalances || !postTokenBalances || !accountKeys) {\n    return null;\n  }\n\n  const rows = generateTokenBalanceRows(\n    preTokenBalances,\n    postTokenBalances,\n    accountKeys\n  );\n\n  if (rows.length < 1) {\n    return null;\n  }\n\n  const accountRows = rows.map(({ account, delta, balance, mint }) => {\n    const key = account.toBase58() + mint;\n    const units = TokenRegistry.get(mint, cluster)?.symbol || \"tokens\";\n\n    return (\n      <tr key={key}>\n        <td>\n          <Address pubkey={account} link />\n        </td>\n        <td>\n          <Address pubkey={new PublicKey(mint)} link />\n        </td>\n        <td>\n          <BalanceDelta delta={delta} />\n        </td>\n        <td>\n          {balance.uiAmount} {units}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Token Balances</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Token</th>\n              <th className=\"text-muted\">Change</th>\n              <th className=\"text-muted\">Post Balance</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{accountRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction generateTokenBalanceRows(\n  preTokenBalances: TokenBalance[],\n  postTokenBalances: TokenBalance[],\n  accounts: ParsedMessageAccount[]\n): TokenBalanceRow[] {\n  let preBalanceMap: { [index: number]: TokenBalance } = {};\n\n  preTokenBalances.forEach(\n    (balance) => (preBalanceMap[balance.accountIndex] = balance)\n  );\n\n  let rows: TokenBalanceRow[] = [];\n\n  postTokenBalances.forEach(({ uiTokenAmount, accountIndex, mint }) => {\n    const preBalance = preBalanceMap[accountIndex];\n    const account = accounts[accountIndex].pubkey;\n\n    // case where mint changes\n    if (preBalance && preBalance.mint !== mint) {\n      rows.push({\n        account: accounts[accountIndex].pubkey,\n        accountIndex,\n        balance: {\n          decimals: preBalance.uiTokenAmount.decimals,\n          amount: \"0\",\n          uiAmount: 0,\n        },\n        delta: new BigNumber(-preBalance.uiTokenAmount.uiAmount),\n        mint: preBalance.mint,\n      });\n\n      rows.push({\n        account: accounts[accountIndex].pubkey,\n        accountIndex,\n        balance: uiTokenAmount,\n        delta: new BigNumber(uiTokenAmount.uiAmount),\n        mint: mint,\n      });\n      return;\n    }\n\n    let delta;\n\n    if (preBalance) {\n      delta = new BigNumber(uiTokenAmount.uiAmount).minus(\n        preBalance.uiTokenAmount.uiAmount\n      );\n    } else {\n      delta = new BigNumber(uiTokenAmount.uiAmount);\n    }\n\n    rows.push({\n      account,\n      mint,\n      balance: uiTokenAmount,\n      delta,\n      accountIndex,\n    });\n  });\n\n  return rows.sort((a, b) => a.accountIndex - b.accountIndex);\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport {\n  useFetchTransactionStatus,\n  useTransactionStatus,\n  useTransactionDetails,\n} from \"providers/transactions\";\nimport { useFetchTransactionDetails } from \"providers/transactions/details\";\nimport { useCluster, ClusterStatus, Cluster } from \"providers/cluster\";\nimport {\n  TransactionSignature,\n  SystemProgram,\n  SystemInstruction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n  SignatureResult,\n  ParsedTransaction,\n  ParsedInnerInstruction,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { lamportsToSolString } from \"utils\";\nimport { UnknownDetailsCard } from \"components/instruction/UnknownDetailsCard\";\nimport { SystemDetailsCard } from \"components/instruction/system/SystemDetailsCard\";\nimport { StakeDetailsCard } from \"components/instruction/stake/StakeDetailsCard\";\nimport { BpfLoaderDetailsCard } from \"components/instruction/bpf-loader/BpfLoaderDetailsCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { displayTimestamp } from \"utils/date\";\nimport { InfoTooltip } from \"components/common/InfoTooltip\";\nimport { Address } from \"components/common/Address\";\nimport { Signature } from \"components/common/Signature\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport { TokenDetailsCard } from \"components/instruction/token/TokenDetailsCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport { SerumDetailsCard } from \"components/instruction/SerumDetailsCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { isTokenSwapInstruction } from \"components/instruction/token-swap/types\";\nimport { isTokenLendingInstruction } from \"components/instruction/token-lending/types\";\nimport { TokenSwapDetailsCard } from \"components/instruction/TokenSwapDetailsCard\";\nimport { TokenLendingDetailsCard } from \"components/instruction/TokenLendingDetailsCard\";\nimport { isSerumInstruction } from \"components/instruction/serum/types\";\nimport { MemoDetailsCard } from \"components/instruction/MemoDetailsCard\";\nimport { BigNumber } from \"bignumber.js\";\nimport { BalanceDelta } from \"components/common/BalanceDelta\";\nimport { TokenBalancesCard } from \"components/transaction/TokenBalancesCard\";\n\nconst AUTO_REFRESH_INTERVAL = 2000;\nconst ZERO_CONFIRMATION_BAILOUT = 5;\nexport const INNER_INSTRUCTIONS_START_SLOT = 46915769;\n\nexport type SignatureProps = {\n  signature: TransactionSignature;\n};\n\nexport const SignatureContext = React.createContext(\"\");\n\nenum AutoRefresh {\n  Active,\n  Inactive,\n  BailedOut,\n}\n\ntype AutoRefreshProps = {\n  autoRefresh: AutoRefresh;\n};\n\nexport function TransactionDetailsPage({ signature: raw }: SignatureProps) {\n  let signature: TransactionSignature | undefined;\n\n  try {\n    const decoded = bs58.decode(raw);\n    if (decoded.length === 64) {\n      signature = raw;\n    }\n  } catch (err) {}\n\n  const status = useTransactionStatus(signature);\n  const [zeroConfirmationRetries, setZeroConfirmationRetries] = React.useState(\n    0\n  );\n\n  let autoRefresh = AutoRefresh.Inactive;\n\n  if (zeroConfirmationRetries >= ZERO_CONFIRMATION_BAILOUT) {\n    autoRefresh = AutoRefresh.BailedOut;\n  } else if (status?.data?.info && status.data.info.confirmations !== \"max\") {\n    autoRefresh = AutoRefresh.Active;\n  }\n\n  React.useEffect(() => {\n    if (\n      status?.status === FetchStatus.Fetched &&\n      status.data?.info &&\n      status.data.info.confirmations === 0\n    ) {\n      setZeroConfirmationRetries((retries) => retries + 1);\n    }\n  }, [status]);\n\n  React.useEffect(() => {\n    if (\n      status?.status === FetchStatus.Fetching &&\n      autoRefresh === AutoRefresh.BailedOut\n    ) {\n      setZeroConfirmationRetries(0);\n    }\n  }, [status, autoRefresh, setZeroConfirmationRetries]);\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Transaction</h2>\n        </div>\n      </div>\n      {signature === undefined ? (\n        <ErrorCard text={`Signature \"${raw}\" is not valid`} />\n      ) : (\n        <>\n          <StatusCard signature={signature} autoRefresh={autoRefresh} />\n          <AccountsCard signature={signature} autoRefresh={autoRefresh} />\n          <TokenBalancesCard signature={signature} />\n          <SignatureContext.Provider value={signature}>\n            <InstructionsSection signature={signature} />\n          </SignatureContext.Provider>\n          <ProgramLogSection signature={signature} />\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction StatusCard({\n  signature,\n  autoRefresh,\n}: SignatureProps & AutoRefreshProps) {\n  const fetchStatus = useFetchTransactionStatus();\n  const status = useTransactionStatus(signature);\n  const details = useTransactionDetails(signature);\n  const { firstAvailableBlock, status: clusterStatus } = useCluster();\n\n  // Fetch transaction on load\n  React.useEffect(() => {\n    if (!status && clusterStatus === ClusterStatus.Connected) {\n      fetchStatus(signature);\n    }\n  }, [signature, clusterStatus]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Effect to set and clear interval for auto-refresh\n  React.useEffect(() => {\n    if (autoRefresh === AutoRefresh.Active) {\n      let intervalHandle: NodeJS.Timeout = setInterval(\n        () => fetchStatus(signature),\n        AUTO_REFRESH_INTERVAL\n      );\n\n      return () => {\n        clearInterval(intervalHandle);\n      };\n    }\n  }, [autoRefresh, fetchStatus, signature]);\n\n  if (\n    !status ||\n    (status.status === FetchStatus.Fetching &&\n      autoRefresh === AutoRefresh.Inactive)\n  ) {\n    return <LoadingCard />;\n  } else if (status.status === FetchStatus.FetchFailed) {\n    return (\n      <ErrorCard retry={() => fetchStatus(signature)} text=\"Fetch Failed\" />\n    );\n  } else if (!status.data?.info) {\n    if (firstAvailableBlock !== undefined && firstAvailableBlock > 1) {\n      return (\n        <ErrorCard\n          retry={() => fetchStatus(signature)}\n          text=\"Not Found\"\n          subtext={`Note: Transactions processed before block ${firstAvailableBlock} are not available at this time`}\n        />\n      );\n    }\n    return <ErrorCard retry={() => fetchStatus(signature)} text=\"Not Found\" />;\n  }\n\n  const { info } = status.data;\n\n  const renderResult = () => {\n    let statusClass = \"success\";\n    let statusText = \"Success\";\n    if (info.result.err) {\n      statusClass = \"warning\";\n      statusText = \"Error\";\n    }\n\n    return (\n      <h3 className=\"mb-0\">\n        <span className={`badge badge-soft-${statusClass}`}>{statusText}</span>\n      </h3>\n    );\n  };\n\n  const fee = details?.data?.transaction?.meta?.fee;\n  const transaction = details?.data?.transaction?.transaction;\n  const blockhash = transaction?.message.recentBlockhash;\n  const isNonce = (() => {\n    if (!transaction || transaction.message.instructions.length < 1) {\n      return false;\n    }\n\n    const ix = intoTransactionInstruction(\n      transaction,\n      transaction.message.instructions[0]\n    );\n    return (\n      ix &&\n      SystemProgram.programId.equals(ix.programId) &&\n      SystemInstruction.decodeInstructionType(ix) === \"AdvanceNonceAccount\"\n    );\n  })();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Overview</h3>\n        {autoRefresh === AutoRefresh.Active ? (\n          <span className=\"spinner-grow spinner-grow-sm\"></span>\n        ) : (\n          <button\n            className=\"btn btn-white btn-sm\"\n            onClick={() => fetchStatus(signature)}\n          >\n            <span className=\"fe fe-refresh-cw mr-2\"></span>\n            Refresh\n          </button>\n        )}\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Signature</td>\n          <td className=\"text-lg-right\">\n            <Signature signature={signature} alignRight />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Result</td>\n          <td className=\"text-lg-right\">{renderResult()}</td>\n        </tr>\n\n        <tr>\n          <td>Timestamp</td>\n          <td className=\"text-lg-right\">\n            {info.timestamp !== \"unavailable\" ? (\n              displayTimestamp(info.timestamp * 1000)\n            ) : (\n              <InfoTooltip\n                bottom\n                right\n                text=\"Timestamps are available for confirmed blocks within the past 5 epochs\"\n              >\n                Unavailable\n              </InfoTooltip>\n            )}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Confirmations</td>\n          <td className=\"text-lg-right text-uppercase\">{info.confirmations}</td>\n        </tr>\n\n        <tr>\n          <td>Block</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={info.slot} link />\n          </td>\n        </tr>\n\n        {blockhash && (\n          <tr>\n            <td>\n              {isNonce ? (\n                \"Nonce\"\n              ) : (\n                <InfoTooltip text=\"Transactions use a previously confirmed blockhash as a nonce to prevent double spends\">\n                  Recent Blockhash\n                </InfoTooltip>\n              )}\n            </td>\n            <td className=\"text-lg-right\">{blockhash}</td>\n          </tr>\n        )}\n\n        {fee && (\n          <tr>\n            <td>Fee (SOL)</td>\n            <td className=\"text-lg-right\">{lamportsToSolString(fee)}</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction AccountsCard({\n  signature,\n  autoRefresh,\n}: SignatureProps & AutoRefreshProps) {\n  const details = useTransactionDetails(signature);\n  const fetchDetails = useFetchTransactionDetails();\n  const fetchStatus = useFetchTransactionStatus();\n  const refreshDetails = () => fetchDetails(signature);\n  const refreshStatus = () => fetchStatus(signature);\n  const transaction = details?.data?.transaction?.transaction;\n  const message = transaction?.message;\n  const status = useTransactionStatus(signature);\n\n  // Fetch details on load\n  React.useEffect(() => {\n    if (status?.data?.info?.confirmations === \"max\" && !details) {\n      fetchDetails(signature);\n    }\n  }, [signature, details, status, fetchDetails]);\n\n  if (!status?.data?.info) {\n    return null;\n  } else if (autoRefresh === AutoRefresh.BailedOut) {\n    return (\n      <ErrorCard\n        text=\"Details are not available until the transaction reaches MAX confirmations\"\n        retry={refreshStatus}\n      />\n    );\n  } else if (autoRefresh === AutoRefresh.Active) {\n    return (\n      <ErrorCard text=\"Details are not available until the transaction reaches MAX confirmations\" />\n    );\n  } else if (!details || details.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (details.status === FetchStatus.FetchFailed) {\n    return <ErrorCard retry={refreshDetails} text=\"Failed to fetch details\" />;\n  } else if (!details.data?.transaction || !message) {\n    return <ErrorCard text=\"Details are not available\" />;\n  }\n\n  const { meta } = details.data.transaction;\n  if (!meta) {\n    return <ErrorCard text=\"Transaction metadata is missing\" />;\n  }\n\n  const accountRows = message.accountKeys.map((account, index) => {\n    const pre = meta.preBalances[index];\n    const post = meta.postBalances[index];\n    const pubkey = account.pubkey;\n    const key = account.pubkey.toBase58();\n    const delta = new BigNumber(post).minus(new BigNumber(pre));\n\n    return (\n      <tr key={key}>\n        <td>\n          <Address pubkey={pubkey} link />\n        </td>\n        <td>\n          <BalanceDelta delta={delta} isSol />\n        </td>\n        <td>{lamportsToSolString(post)}</td>\n        <td>\n          {index === 0 && (\n            <span className=\"badge badge-soft-info mr-1\">Fee Payer</span>\n          )}\n          {!account.writable && (\n            <span className=\"badge badge-soft-info mr-1\">Readonly</span>\n          )}\n          {account.signer && (\n            <span className=\"badge badge-soft-info mr-1\">Signer</span>\n          )}\n          {message.instructions.find((ix) => ix.programId.equals(pubkey)) && (\n            <span className=\"badge badge-soft-info mr-1\">Program</span>\n          )}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Account Inputs</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Change (SOL)</th>\n              <th className=\"text-muted\">Post Balance (SOL)</th>\n              <th className=\"text-muted\">Details</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{accountRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction InstructionsSection({ signature }: SignatureProps) {\n  const status = useTransactionStatus(signature);\n  const details = useTransactionDetails(signature);\n  const { cluster } = useCluster();\n  const fetchDetails = useFetchTransactionDetails();\n  const refreshDetails = () => fetchDetails(signature);\n\n  if (!status?.data?.info || !details?.data?.transaction) return null;\n\n  const raw = details.data.raw?.transaction;\n\n  const { transaction } = details.data.transaction;\n  const { meta } = details.data.transaction;\n\n  if (transaction.message.instructions.length === 0) {\n    return <ErrorCard retry={refreshDetails} text=\"No instructions found\" />;\n  }\n\n  const innerInstructions: {\n    [index: number]: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  } = {};\n\n  if (\n    meta?.innerInstructions &&\n    (cluster !== Cluster.MainnetBeta ||\n      details.data.transaction.slot >= INNER_INSTRUCTIONS_START_SLOT)\n  ) {\n    meta.innerInstructions.forEach((parsed: ParsedInnerInstruction) => {\n      if (!innerInstructions[parsed.index]) {\n        innerInstructions[parsed.index] = [];\n      }\n\n      parsed.instructions.forEach((ix) => {\n        innerInstructions[parsed.index].push(ix);\n      });\n    });\n  }\n\n  const result = status.data.info.result;\n  const instructionDetails = transaction.message.instructions.map(\n    (instruction, index) => {\n      let innerCards: JSX.Element[] = [];\n\n      if (index in innerInstructions) {\n        innerInstructions[index].forEach((ix, childIndex) => {\n          if (typeof ix.programId === \"string\") {\n            ix.programId = new PublicKey(ix.programId);\n          }\n\n          let res = renderInstructionCard({\n            index,\n            ix,\n            result,\n            signature,\n            tx: transaction,\n            childIndex,\n            raw,\n          });\n\n          innerCards.push(res);\n        });\n      }\n\n      return renderInstructionCard({\n        index,\n        ix: instruction,\n        result,\n        signature,\n        tx: transaction,\n        innerCards,\n        raw,\n      });\n    }\n  );\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body\">\n            <h3 className=\"mb-0\">Instruction(s)</h3>\n          </div>\n        </div>\n      </div>\n      {instructionDetails}\n    </>\n  );\n}\n\nfunction ProgramLogSection({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n  const logMessages = details?.data?.transaction?.meta?.logMessages;\n\n  if (!logMessages || logMessages.length < 1) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body\">\n            <h3 className=\"card-header-title\">Program Log</h3>\n          </div>\n        </div>\n      </div>\n      <div className=\"card\">\n        <ul className=\"log-messages\">\n          {logMessages.map((message, key) => (\n            <li key={key}>{message.replace(/^Program log: /, \"\")}</li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nfunction renderInstructionCard({\n  ix,\n  tx,\n  result,\n  index,\n  signature,\n  innerCards,\n  childIndex,\n  raw,\n}: {\n  ix: ParsedInstruction | PartiallyDecodedInstruction;\n  tx: ParsedTransaction;\n  result: SignatureResult;\n  index: number;\n  signature: TransactionSignature;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n  raw?: Transaction;\n}) {\n  const key = `${index}-${childIndex}`;\n\n  if (\"parsed\" in ix) {\n    const props = {\n      tx,\n      ix,\n      result,\n      index,\n      innerCards,\n      childIndex,\n      key,\n    };\n\n    switch (ix.program) {\n      case \"spl-token\":\n        return <TokenDetailsCard {...props} />;\n      case \"bpf-loader\":\n        return <BpfLoaderDetailsCard {...props} />;\n      case \"system\":\n        return <SystemDetailsCard {...props} />;\n      case \"stake\":\n        return <StakeDetailsCard {...props} />;\n      case \"spl-memo\":\n        return <MemoDetailsCard {...props} />;\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  }\n\n  // TODO: There is a bug in web3, where inner instructions\n  // aren't getting coerced. This is a temporary fix.\n\n  if (typeof ix.programId === \"string\") {\n    ix.programId = new PublicKey(ix.programId);\n  }\n\n  ix.accounts = ix.accounts.map((account) => {\n    if (typeof account === \"string\") {\n      return new PublicKey(account);\n    }\n\n    return account;\n  });\n\n  // TODO: End hotfix\n\n  const transactionIx = intoTransactionInstruction(tx, ix);\n\n  if (!transactionIx) {\n    return (\n      <ErrorCard\n        key={key}\n        text=\"Could not display this instruction, please report\"\n      />\n    );\n  }\n\n  const props = {\n    ix: transactionIx,\n    result,\n    index,\n    signature,\n    innerCards,\n    childIndex,\n  };\n\n  if (isSerumInstruction(transactionIx)) {\n    return <SerumDetailsCard key={key} {...props} />;\n  } else if (isTokenSwapInstruction(transactionIx)) {\n    return <TokenSwapDetailsCard key={key} {...props} />;\n  } else if (isTokenLendingInstruction(transactionIx)) {\n    return <TokenLendingDetailsCard key={key} {...props} />;\n  } else {\n    return <UnknownDetailsCard key={key} {...props} />;\n  }\n}\n","import React from \"react\";\nimport {\n  PublicKey,\n  ConfirmedSignatureInfo,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n} from \"@solana/web3.js\";\nimport { CacheEntry, FetchStatus } from \"providers/cache\";\nimport {\n  useAccountHistories,\n  useFetchAccountHistory,\n} from \"providers/accounts/history\";\nimport {\n  useAccountOwnedTokens,\n  TokenInfoWithPubkey,\n  TOKEN_PROGRAM_ID,\n} from \"providers/accounts/tokens\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\nimport { Slot } from \"components/common/Slot\";\nimport {\n  Details,\n  useFetchTransactionDetails,\n  useTransactionDetailsCache,\n} from \"providers/transactions/details\";\nimport { coerce } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport {\n  TokenInstructionType,\n  IX_TITLES,\n} from \"components/instruction/token/types\";\nimport { reportError } from \"utils/sentry\";\nimport { intoTransactionInstruction, displayAddress } from \"utils/tx\";\nimport {\n  isTokenSwapInstruction,\n  parseTokenSwapInstructionTitle,\n} from \"components/instruction/token-swap/types\";\nimport {\n  isTokenLendingInstruction,\n  parseTokenLendingInstructionTitle,\n} from \"components/instruction/token-lending/types\";\nimport {\n  isSerumInstruction,\n  parseSerumInstructionTitle,\n} from \"components/instruction/serum/types\";\nimport { INNER_INSTRUCTIONS_START_SLOT } from \"pages/TransactionDetailsPage\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useQuery } from \"utils/url\";\n\nconst TRUNCATE_TOKEN_LENGTH = 10;\nconst ALL_TOKENS = \"\";\n\ntype InstructionType = {\n  name: string;\n  innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport function TokenHistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const ownedTokens = useAccountOwnedTokens(address);\n\n  if (ownedTokens === undefined) {\n    return null;\n  }\n\n  const tokens = ownedTokens.data?.tokens;\n  if (tokens === undefined || tokens.length === 0) return null;\n\n  if (tokens.length > 25) {\n    return (\n      <ErrorCard text=\"Token transaction history is not available for accounts with over 25 token accounts\" />\n    );\n  }\n\n  return <TokenHistoryTable tokens={tokens} />;\n}\n\nconst useQueryFilter = (): string => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  return filter || \"\";\n};\n\ntype FilterProps = {\n  filter: string;\n  toggle: () => void;\n  show: boolean;\n  tokens: TokenInfoWithPubkey[];\n};\n\nfunction TokenHistoryTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const accountHistories = useAccountHistories();\n  const fetchAccountHistory = useFetchAccountHistory();\n  const transactionDetailsCache = useTransactionDetailsCache();\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  const filteredTokens = React.useMemo(\n    () =>\n      tokens.filter((token) => {\n        if (filter === ALL_TOKENS) {\n          return true;\n        }\n        return token.info.mint.toBase58() === filter;\n      }),\n    [tokens, filter]\n  );\n\n  const fetchHistories = React.useCallback(\n    (refresh?: boolean) => {\n      filteredTokens.forEach((token) => {\n        fetchAccountHistory(token.pubkey, refresh);\n      });\n    },\n    [filteredTokens, fetchAccountHistory]\n  );\n\n  // Fetch histories on load\n  React.useEffect(() => {\n    filteredTokens.forEach((token) => {\n      const address = token.pubkey.toBase58();\n      if (!accountHistories[address]) {\n        fetchAccountHistory(token.pubkey, true);\n      }\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const allFoundOldest = filteredTokens.every((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.data?.foundOldest === true;\n  });\n\n  const allFetchedSome = filteredTokens.every((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.data !== undefined;\n  });\n\n  // Find the oldest slot which we know we have the full history for\n  let oldestSlot: number | undefined = allFoundOldest ? 0 : undefined;\n\n  if (!allFoundOldest && allFetchedSome) {\n    filteredTokens.forEach((token) => {\n      const history = accountHistories[token.pubkey.toBase58()];\n      if (history?.data?.foundOldest === false) {\n        const earliest =\n          history.data.fetched[history.data.fetched.length - 1].slot;\n        if (!oldestSlot) oldestSlot = earliest;\n        oldestSlot = Math.max(oldestSlot, earliest);\n      }\n    });\n  }\n\n  const fetching = filteredTokens.some((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.status === FetchStatus.Fetching;\n  });\n\n  const failed = filteredTokens.some((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.status === FetchStatus.FetchFailed;\n  });\n\n  const sigSet = new Set();\n  const mintAndTxs = filteredTokens\n    .map((token) => ({\n      mint: token.info.mint,\n      history: accountHistories[token.pubkey.toBase58()],\n    }))\n    .filter(({ history }) => {\n      return history?.data?.fetched && history.data.fetched.length > 0;\n    })\n    .flatMap(({ mint, history }) =>\n      (history?.data?.fetched as ConfirmedSignatureInfo[]).map((tx) => ({\n        mint,\n        tx,\n      }))\n    )\n    .filter(({ tx }) => {\n      if (sigSet.has(tx.signature)) return false;\n      sigSet.add(tx.signature);\n      return true;\n    })\n    .filter(({ tx }) => {\n      return oldestSlot !== undefined && tx.slot >= oldestSlot;\n    });\n\n  React.useEffect(() => {\n    if (!fetching && mintAndTxs.length < 1 && !allFoundOldest) {\n      fetchHistories();\n    }\n  }, [fetching, mintAndTxs, allFoundOldest, fetchHistories]);\n\n  if (mintAndTxs.length === 0) {\n    if (fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    } else if (failed) {\n      return (\n        <ErrorCard\n          retry={() => fetchHistories(true)}\n          text=\"Failed to fetch transaction history\"\n        />\n      );\n    }\n    return (\n      <ErrorCard\n        retry={() => fetchHistories(true)}\n        retryText=\"Try again\"\n        text=\"No transaction history found\"\n      />\n    );\n  }\n\n  mintAndTxs.sort((a, b) => {\n    if (a.tx.slot > b.tx.slot) return -1;\n    if (a.tx.slot < b.tx.slot) return 1;\n    return 0;\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Token History</h3>\n        <FilterDropdown\n          filter={filter}\n          toggle={() => setDropdown((show) => !show)}\n          show={showDropdown}\n          tokens={tokens}\n        ></FilterDropdown>\n        <button\n          className=\"btn btn-white btn-sm\"\n          disabled={fetching}\n          onClick={() => fetchHistories(true)}\n        >\n          {fetching ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n              Loading\n            </>\n          ) : (\n            <>\n              <span className=\"fe fe-refresh-cw mr-2\"></span>\n              Refresh\n            </>\n          )}\n        </button>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Slot</th>\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Token</th>\n              <th className=\"text-muted\">Instruction Type</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {mintAndTxs.map(({ mint, tx }) => (\n              <TokenTransactionRow\n                key={tx.signature}\n                mint={mint}\n                tx={tx}\n                details={transactionDetailsCache[tx.signature]}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        {allFoundOldest ? (\n          <div className=\"text-muted text-center\">Fetched full history</div>\n        ) : (\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() => fetchHistories()}\n            disabled={fetching}\n          >\n            {fetching ? (\n              <>\n                <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n                Loading\n              </>\n            ) : (\n              \"Load More\"\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst FilterDropdown = ({ filter, toggle, show, tokens }: FilterProps) => {\n  const { cluster } = useCluster();\n\n  const buildLocation = (location: Location, filter: string) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === ALL_TOKENS) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const filterOptions: string[] = [ALL_TOKENS];\n  const nameLookup: { [mint: string]: string } = {};\n\n  tokens.forEach((token) => {\n    const pubkey = token.info.mint.toBase58();\n    filterOptions.push(pubkey);\n    nameLookup[pubkey] = formatTokenName(pubkey, cluster);\n  });\n\n  return (\n    <div className=\"dropdown mr-2\">\n      <small className=\"mr-2\">Filter:</small>\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {filter === ALL_TOKENS ? \"All Tokens\" : nameLookup[filter]}\n      </button>\n      <div\n        className={`token-filter dropdown-menu-right dropdown-menu${\n          show ? \" show\" : \"\"\n        }`}\n      >\n        {filterOptions.map((filterOption) => {\n          return (\n            <Link\n              key={filterOption}\n              to={(location: Location) => buildLocation(location, filterOption)}\n              className={`dropdown-item${\n                filterOption === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {filterOption === ALL_TOKENS\n                ? \"All Tokens\"\n                : formatTokenName(filterOption, cluster)}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction instructionTypeName(\n  ix: ParsedInstruction,\n  tx: ConfirmedSignatureInfo\n): string {\n  try {\n    const parsed = coerce(ix.parsed, ParsedInfo);\n    const { type: rawType } = parsed;\n    const type = coerce(rawType, TokenInstructionType);\n    return IX_TITLES[type];\n  } catch (err) {\n    reportError(err, { signature: tx.signature });\n    return \"Unknown\";\n  }\n}\n\nconst TokenTransactionRow = React.memo(\n  ({\n    mint,\n    tx,\n    details,\n  }: {\n    mint: PublicKey;\n    tx: ConfirmedSignatureInfo;\n    details: CacheEntry<Details> | undefined;\n  }) => {\n    const fetchDetails = useFetchTransactionDetails();\n    const { cluster } = useCluster();\n\n    // Fetch details on load\n    React.useEffect(() => {\n      if (!details) fetchDetails(tx.signature);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    let statusText: string;\n    let statusClass: string;\n    if (tx.err) {\n      statusClass = \"warning\";\n      statusText = \"Failed\";\n    } else {\n      statusClass = \"success\";\n      statusText = \"Success\";\n    }\n\n    const instructions =\n      details?.data?.transaction?.transaction.message.instructions;\n    if (!instructions)\n      return (\n        <tr key={tx.signature}>\n          <td className=\"w-1\">\n            <Slot slot={tx.slot} link />\n          </td>\n\n          <td>\n            <span className={`badge badge-soft-${statusClass}`}>\n              {statusText}\n            </span>\n          </td>\n\n          <td>\n            <Address pubkey={mint} link truncate />\n          </td>\n\n          <td>\n            <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n            Loading\n          </td>\n\n          <td>\n            <Signature signature={tx.signature} link />\n          </td>\n        </tr>\n      );\n\n    let tokenInstructionNames: InstructionType[] = [];\n\n    if (details?.data?.transaction) {\n      const transaction = details.data.transaction;\n\n      tokenInstructionNames = instructions\n        .map((ix, index): InstructionType | undefined => {\n          let name = \"Unknown\";\n\n          const innerInstructions: (\n            | ParsedInstruction\n            | PartiallyDecodedInstruction\n          )[] = [];\n\n          if (\n            transaction.meta?.innerInstructions &&\n            (cluster !== Cluster.MainnetBeta ||\n              transaction.slot >= INNER_INSTRUCTIONS_START_SLOT)\n          ) {\n            transaction.meta.innerInstructions.forEach((ix) => {\n              if (ix.index === index) {\n                ix.instructions.forEach((inner) => {\n                  innerInstructions.push(inner);\n                });\n              }\n            });\n          }\n\n          let transactionInstruction;\n          if (transaction?.transaction) {\n            transactionInstruction = intoTransactionInstruction(\n              transaction.transaction,\n              ix\n            );\n          }\n\n          if (\"parsed\" in ix) {\n            if (ix.program === \"spl-token\") {\n              name = instructionTypeName(ix, tx);\n            } else {\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isSerumInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseSerumInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isTokenSwapInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseTokenSwapInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isTokenLendingInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseTokenLendingInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else {\n            if (\n              ix.accounts.findIndex((account) =>\n                account.equals(TOKEN_PROGRAM_ID)\n              ) >= 0\n            ) {\n              name = \"Unknown (Inner)\";\n            } else {\n              return undefined;\n            }\n          }\n\n          return {\n            name: name,\n            innerInstructions: innerInstructions,\n          };\n        })\n        .filter((name) => name !== undefined) as InstructionType[];\n    }\n\n    return (\n      <>\n        {tokenInstructionNames.map((instructionType, index) => {\n          return (\n            <tr key={index}>\n              <td className=\"w-1\">\n                <Slot slot={tx.slot} link />\n              </td>\n\n              <td>\n                <span className={`badge badge-soft-${statusClass}`}>\n                  {statusText}\n                </span>\n              </td>\n\n              <td className=\"forced-truncate\">\n                <Address pubkey={mint} link truncateUnknown />\n              </td>\n\n              <td>\n                <InstructionDetails instructionType={instructionType} tx={tx} />\n              </td>\n\n              <td className=\"forced-truncate\">\n                <Signature signature={tx.signature} link truncate />\n              </td>\n            </tr>\n          );\n        })}\n      </>\n    );\n  }\n);\n\nfunction InstructionDetails({\n  instructionType,\n  tx,\n}: {\n  instructionType: InstructionType;\n  tx: ConfirmedSignatureInfo;\n}) {\n  const [expanded, setExpanded] = React.useState(false);\n\n  let instructionTypes = instructionType.innerInstructions\n    .map((ix) => {\n      if (\"parsed\" in ix && ix.program === \"spl-token\") {\n        return instructionTypeName(ix, tx);\n      }\n      return undefined;\n    })\n    .filter((type) => type !== undefined);\n\n  return (\n    <>\n      <p className=\"tree\">\n        {instructionTypes.length > 0 && (\n          <span\n            onClick={(e) => {\n              e.preventDefault();\n              setExpanded(!expanded);\n            }}\n            className={`c-pointer fe mr-2 ${\n              expanded ? \"fe-minus-square\" : \"fe-plus-square\"\n            }`}\n          ></span>\n        )}\n        {instructionType.name}\n      </p>\n      {expanded && (\n        <ul className=\"tree\">\n          {instructionTypes.map((type, index) => {\n            return <li key={index}>{type}</li>;\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n\nfunction formatTokenName(pubkey: string, cluster: Cluster): string {\n  let display = displayAddress(pubkey, cluster);\n\n  if (display === pubkey) {\n    display = display.slice(0, TRUNCATE_TOKEN_LENGTH) + \"\\u2026\";\n  }\n\n  return display;\n}\n","import React from \"react\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport {\n  PublicKey,\n  Connection,\n  TokenAccountBalancePair,\n  ParsedAccountData,\n} from \"@solana/web3.js\";\nimport { TokenAccountInfo, TokenAccount } from \"validators/accounts/token\";\nimport { ParsedInfo } from \"validators\";\nimport { coerce } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\n\ntype LargestAccounts = {\n  largest: TokenAccountBalancePairWithOwner[];\n};\n\ntype State = Cache.State<LargestAccounts>;\ntype Dispatch = Cache.Dispatch<LargestAccounts>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function LargestAccountsProvider({ children }: ProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<LargestAccounts>(url);\n\n  // Clear cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\ntype OptionalOwner = {\n  owner?: PublicKey;\n};\n\nexport type TokenAccountBalancePairWithOwner = TokenAccountBalancePair &\n  OptionalOwner;\n\nasync function fetchLargestAccounts(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: pubkey.toBase58(),\n    status: Cache.FetchStatus.Fetching,\n    url,\n  });\n\n  let data;\n  let fetchStatus;\n  try {\n    data = {\n      largest: (\n        await new Connection(url, \"single\").getTokenLargestAccounts(pubkey)\n      ).value,\n    };\n\n    data.largest = await Promise.all(\n      data.largest.map(\n        async (account): Promise<TokenAccountBalancePairWithOwner> => {\n          try {\n            const accountInfo = (\n              await new Connection(url, \"single\").getParsedAccountInfo(\n                account.address\n              )\n            ).value;\n            if (accountInfo && \"parsed\" in accountInfo.data) {\n              const info = coerceParsedAccountInfo(accountInfo.data);\n              return {\n                ...account,\n                owner: info.owner,\n              };\n            }\n          } catch (error) {\n            if (cluster !== Cluster.Custom) {\n              reportError(error, { url });\n            }\n          }\n          return account;\n        }\n      )\n    );\n\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    data,\n    key: pubkey.toBase58(),\n    url,\n  });\n}\n\nexport function useFetchTokenLargestAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTokenLargestAccounts must be used within a MintsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchLargestAccounts(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n\nexport function useTokenLargestTokens(\n  address: string\n): Cache.CacheEntry<LargestAccounts> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTokenLargestTokens must be used within a MintsProvider`\n    );\n  }\n\n  return context.entries[address];\n}\n\nfunction coerceParsedAccountInfo(\n  parsedData: ParsedAccountData\n): TokenAccountInfo {\n  try {\n    const data = coerce(parsedData.parsed, ParsedInfo);\n    const parsed = coerce(data, TokenAccount);\n    return coerce(parsed.info, TokenAccountInfo);\n  } catch (error) {\n    throw error;\n  }\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Address } from \"components/common/Address\";\nimport {\n  useTokenLargestTokens,\n  useFetchTokenLargestAccounts,\n  TokenAccountBalancePairWithOwner,\n} from \"providers/mints/largest\";\nimport { FetchStatus } from \"providers/cache\";\nimport { TokenRegistry } from \"tokenRegistry\";\nimport { useCluster } from \"providers/cluster\";\nimport { useMintAccountInfo } from \"providers/accounts\";\nimport { normalizeTokenAmount } from \"utils\";\n\nexport function TokenLargestAccountsCard({ pubkey }: { pubkey: PublicKey }) {\n  const mintAddress = pubkey.toBase58();\n  const mintInfo = useMintAccountInfo(mintAddress);\n  const largestAccounts = useTokenLargestTokens(mintAddress);\n  const fetchLargestAccounts = useFetchTokenLargestAccounts();\n  const refreshLargest = React.useCallback(() => fetchLargestAccounts(pubkey), [\n    pubkey,\n    fetchLargestAccounts,\n  ]);\n  const { cluster } = useCluster();\n  const unit = TokenRegistry.get(mintAddress, cluster)?.symbol;\n  const unitLabel = unit ? `(${unit})` : \"\";\n\n  React.useEffect(() => {\n    if (mintInfo) refreshLargest();\n  }, [mintInfo, refreshLargest]);\n\n  // Largest accounts hasn't started fetching\n  if (largestAccounts === undefined) return null;\n\n  // This is not a mint account\n  if (mintInfo === undefined) return null;\n\n  if (largestAccounts?.data === undefined) {\n    if (largestAccounts.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading largest accounts\" />;\n    }\n\n    return (\n      <ErrorCard\n        retry={refreshLargest}\n        text=\"Failed to fetch largest accounts\"\n      />\n    );\n  } else if (largestAccounts.status === FetchStatus.Fetching) {\n    return <LoadingCard message=\"Refreshing largest accounts\" />;\n  }\n\n  const accounts = largestAccounts.data.largest;\n  if (accounts.length === 0) {\n    return <ErrorCard text=\"No holders found\" />;\n  }\n\n  // Find largest fixed point in accounts array\n  const balanceFixedPoint = accounts.reduce(\n    (prev: number, current: TokenAccountBalancePairWithOwner) => {\n      const amount = `${current.uiAmount}`;\n      const length = amount.length;\n      const decimalIndex = amount.indexOf(\".\");\n      if (decimalIndex >= 0 && length - decimalIndex - 1 > prev) {\n        return length - decimalIndex - 1;\n      }\n      return prev;\n    },\n    0\n  );\n\n  const supplyTotal = normalizeTokenAmount(mintInfo.supply, mintInfo.decimals);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Largest Accounts</h4>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm card-table\">\n            <thead>\n              <tr>\n                <th className=\"text-muted\">Rank</th>\n                <th className=\"text-muted\">Address</th>\n                <th className=\"text-muted\">Owner</th>\n                <th className=\"text-muted text-right\">Balance {unitLabel}</th>\n                <th className=\"text-muted text-right\">% of Total Supply</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {accounts.map((account, index) =>\n                renderAccountRow(account, index, balanceFixedPoint, supplyTotal)\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (\n  account: TokenAccountBalancePairWithOwner,\n  index: number,\n  balanceFixedPoint: number,\n  supply: number\n) => {\n  let percent = \"-\";\n  if (supply > 0) {\n    percent = `${((100 * account.uiAmount) / supply).toFixed(3)}%`;\n\n    if (parseFloat(percent) === 0 && account.uiAmount > 0) {\n      percent = `~${percent}`;\n    }\n  }\n  return (\n    <tr key={index}>\n      <td>\n        <span className=\"badge badge-soft-gray badge-pill\">{index + 1}</span>\n      </td>\n      <td className=\"td\">\n        <Address pubkey={account.address} link truncate />\n      </td>\n      <td>\n        {account.owner && <Address pubkey={account.owner} link truncate />}\n      </td>\n      <td className=\"text-right text-monospace\">\n        {fixedLocaleNumber(account.uiAmount, balanceFixedPoint)}\n      </td>\n      <td className=\"text-right text-monospace\">{percent}</td>\n    </tr>\n  );\n};\n\nfunction fixedLocaleNumber(value: number, fixedPoint: number) {\n  const fixed = value.toFixed(fixedPoint);\n  const split = fixed.split(\".\");\n\n  if (fixedPoint < 1) {\n    return parseInt(split[0], 10).toLocaleString(\"en\");\n  }\n\n  return [parseInt(split[0], 10).toLocaleString(\"en\"), split[1]].join(\".\");\n}\n","import React from \"react\";\nimport { Address } from \"./Address\";\nimport { Account } from \"providers/accounts\";\nimport { lamportsToSolString } from \"utils\";\n\ntype AccountHeaderProps = {\n  title: string;\n  refresh: Function;\n};\n\ntype AccountProps = {\n  account: Account;\n};\n\nexport function AccountHeader({ title, refresh }: AccountHeaderProps) {\n  return (\n    <div className=\"card-header align-items-center\">\n      <h3 className=\"card-header-title\">{title}</h3>\n      <button className=\"btn btn-white btn-sm\" onClick={() => refresh()}>\n        <span className=\"fe fe-refresh-cw mr-2\"></span>\n        Refresh\n      </button>\n    </div>\n  );\n}\n\nexport function AccountAddressRow({ account }: AccountProps) {\n  return (\n    <tr>\n      <td>Address</td>\n      <td className=\"text-lg-right\">\n        <Address pubkey={account.pubkey} alignRight raw />\n      </td>\n    </tr>\n  );\n}\n\nexport function AccountBalanceRow({ account }: AccountProps) {\n  const { lamports } = account;\n  return (\n    <tr>\n      <td>Balance (SOL)</td>\n      <td className=\"text-lg-right text-uppercase\">\n        {lamportsToSolString(lamports)}\n      </td>\n    </tr>\n  );\n}\n\nexport function AccountOwnerRow({ account }: AccountProps) {\n  if (account.details) {\n    return (\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={account.details.owner} alignRight link />\n        </td>\n      </tr>\n    );\n  }\n\n  return <></>;\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { VoteAccount } from \"validators/accounts/vote\";\nimport { displayTimestamp } from \"utils/date\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\nimport { Slot } from \"components/common/Slot\";\n\nexport function VoteAccountSection({\n  account,\n  voteAccount,\n}: {\n  account: Account;\n  voteAccount: VoteAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  const rootSlot = voteAccount.info.rootSlot;\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Vote Account\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>\n            Authorized Voter\n            {voteAccount.info.authorizedVoters.length > 1 ? \"s\" : \"\"}\n          </td>\n          <td className=\"text-lg-right\">\n            {voteAccount.info.authorizedVoters.map((voter) => {\n              return (\n                <Address\n                  pubkey={voter.authorizedVoter}\n                  key={voter.authorizedVoter.toString()}\n                  alignRight\n                  raw\n                  link\n                />\n              );\n            })}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Authorized Withdrawer</td>\n          <td className=\"text-lg-right\">\n            <Address\n              pubkey={voteAccount.info.authorizedWithdrawer}\n              alignRight\n              raw\n              link\n            />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Last Timestamp</td>\n          <td className=\"text-lg-right\">\n            {displayTimestamp(voteAccount.info.lastTimestamp.timestamp * 1000)}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Commission</td>\n          <td className=\"text-lg-right\">{voteAccount.info.commission + \"%\"}</td>\n        </tr>\n\n        <tr>\n          <td>Root Slot</td>\n          <td className=\"text-lg-right\">\n            {rootSlot !== null ? <Slot slot={rootSlot} link /> : \"N/A\"}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { NonceAccount } from \"validators/accounts/nonce\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\n\nexport function NonceAccountSection({\n  account,\n  nonceAccount,\n}: {\n  account: Account;\n  nonceAccount: NonceAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Nonce Account\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Authority</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={nonceAccount.info.authority} alignRight raw link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Blockhash</td>\n          <td className=\"text-lg-right\">\n            <code>{nonceAccount.info.blockhash}</code>\n          </td>\n        </tr>\n\n        <tr>\n          <td>Fee</td>\n          <td className=\"text-lg-right\">\n            {nonceAccount.info.feeCalculator.lamportsPerSignature} lamports per\n            signature\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import { Slot } from \"components/common/Slot\";\nimport React from \"react\";\nimport { VoteAccount, Vote } from \"validators/accounts/vote\";\n\nexport function VotesCard({ voteAccount }: { voteAccount: VoteAccount }) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Vote History</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Slot</th>\n                <th className=\"text-muted\">Confirmation Count</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {voteAccount.info.votes.length > 0 &&\n                voteAccount.info.votes\n                  .reverse()\n                  .map((vote: Vote, index) => renderAccountRow(vote, index))}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {voteAccount.info.votes.length > 0 ? \"\" : \"No votes found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (vote: Vote, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 text-monospace\">\n        <Slot slot={vote.slot} link />\n      </td>\n      <td className=\"text-monospace\">{vote.confirmationCount}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport {\n  SysvarAccount,\n  SysvarClockAccount,\n  SysvarEpochScheduleAccount,\n  SysvarFeesAccount,\n  SysvarRecentBlockhashesAccount,\n  SysvarRentAccount,\n  SysvarRewardsAccount,\n  SysvarSlotHashesAccount,\n  SysvarSlotHistoryAccount,\n  SysvarStakeHistoryAccount,\n} from \"validators/accounts/sysvar\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\nimport { displayTimestamp } from \"utils/date\";\nimport { Slot } from \"components/common/Slot\";\n\nexport function SysvarAccountSection({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarAccount;\n}) {\n  switch (sysvarAccount.type) {\n    case \"clock\":\n      return (\n        <SysvarAccountClockCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"rent\":\n      return (\n        <SysvarAccountRentCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"rewards\":\n      return (\n        <SysvarAccountRewardsCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"epochSchedule\":\n      return (\n        <SysvarAccountEpochScheduleCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"fees\":\n      return (\n        <SysvarAccountFeesCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"recentBlockhashes\":\n      return (\n        <SysvarAccountRecentBlockhashesCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"slotHashes\":\n      return (\n        <SysvarAccountSlotHashes\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"slotHistory\":\n      return (\n        <SysvarAccountSlotHistory\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"stakeHistory\":\n      return (\n        <SysvarAccountStakeHistory\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n  }\n}\n\nfunction SysvarAccountRecentBlockhashesCard({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRecentBlockhashesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Recent Blockhashes\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountSlotHashes({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarSlotHashesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Slot Hashes\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountSlotHistory({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarSlotHistoryAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  const history = Array.from(\n    {\n      length: 100,\n    },\n    (v, k) => sysvarAccount.info.nextSlot - k\n  );\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Slot History\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td className=\"align-top\">\n            Slot History{\" \"}\n            <span className=\"text-muted\">(previous 100 slots)</span>\n          </td>\n          <td className=\"text-lg-right text-monospace\">\n            {history.map((val) => (\n              <p key={val} className=\"mb-0\">\n                <Slot slot={val} link />\n              </p>\n            ))}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountStakeHistory({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarStakeHistoryAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Stake History\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountFeesCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarFeesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Fees\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Lamports Per Signature</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.feeCalculator.lamportsPerSignature}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountEpochScheduleCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarEpochScheduleAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Epoch Schedule\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Slots Per Epoch</td>\n          <td className=\"text-lg-right\">{sysvarAccount.info.slotsPerEpoch}</td>\n        </tr>\n\n        <tr>\n          <td>Leader Schedule Slot Offset</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.leaderScheduleSlotOffset}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Epoch Warmup Enabled</td>\n          <td className=\"text-lg-right\">\n            <code>{sysvarAccount.info.warmup ? \"true\" : \"false\"}</code>\n          </td>\n        </tr>\n\n        <tr>\n          <td>First Normal Epoch</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.firstNormalEpoch}\n          </td>\n        </tr>\n\n        <tr>\n          <td>First Normal Slot</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={sysvarAccount.info.firstNormalSlot} />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountClockCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarClockAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Clock\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Timestamp</td>\n          <td className=\"text-lg-right\">\n            {displayTimestamp(sysvarAccount.info.unixTimestamp * 1000)}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Epoch</td>\n          <td className=\"text-lg-right\">{sysvarAccount.info.epoch}</td>\n        </tr>\n\n        <tr>\n          <td>Leader Schedule Epoch</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.leaderScheduleEpoch}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Slot</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={sysvarAccount.info.slot} link />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountRentCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRentAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Rent\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Burn Percent</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.burnPercent + \"%\"}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Exemption Threshold</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.exemptionThreshold} years\n          </td>\n        </tr>\n\n        <tr>\n          <td>Lamports Per Byte Year</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.lamportsPerByteYear}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountRewardsCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRewardsAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  const validatorPointValueFormatted = new Intl.NumberFormat(\"en-US\", {\n    maximumSignificantDigits: 20,\n  }).format(sysvarAccount.info.validatorPointValue);\n\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Rewards\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Validator Point Value</td>\n          <td className=\"text-lg-right text-monospace\">\n            {validatorPointValueFormatted} lamports\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import { Slot } from \"components/common/Slot\";\nimport React from \"react\";\nimport {\n  SysvarAccount,\n  SlotHashesInfo,\n  SlotHashEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function SlotHashesCard({\n  sysvarAccount,\n}: {\n  sysvarAccount: SysvarAccount;\n}) {\n  const slotHashes = sysvarAccount.info as SlotHashesInfo;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <div className=\"row align-items-center\">\n          <div className=\"col\">\n            <h3 className=\"card-header-title\">Slot Hashes</h3>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"w-1 text-muted\">Slot</th>\n              <th className=\"text-muted\">Blockhash</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {slotHashes.length > 0 &&\n              slotHashes.map((entry: SlotHashEntry, index) => {\n                return renderAccountRow(entry, index);\n              })}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        <div className=\"text-muted text-center\">\n          {slotHashes.length > 0 ? \"\" : \"No hashes found\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst renderAccountRow = (entry: SlotHashEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 text-monospace\">\n        <Slot slot={entry.slot} link />\n      </td>\n      <td className=\"text-monospace\">{entry.hash}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { lamportsToSolString } from \"utils\";\nimport {\n  SysvarAccount,\n  StakeHistoryInfo,\n  StakeHistoryEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function StakeHistoryCard({\n  sysvarAccount,\n}: {\n  sysvarAccount: SysvarAccount;\n}) {\n  const stakeHistory = sysvarAccount.info as StakeHistoryInfo;\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Stake History</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Epoch</th>\n                <th className=\"text-muted\">Effective (SOL)</th>\n                <th className=\"text-muted\">Activating (SOL)</th>\n                <th className=\"text-muted\">Deactivating (SOL)</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {stakeHistory.length > 0 &&\n                stakeHistory.map((entry: StakeHistoryEntry, index) => {\n                  return renderAccountRow(entry, index);\n                })}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {stakeHistory.length > 0 ? \"\" : \"No stake history found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (entry: StakeHistoryEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 text-monospace\">{entry.epoch}</td>\n      <td className=\"text-monospace\">\n        {lamportsToSolString(entry.stakeHistory.effective)}\n      </td>\n      <td className=\"text-monospace\">\n        {lamportsToSolString(entry.stakeHistory.activating)}\n      </td>\n      <td className=\"text-monospace\">\n        {lamportsToSolString(entry.stakeHistory.deactivating)}\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport {\n  RecentBlockhashesInfo,\n  RecentBlockhashesEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function BlockhashesCard({\n  blockhashes,\n}: {\n  blockhashes: RecentBlockhashesInfo;\n}) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Blockhashes</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Recency</th>\n                <th className=\"w-1 text-muted\">Blockhash</th>\n                <th className=\"text-muted\">Fee Calculator</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {blockhashes.length > 0 &&\n                blockhashes.map((entry: RecentBlockhashesEntry, index) => {\n                  return renderAccountRow(entry, index);\n                })}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {blockhashes.length > 0 ? \"\" : \"No blockhashes found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (entry: RecentBlockhashesEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1\">{index + 1}</td>\n      <td className=\"w-1 text-monospace\">{entry.blockhash}</td>\n      <td className=\"\">\n        {entry.feeCalculator.lamportsPerSignature} lamports per signature\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport {\n  ConfigAccount,\n  StakeConfigInfoAccount,\n  ValidatorInfoAccount,\n} from \"validators/accounts/config\";\nimport {\n  AccountAddressRow,\n  AccountBalanceRow,\n  AccountHeader,\n} from \"components/common/Account\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\n\nconst MAX_SLASH_PENALTY = Math.pow(2, 8);\n\nexport function ConfigAccountSection({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: ConfigAccount;\n}) {\n  switch (configAccount.type) {\n    case \"stakeConfig\":\n      return (\n        <StakeConfigCard account={account} configAccount={configAccount} />\n      );\n    case \"validatorInfo\":\n      return (\n        <ValidatorInfoCard account={account} configAccount={configAccount} />\n      );\n  }\n}\n\nfunction StakeConfigCard({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: StakeConfigInfoAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  const warmupCooldownFormatted = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    maximumFractionDigits: 2,\n  }).format(configAccount.info.warmupCooldownRate);\n\n  const slashPenaltyFormatted = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    maximumFractionDigits: 2,\n  }).format(configAccount.info.slashPenalty / MAX_SLASH_PENALTY);\n\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Stake Config\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Warmup / Cooldown Rate</td>\n          <td className=\"text-lg-right\">{warmupCooldownFormatted}</td>\n        </tr>\n\n        <tr>\n          <td>Slash Penalty</td>\n          <td className=\"text-lg-right\">{slashPenaltyFormatted}</td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction ValidatorInfoCard({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: ValidatorInfoAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Validator Info\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        {configAccount.info.configData.name && (\n          <tr>\n            <td>Name</td>\n            <td className=\"text-lg-right\">\n              {configAccount.info.configData.name}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.keybaseUsername && (\n          <tr>\n            <td>Keybase Username</td>\n            <td className=\"text-lg-right\">\n              {configAccount.info.configData.keybaseUsername}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.website && (\n          <tr>\n            <td>Website</td>\n            <td className=\"text-lg-right\">\n              <a\n                href={configAccount.info.configData.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {configAccount.info.configData.website}\n              </a>\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.details && (\n          <tr>\n            <td>Details</td>\n            <td className=\"text-lg-right\">\n              {configAccount.info.configData.details}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.keys && configAccount.info.keys.length > 1 && (\n          <tr>\n            <td>Signer</td>\n            <td className=\"text-lg-right\">\n              <Address\n                pubkey={new PublicKey(configAccount.info.keys[1].pubkey)}\n                link\n                alignRight\n              />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { FetchStatus } from \"providers/cache\";\nimport {\n  useFetchAccountInfo,\n  useAccountInfo,\n  Account,\n  ProgramData,\n} from \"providers/accounts\";\nimport { StakeAccountSection } from \"components/account/StakeAccountSection\";\nimport { TokenAccountSection } from \"components/account/TokenAccountSection\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useCluster, ClusterStatus } from \"providers/cluster\";\nimport { NavLink, Redirect, useLocation } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { UnknownAccountCard } from \"components/account/UnknownAccountCard\";\nimport { OwnedTokensCard } from \"components/account/OwnedTokensCard\";\nimport { TransactionHistoryCard } from \"components/account/TransactionHistoryCard\";\nimport { TokenHistoryCard } from \"components/account/TokenHistoryCard\";\nimport { TokenLargestAccountsCard } from \"components/account/TokenLargestAccountsCard\";\nimport { TokenRegistry } from \"tokenRegistry\";\nimport { VoteAccountSection } from \"components/account/VoteAccountSection\";\nimport { NonceAccountSection } from \"components/account/NonceAccountSection\";\nimport { VotesCard } from \"components/account/VotesCard\";\nimport { SysvarAccountSection } from \"components/account/SysvarAccountSection\";\nimport { SlotHashesCard } from \"components/account/SlotHashesCard\";\nimport { StakeHistoryCard } from \"components/account/StakeHistoryCard\";\nimport { BlockhashesCard } from \"components/account/BlockhashesCard\";\nimport { ConfigAccountSection } from \"components/account/ConfigAccountSection\";\nimport { useFlaggedAccounts } from \"providers/accounts/flagged-accounts\";\n\nconst TABS_LOOKUP: { [id: string]: Tab } = {\n  \"spl-token:mint\": {\n    slug: \"largest\",\n    title: \"Distribution\",\n    path: \"/largest\",\n  },\n  vote: {\n    slug: \"vote-history\",\n    title: \"Vote History\",\n    path: \"/vote-history\",\n  },\n  \"sysvar:recentBlockhashes\": {\n    slug: \"blockhashes\",\n    title: \"Blockhashes\",\n    path: \"/blockhashes\",\n  },\n  \"sysvar:slotHashes\": {\n    slug: \"slot-hashes\",\n    title: \"Slot Hashes\",\n    path: \"/slot-hashes\",\n  },\n  \"sysvar:stakeHistory\": {\n    slug: \"stake-history\",\n    title: \"Stake History\",\n    path: \"/stake-history\",\n  },\n};\n\nconst TOKEN_TABS_HIDDEN = [\n  \"spl-token:mint\",\n  \"config\",\n  \"vote\",\n  \"sysvar\",\n  \"config\",\n];\n\ntype Props = { address: string; tab?: string };\nexport function AccountDetailsPage({ address, tab }: Props) {\n  let pubkey: PublicKey | undefined;\n\n  try {\n    pubkey = new PublicKey(address);\n  } catch (err) {}\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <AccountHeader address={address} />\n        </div>\n      </div>\n      {!pubkey ? (\n        <ErrorCard text={`Address \"${address}\" is not valid`} />\n      ) : (\n        <DetailsSections pubkey={pubkey} tab={tab} />\n      )}\n    </div>\n  );\n}\n\nexport function AccountHeader({ address }: { address: string }) {\n  const { cluster } = useCluster();\n  const tokenDetails = TokenRegistry.get(address, cluster);\n  if (tokenDetails) {\n    return (\n      <div className=\"row align-items-end\">\n        {tokenDetails.logo && (\n          <div className=\"col-auto\">\n            <div className=\"avatar avatar-lg header-avatar-top\">\n              <img\n                src={tokenDetails.logo}\n                alt=\"token logo\"\n                className=\"avatar-img rounded-circle border border-4 border-body\"\n              />\n            </div>\n          </div>\n        )}\n\n        <div className=\"col mb-3 ml-n3 ml-md-n2\">\n          <h6 className=\"header-pretitle\">Token</h6>\n          <h2 className=\"header-title\">{tokenDetails.name}</h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <h6 className=\"header-pretitle\">Details</h6>\n      <h2 className=\"header-title\">Account</h2>\n    </>\n  );\n}\n\nfunction DetailsSections({ pubkey, tab }: { pubkey: PublicKey; tab?: string }) {\n  const fetchAccount = useFetchAccountInfo();\n  const address = pubkey.toBase58();\n  const info = useAccountInfo(address);\n  const { status } = useCluster();\n  const location = useLocation();\n  const { flaggedAccounts } = useFlaggedAccounts();\n\n  // Fetch account on load\n  React.useEffect(() => {\n    if (!info && status === ClusterStatus.Connected) fetchAccount(pubkey);\n  }, [address, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!info || info.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (\n    info.status === FetchStatus.FetchFailed ||\n    info.data?.lamports === undefined\n  ) {\n    return <ErrorCard retry={() => fetchAccount(pubkey)} text=\"Fetch Failed\" />;\n  }\n\n  const account = info.data;\n  const data = account?.details?.data;\n  const tabs = getTabs(data);\n\n  let moreTab: MoreTabs = \"history\";\n  if (tab && tabs.filter(({ slug }) => slug === tab).length === 0) {\n    return <Redirect to={{ ...location, pathname: `/address/${address}` }} />;\n  } else if (tab) {\n    moreTab = tab as MoreTabs;\n  }\n\n  return (\n    <>\n      {flaggedAccounts.has(address) && (\n        <div className=\"alert alert-danger alert-scam\" role=\"alert\">\n          Warning! This account has been flagged as a scam account. Please be\n          cautious sending SOL to this account.\n        </div>\n      )}\n      {<InfoSection account={account} />}\n      {<MoreSection account={account} tab={moreTab} tabs={tabs} />}\n    </>\n  );\n}\n\nfunction InfoSection({ account }: { account: Account }) {\n  const data = account?.details?.data;\n\n  if (data && data.program === \"stake\") {\n    return (\n      <StakeAccountSection\n        account={account}\n        stakeAccount={data.parsed.info}\n        activation={data.activation}\n        stakeAccountType={data.parsed.type}\n      />\n    );\n  } else if (data && data.program === \"spl-token\") {\n    return <TokenAccountSection account={account} tokenAccount={data.parsed} />;\n  } else if (data && data.program === \"nonce\") {\n    return <NonceAccountSection account={account} nonceAccount={data.parsed} />;\n  } else if (data && data.program === \"vote\") {\n    return <VoteAccountSection account={account} voteAccount={data.parsed} />;\n  } else if (data && data.program === \"sysvar\") {\n    return (\n      <SysvarAccountSection account={account} sysvarAccount={data.parsed} />\n    );\n  } else if (data && data.program === \"config\") {\n    return (\n      <ConfigAccountSection account={account} configAccount={data.parsed} />\n    );\n  } else {\n    return <UnknownAccountCard account={account} />;\n  }\n}\n\ntype Tab = {\n  slug: MoreTabs;\n  title: string;\n  path: string;\n};\n\ntype MoreTabs =\n  | \"history\"\n  | \"tokens\"\n  | \"largest\"\n  | \"vote-history\"\n  | \"slot-hashes\"\n  | \"stake-history\"\n  | \"blockhashes\";\n\nfunction MoreSection({\n  account,\n  tab,\n  tabs,\n}: {\n  account: Account;\n  tab: MoreTabs;\n  tabs: Tab[];\n}) {\n  const pubkey = account.pubkey;\n  const address = account.pubkey.toBase58();\n  const data = account?.details?.data;\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body pt-0\">\n            <ul className=\"nav nav-tabs nav-overflow header-tabs\">\n              {tabs.map(({ title, slug, path }) => (\n                <li key={slug} className=\"nav-item\">\n                  <NavLink\n                    className=\"nav-link\"\n                    to={clusterPath(`/address/${address}${path}`)}\n                    exact\n                  >\n                    {title}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      {tab === \"tokens\" && (\n        <>\n          <OwnedTokensCard pubkey={pubkey} />\n          <TokenHistoryCard pubkey={pubkey} />\n        </>\n      )}\n      {tab === \"history\" && <TransactionHistoryCard pubkey={pubkey} />}\n      {tab === \"largest\" && <TokenLargestAccountsCard pubkey={pubkey} />}\n      {tab === \"vote-history\" && data?.program === \"vote\" && (\n        <VotesCard voteAccount={data.parsed} />\n      )}\n      {tab === \"slot-hashes\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"slotHashes\" && (\n          <SlotHashesCard sysvarAccount={data.parsed} />\n        )}\n      {tab === \"stake-history\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"stakeHistory\" && (\n          <StakeHistoryCard sysvarAccount={data.parsed} />\n        )}\n      {tab === \"blockhashes\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"recentBlockhashes\" && (\n          <BlockhashesCard blockhashes={data.parsed.info} />\n        )}\n    </>\n  );\n}\n\nfunction getTabs(data?: ProgramData): Tab[] {\n  const tabs: Tab[] = [\n    {\n      slug: \"history\",\n      title: \"History\",\n      path: \"\",\n    },\n  ];\n\n  let programTypeKey = \"\";\n  if (data && \"type\" in data.parsed) {\n    programTypeKey = `${data.program}:${data.parsed.type}`;\n  }\n\n  if (data && data.program in TABS_LOOKUP) {\n    tabs.push(TABS_LOOKUP[data.program]);\n  }\n\n  if (data && programTypeKey in TABS_LOOKUP) {\n    tabs.push(TABS_LOOKUP[programTypeKey]);\n  }\n\n  if (\n    !data ||\n    !(\n      TOKEN_TABS_HIDDEN.includes(data.program) ||\n      TOKEN_TABS_HIDDEN.includes(programTypeKey)\n    )\n  ) {\n    tabs.push({\n      slug: \"tokens\",\n      title: \"Tokens\",\n      path: \"/tokens\",\n    });\n  }\n\n  return tabs;\n}\n","import { EpochInfo, PerfSample } from \"@solana/web3.js\";\nimport { ClusterStatsStatus } from \"./solanaClusterStats\";\n\nexport type DashboardInfo = {\n  status: ClusterStatsStatus;\n  avgSlotTime_1h: number;\n  avgSlotTime_1min: number;\n  epochInfo: EpochInfo;\n  blockTime?: number;\n  lastBlockTime?: BlockTimeInfo;\n};\n\nexport type BlockTimeInfo = {\n  blockTime: number;\n  slot: number;\n};\n\nexport enum DashboardInfoActionType {\n  SetPerfSamples,\n  SetEpochInfo,\n  SetLastBlockTime,\n  SetError,\n  Reset,\n}\n\nexport type DashboardInfoActionSetPerfSamples = {\n  type: DashboardInfoActionType.SetPerfSamples;\n  data: PerfSample[];\n};\n\nexport type DashboardInfoActionSetEpochInfo = {\n  type: DashboardInfoActionType.SetEpochInfo;\n  data: EpochInfo;\n};\n\nexport type DashboardInfoActionReset = {\n  type: DashboardInfoActionType.Reset;\n  data: DashboardInfo;\n};\n\nexport type DashboardInfoActionSetError = {\n  type: DashboardInfoActionType.SetError;\n  data: string;\n};\n\nexport type DashboardInfoActionSetLastBlockTime = {\n  type: DashboardInfoActionType.SetLastBlockTime;\n  data: BlockTimeInfo;\n};\n\nexport type DashboardInfoAction =\n  | DashboardInfoActionSetPerfSamples\n  | DashboardInfoActionSetEpochInfo\n  | DashboardInfoActionReset\n  | DashboardInfoActionSetError\n  | DashboardInfoActionSetLastBlockTime;\n\nexport function dashboardInfoReducer(\n  state: DashboardInfo,\n  action: DashboardInfoAction\n) {\n  switch (action.type) {\n    case DashboardInfoActionType.SetLastBlockTime: {\n      const blockTime = state.blockTime || action.data.blockTime;\n      return {\n        ...state,\n        lastBlockTime: action.data,\n        blockTime,\n      };\n    }\n\n    case DashboardInfoActionType.SetPerfSamples: {\n      if (action.data.length < 1) {\n        return state;\n      }\n\n      const samples = action.data\n        .filter((sample) => {\n          return sample.numSlots !== 0;\n        })\n        .map((sample) => {\n          return sample.samplePeriodSecs / sample.numSlots;\n        })\n        .slice(0, 60);\n\n      const samplesInHour = samples.length < 60 ? samples.length : 60;\n      const avgSlotTime_1h =\n        samples.reduce((sum: number, cur: number) => {\n          return sum + cur;\n        }, 0) / samplesInHour;\n\n      const status =\n        state.epochInfo.absoluteSlot !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        avgSlotTime_1h,\n        avgSlotTime_1min: samples[0],\n        status,\n      };\n    }\n\n    case DashboardInfoActionType.SetEpochInfo: {\n      const status =\n        state.avgSlotTime_1h !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      let blockTime = state.blockTime;\n\n      // interpolate blocktime based on last known blocktime and average slot time\n      if (\n        state.lastBlockTime &&\n        state.avgSlotTime_1h !== 0 &&\n        action.data.absoluteSlot >= state.lastBlockTime.slot\n      ) {\n        blockTime =\n          state.lastBlockTime.blockTime +\n          (action.data.absoluteSlot - state.lastBlockTime.slot) *\n            Math.floor(state.avgSlotTime_1h * 1000);\n      }\n\n      return {\n        ...state,\n        epochInfo: action.data,\n        status,\n        blockTime,\n      };\n    }\n\n    case DashboardInfoActionType.SetError:\n      return {\n        ...state,\n        status: ClusterStatsStatus.Error,\n      };\n\n    case DashboardInfoActionType.Reset:\n      return {\n        ...action.data,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { PerfSample } from \"@solana/web3.js\";\nimport { ClusterStatsStatus } from \"./solanaClusterStats\";\n\nexport type PerformanceInfo = {\n  status: ClusterStatsStatus;\n  avgTps: number;\n  historyMaxTps: number;\n  perfHistory: {\n    short: (number | null)[];\n    medium: (number | null)[];\n    long: (number | null)[];\n  };\n  transactionCount: number;\n};\n\nexport enum PerformanceInfoActionType {\n  SetTransactionCount,\n  SetPerfSamples,\n  SetError,\n  Reset,\n}\n\nexport type PerformanceInfoActionSetTransactionCount = {\n  type: PerformanceInfoActionType.SetTransactionCount;\n  data: number;\n};\n\nexport type PerformanceInfoActionSetPerfSamples = {\n  type: PerformanceInfoActionType.SetPerfSamples;\n  data: PerfSample[];\n};\n\nexport type PerformanceInfoActionSetError = {\n  type: PerformanceInfoActionType.SetError;\n  data: string;\n};\n\nexport type PerformanceInfoActionReset = {\n  type: PerformanceInfoActionType.Reset;\n  data: PerformanceInfo;\n};\n\nexport type PerformanceInfoAction =\n  | PerformanceInfoActionSetTransactionCount\n  | PerformanceInfoActionSetPerfSamples\n  | PerformanceInfoActionSetError\n  | PerformanceInfoActionReset;\n\nexport function performanceInfoReducer(\n  state: PerformanceInfo,\n  action: PerformanceInfoAction\n) {\n  switch (action.type) {\n    case PerformanceInfoActionType.SetPerfSamples: {\n      if (action.data.length < 1) {\n        return state;\n      }\n\n      let short = action.data\n        .filter((sample) => {\n          return sample.numTransactions !== 0;\n        })\n        .map((sample) => {\n          return sample.numTransactions / sample.samplePeriodSecs;\n        });\n\n      const avgTps = short[0];\n      const medium = downsampleByFactor(short, 4);\n      const long = downsampleByFactor(medium, 3);\n\n      const perfHistory = {\n        short: round(short.slice(0, 30)).reverse(),\n        medium: round(medium.slice(0, 30)).reverse(),\n        long: round(long.slice(0, 30)).reverse(),\n      };\n\n      const historyMaxTps = Math.max(\n        Math.max(...perfHistory.short),\n        Math.max(...perfHistory.medium),\n        Math.max(...perfHistory.long)\n      );\n\n      const status =\n        state.transactionCount !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        historyMaxTps,\n        avgTps,\n        perfHistory,\n        status,\n      };\n    }\n\n    case PerformanceInfoActionType.SetTransactionCount: {\n      const status =\n        state.avgTps !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        transactionCount: action.data,\n        status,\n      };\n    }\n\n    case PerformanceInfoActionType.SetError:\n      return {\n        ...state,\n        status: ClusterStatsStatus.Error,\n      };\n\n    case PerformanceInfoActionType.Reset:\n      return {\n        ...action.data,\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction downsampleByFactor(series: number[], factor: number) {\n  return series.reduce((result: number[], num: number, i: number) => {\n    const downsampledIndex = Math.floor(i / factor);\n    if (result.length < downsampledIndex + 1) {\n      result.push(0);\n    }\n    const mean = result[downsampledIndex];\n    const differential = (num - mean) / ((i % factor) + 1);\n    result[downsampledIndex] = mean + differential;\n    return result;\n  }, []);\n}\n\nfunction round(series: number[]) {\n  return series.map((n) => Math.round(n));\n}\n","import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport {\n  DashboardInfo,\n  DashboardInfoActionType,\n  dashboardInfoReducer,\n} from \"./solanaDashboardInfo\";\nimport {\n  PerformanceInfo,\n  PerformanceInfoActionType,\n  performanceInfoReducer,\n} from \"./solanaPerformanceInfo\";\nimport { reportError } from \"utils/sentry\";\n\nexport const PERF_UPDATE_SEC = 5;\nexport const SAMPLE_HISTORY_HOURS = 6;\nexport const PERFORMANCE_SAMPLE_INTERVAL = 60000;\nexport const TRANSACTION_COUNT_INTERVAL = 5000;\nexport const EPOCH_INFO_INTERVAL = 2000;\nexport const BLOCK_TIME_INTERVAL = 5000;\nexport const LOADING_TIMEOUT = 10000;\n\nexport enum ClusterStatsStatus {\n  Loading,\n  Ready,\n  Error,\n}\n\nconst initialPerformanceInfo: PerformanceInfo = {\n  status: ClusterStatsStatus.Loading,\n  avgTps: 0,\n  historyMaxTps: 0,\n  perfHistory: {\n    short: [],\n    medium: [],\n    long: [],\n  },\n  transactionCount: 0,\n};\n\nconst initialDashboardInfo: DashboardInfo = {\n  status: ClusterStatsStatus.Loading,\n  avgSlotTime_1h: 0,\n  avgSlotTime_1min: 0,\n  epochInfo: {\n    absoluteSlot: 0,\n    blockHeight: 0,\n    epoch: 0,\n    slotIndex: 0,\n    slotsInEpoch: 0,\n  },\n};\n\ntype SetActive = React.Dispatch<React.SetStateAction<boolean>>;\nconst StatsProviderContext = React.createContext<\n  | {\n      setActive: SetActive;\n      setTimedOut: Function;\n      retry: Function;\n      active: boolean;\n    }\n  | undefined\n>(undefined);\n\ntype DashboardState = { info: DashboardInfo };\nconst DashboardContext = React.createContext<DashboardState | undefined>(\n  undefined\n);\n\ntype PerformanceState = { info: PerformanceInfo };\nconst PerformanceContext = React.createContext<PerformanceState | undefined>(\n  undefined\n);\n\ntype Props = { children: React.ReactNode };\nexport function SolanaClusterStatsProvider({ children }: Props) {\n  const { cluster, url } = useCluster();\n  const [active, setActive] = React.useState(false);\n  const [dashboardInfo, dispatchDashboardInfo] = React.useReducer(\n    dashboardInfoReducer,\n    initialDashboardInfo\n  );\n  const [performanceInfo, dispatchPerformanceInfo] = React.useReducer(\n    performanceInfoReducer,\n    initialPerformanceInfo\n  );\n\n  React.useEffect(() => {\n    if (!active || !url) return;\n\n    const connection = new Connection(url);\n    let lastSlot: number | null = null;\n\n    const getPerformanceSamples = async () => {\n      try {\n        const samples = await connection.getRecentPerformanceSamples(\n          60 * SAMPLE_HISTORY_HOURS\n        );\n\n        if (samples.length < 1) {\n          // no samples to work with (node has no history).\n          return; // we will allow for a timeout instead of throwing an error\n        }\n\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetPerfSamples,\n          data: samples,\n        });\n\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetPerfSamples,\n          data: samples,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetError,\n          data: error.toString(),\n        });\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetError,\n          data: error.toString(),\n        });\n        setActive(false);\n      }\n    };\n\n    const getTransactionCount = async () => {\n      try {\n        const transactionCount = await connection.getTransactionCount();\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetTransactionCount,\n          data: transactionCount,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetError,\n          data: error.toString(),\n        });\n        setActive(false);\n      }\n    };\n\n    const getEpochInfo = async () => {\n      try {\n        const epochInfo = await connection.getEpochInfo();\n        lastSlot = epochInfo.absoluteSlot;\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetEpochInfo,\n          data: epochInfo,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetError,\n          data: error.toString(),\n        });\n        setActive(false);\n      }\n    };\n\n    const getBlockTime = async () => {\n      if (lastSlot) {\n        try {\n          const blockTime = await connection.getBlockTime(lastSlot);\n          if (blockTime !== null) {\n            dispatchDashboardInfo({\n              type: DashboardInfoActionType.SetLastBlockTime,\n              data: {\n                slot: lastSlot,\n                blockTime: blockTime * 1000,\n              },\n            });\n          }\n        } catch (error) {\n          // let this fail gracefully\n        }\n      }\n    };\n\n    const performanceInterval = setInterval(\n      getPerformanceSamples,\n      PERFORMANCE_SAMPLE_INTERVAL\n    );\n    const transactionCountInterval = setInterval(\n      getTransactionCount,\n      TRANSACTION_COUNT_INTERVAL\n    );\n    const epochInfoInterval = setInterval(getEpochInfo, EPOCH_INFO_INTERVAL);\n    const blockTimeInterval = setInterval(getBlockTime, BLOCK_TIME_INTERVAL);\n\n    getPerformanceSamples();\n    getTransactionCount();\n    (async () => {\n      await getEpochInfo();\n      await getBlockTime();\n    })();\n\n    return () => {\n      clearInterval(performanceInterval);\n      clearInterval(transactionCountInterval);\n      clearInterval(epochInfoInterval);\n      clearInterval(blockTimeInterval);\n    };\n  }, [active, cluster, url]);\n\n  // Reset when cluster changes\n  React.useEffect(() => {\n    return () => {\n      resetData();\n    };\n  }, [url]);\n\n  function resetData() {\n    dispatchDashboardInfo({\n      type: DashboardInfoActionType.Reset,\n      data: initialDashboardInfo,\n    });\n    dispatchPerformanceInfo({\n      type: PerformanceInfoActionType.Reset,\n      data: initialPerformanceInfo,\n    });\n  }\n\n  const setTimedOut = React.useCallback(() => {\n    dispatchDashboardInfo({\n      type: DashboardInfoActionType.SetError,\n      data: \"Cluster stats timed out\",\n    });\n    dispatchPerformanceInfo({\n      type: PerformanceInfoActionType.SetError,\n      data: \"Cluster stats timed out\",\n    });\n    console.error(\"Cluster stats timed out\");\n    setActive(false);\n  }, []);\n\n  const retry = React.useCallback(() => {\n    resetData();\n    setActive(true);\n  }, []);\n\n  return (\n    <StatsProviderContext.Provider\n      value={{ setActive, setTimedOut, retry, active }}\n    >\n      <DashboardContext.Provider value={{ info: dashboardInfo }}>\n        <PerformanceContext.Provider value={{ info: performanceInfo }}>\n          {children}\n        </PerformanceContext.Provider>\n      </DashboardContext.Provider>\n    </StatsProviderContext.Provider>\n  );\n}\n\nexport function useStatsProvider() {\n  const context = React.useContext(StatsProviderContext);\n  if (!context) {\n    throw new Error(`useContext must be used within a StatsProvider`);\n  }\n  return context;\n}\n\nexport function useDashboardInfo() {\n  const context = React.useContext(DashboardContext);\n  if (!context) {\n    throw new Error(`useDashboardInfo must be used within a StatsProvider`);\n  }\n  return context.info;\n}\n\nexport function usePerformanceInfo() {\n  const context = React.useContext(PerformanceContext);\n  if (!context) {\n    throw new Error(`usePerformanceInfo must be used within a StatsProvider`);\n  }\n  return context.info;\n}\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport CountUp from \"react-countup\";\nimport {\n  usePerformanceInfo,\n  PERF_UPDATE_SEC,\n  ClusterStatsStatus,\n} from \"providers/stats/solanaClusterStats\";\nimport classNames from \"classnames\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { ChartOptions, ChartTooltipModel } from \"chart.js\";\nimport { PerformanceInfo } from \"providers/stats/solanaPerformanceInfo\";\nimport { StatsNotReady } from \"pages/ClusterStatsPage\";\n\nexport function TpsCard() {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h4 className=\"card-header-title\">Live Transaction Stats</h4>\n      </div>\n      <TpsCardBody />\n    </div>\n  );\n}\n\nfunction TpsCardBody() {\n  const performanceInfo = usePerformanceInfo();\n\n  if (performanceInfo.status !== ClusterStatsStatus.Ready) {\n    return (\n      <StatsNotReady\n        error={performanceInfo.status === ClusterStatsStatus.Error}\n      />\n    );\n  }\n\n  return <TpsBarChart performanceInfo={performanceInfo} />;\n}\n\ntype Series = \"short\" | \"medium\" | \"long\";\nconst SERIES: Series[] = [\"short\", \"medium\", \"long\"];\nconst SERIES_INFO = {\n  short: {\n    label: (index: number) => index,\n    interval: \"30m\",\n  },\n  medium: {\n    label: (index: number) => index * 4,\n    interval: \"2h\",\n  },\n  long: {\n    label: (index: number) => index * 12,\n    interval: \"6h\",\n  },\n};\n\nconst CUSTOM_TOOLTIP = function (this: any, tooltipModel: ChartTooltipModel) {\n  // Tooltip Element\n  let tooltipEl = document.getElementById(\"chartjs-tooltip\");\n\n  // Create element on first render\n  if (!tooltipEl) {\n    tooltipEl = document.createElement(\"div\");\n    tooltipEl.id = \"chartjs-tooltip\";\n    tooltipEl.innerHTML = `<div class=\"content\"></div>`;\n    document.body.appendChild(tooltipEl);\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltipEl.style.opacity = \"0\";\n    return;\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const { label, value } = tooltipModel.dataPoints[0];\n    const tooltipContent = tooltipEl.querySelector(\"div\");\n    if (tooltipContent) {\n      let innerHtml = `<div class=\"value\">${value} TPS</div>`;\n      innerHtml += `<div class=\"label\">${label}</div>`;\n      tooltipContent.innerHTML = innerHtml;\n    }\n  }\n\n  // Enable tooltip and set position\n  const canvas: Element = this._chart.canvas;\n  const position = canvas.getBoundingClientRect();\n  tooltipEl.style.opacity = \"1\";\n  tooltipEl.style.left =\n    position.left + window.pageXOffset + tooltipModel.caretX + \"px\";\n  tooltipEl.style.top =\n    position.top + window.pageYOffset + tooltipModel.caretY + \"px\";\n};\n\nconst CHART_OPTIONS = (historyMaxTps: number): ChartOptions => {\n  return {\n    tooltips: {\n      intersect: false, // Show tooltip when cursor in between bars\n      enabled: false, // Hide default tooltip\n      custom: CUSTOM_TOOLTIP,\n    },\n    legend: {\n      display: false,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            display: false,\n          },\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            stepSize: 100,\n            fontSize: 10,\n            fontColor: \"#EEE\",\n            beginAtZero: true,\n            display: true,\n            suggestedMax: historyMaxTps,\n          },\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n    },\n    animation: {\n      duration: 0, // general animation time\n    },\n    hover: {\n      animationDuration: 0, // duration of animations when hovering an item\n    },\n    responsiveAnimationDuration: 0, // animation duration after a resize\n  };\n};\n\ntype TpsBarChartProps = { performanceInfo: PerformanceInfo };\nfunction TpsBarChart({ performanceInfo }: TpsBarChartProps) {\n  const { perfHistory, avgTps, historyMaxTps } = performanceInfo;\n  const [series, setSeries] = React.useState<Series>(\"short\");\n  const averageTps = Math.round(avgTps).toLocaleString(\"en-US\");\n  const transactionCount = <AnimatedTransactionCount info={performanceInfo} />;\n  const seriesData = perfHistory[series];\n  const chartOptions = React.useMemo(() => CHART_OPTIONS(historyMaxTps), [\n    historyMaxTps,\n  ]);\n\n  const seriesLength = seriesData.length;\n  const chartData: Chart.ChartData = {\n    labels: seriesData.map((val, i) => {\n      return `${SERIES_INFO[series].label(seriesLength - i)}min ago`;\n    }),\n    datasets: [\n      {\n        backgroundColor: \"#00D192\",\n        hoverBackgroundColor: \"#00D192\",\n        borderWidth: 0,\n        data: seriesData.map((val) => val || 0),\n      },\n    ],\n  };\n\n  return (\n    <>\n      <TableCardBody>\n        <tr>\n          <td className=\"w-100\">Transaction count</td>\n          <td className=\"text-lg-right text-monospace\">{transactionCount} </td>\n        </tr>\n        <tr>\n          <td className=\"w-100\">Transactions per second (TPS)</td>\n          <td className=\"text-lg-right text-monospace\">{averageTps} </td>\n        </tr>\n      </TableCardBody>\n\n      <hr className=\"my-0\" />\n\n      <div className=\"card-body py-3\">\n        <div className=\"align-box-row align-items-start justify-content-between\">\n          <div className=\"d-flex justify-content-between w-100\">\n            <span className=\"mb-0 font-size-sm\">TPS history</span>\n\n            <div className=\"font-size-sm\">\n              {SERIES.map((key) => (\n                <button\n                  key={key}\n                  onClick={() => setSeries(key)}\n                  className={classNames(\"btn btn-sm btn-white ml-2\", {\n                    active: series === key,\n                  })}\n                >\n                  {SERIES_INFO[key].interval}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div\n            id=\"perf-history\"\n            className=\"mt-3 d-flex justify-content-end flex-row w-100\"\n          >\n            <div className=\"w-100\">\n              <Bar data={chartData} options={chartOptions} height={80} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction AnimatedTransactionCount({ info }: { info: PerformanceInfo }) {\n  const txCountRef = React.useRef(0);\n  const countUpRef = React.useRef({ start: 0, period: 0, lastUpdate: 0 });\n  const countUp = countUpRef.current;\n\n  const { transactionCount: txCount, avgTps } = info;\n\n  // Track last tx count to reset count up options\n  if (txCount !== txCountRef.current) {\n    if (countUp.lastUpdate > 0) {\n      // Since we overshoot below, calculate the elapsed value\n      // and start from there.\n      const elapsed = Date.now() - countUp.lastUpdate;\n      const elapsedPeriods = elapsed / (PERF_UPDATE_SEC * 1000);\n      countUp.start = countUp.start + elapsedPeriods * countUp.period;\n      countUp.period = txCount - countUp.start;\n    } else {\n      // Since this is the first tx count value, estimate the previous\n      // tx count in order to have a starting point for our animation\n      countUp.period = PERF_UPDATE_SEC * avgTps;\n      countUp.start = txCount - countUp.period;\n    }\n    countUp.lastUpdate = Date.now();\n    txCountRef.current = txCount;\n  }\n\n  // Overshoot the target tx count in case the next update is delayed\n  const COUNT_PERIODS = 3;\n  const countUpEnd = countUp.start + COUNT_PERIODS * countUp.period;\n  return (\n    <CountUp\n      start={countUp.start}\n      end={countUpEnd}\n      duration={PERF_UPDATE_SEC * COUNT_PERIODS}\n      delay={0}\n      useEasing={false}\n      preserveValue={true}\n      separator=\",\"\n    />\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Slot } from \"components/common/Slot\";\nimport {\n  ClusterStatsStatus,\n  useDashboardInfo,\n  usePerformanceInfo,\n  useStatsProvider,\n} from \"providers/stats/solanaClusterStats\";\nimport { slotsToHumanString } from \"utils\";\nimport { useCluster } from \"providers/cluster\";\nimport { TpsCard } from \"components/TpsCard\";\nimport { displayTimestampUtc } from \"utils/date\";\n\nconst CLUSTER_STATS_TIMEOUT = 10000;\n\nexport function ClusterStatsPage() {\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Live Cluster Stats</h4>\n            </div>\n          </div>\n        </div>\n        <StatsCardBody />\n      </div>\n      <TpsCard />\n    </div>\n  );\n}\n\nfunction StatsCardBody() {\n  const dashboardInfo = useDashboardInfo();\n  const performanceInfo = usePerformanceInfo();\n  const { setActive } = useStatsProvider();\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    setActive(true);\n    return () => setActive(false);\n  }, [setActive, cluster]);\n\n  if (\n    performanceInfo.status !== ClusterStatsStatus.Ready ||\n    dashboardInfo.status !== ClusterStatsStatus.Ready\n  ) {\n    const error =\n      performanceInfo.status === ClusterStatsStatus.Error ||\n      dashboardInfo.status === ClusterStatsStatus.Error;\n    return <StatsNotReady error={error} />;\n  }\n\n  const {\n    avgSlotTime_1h,\n    avgSlotTime_1min,\n    epochInfo,\n    blockTime,\n  } = dashboardInfo;\n  const hourlySlotTime = Math.round(1000 * avgSlotTime_1h);\n  const averageSlotTime = Math.round(1000 * avgSlotTime_1min);\n  const { slotIndex, slotsInEpoch } = epochInfo;\n  const currentEpoch = epochInfo.epoch.toString();\n  const epochProgress = ((100 * slotIndex) / slotsInEpoch).toFixed(1) + \"%\";\n  const epochTimeRemaining = slotsToHumanString(\n    slotsInEpoch - slotIndex,\n    hourlySlotTime\n  );\n  const { blockHeight, absoluteSlot } = epochInfo;\n\n  return (\n    <TableCardBody>\n      <tr>\n        <td className=\"w-100\">Slot</td>\n        <td className=\"text-lg-right text-monospace\">\n          <Slot slot={absoluteSlot} link />\n        </td>\n      </tr>\n      {blockHeight !== undefined && (\n        <tr>\n          <td className=\"w-100\">Block height</td>\n          <td className=\"text-lg-right text-monospace\">\n            <Slot slot={blockHeight} />\n          </td>\n        </tr>\n      )}\n      {blockTime && (\n        <tr>\n          <td className=\"w-100\">Cluster time</td>\n          <td className=\"text-lg-right text-monospace\">\n            {displayTimestampUtc(blockTime)}\n          </td>\n        </tr>\n      )}\n      <tr>\n        <td className=\"w-100\">Slot time (1min average)</td>\n        <td className=\"text-lg-right text-monospace\">{averageSlotTime}ms</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Slot time (1hr average)</td>\n        <td className=\"text-lg-right text-monospace\">{hourlySlotTime}ms</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch</td>\n        <td className=\"text-lg-right text-monospace\">{currentEpoch}</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch progress</td>\n        <td className=\"text-lg-right text-monospace\">{epochProgress}</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch time remaining (approx.)</td>\n        <td className=\"text-lg-right text-monospace\">~{epochTimeRemaining}</td>\n      </tr>\n    </TableCardBody>\n  );\n}\n\nexport function StatsNotReady({ error }: { error: boolean }) {\n  const { setTimedOut, retry, active } = useStatsProvider();\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    let timedOut = 0;\n    if (!error) {\n      timedOut = setTimeout(setTimedOut, CLUSTER_STATS_TIMEOUT);\n    }\n    return () => {\n      if (timedOut) {\n        clearTimeout(timedOut);\n      }\n    };\n  }, [setTimedOut, cluster, error]);\n\n  if (error || !active) {\n    return (\n      <div className=\"card-body text-center\">\n        There was a problem loading cluster stats.{\" \"}\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => {\n            retry();\n          }}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card-body text-center\">\n      <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n      Loading\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { AccountBalancePair, Connection } from \"@solana/web3.js\";\nimport { useCluster, ClusterStatus, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum Status {\n  Idle,\n  Disconnected,\n  Connecting,\n}\n\ntype RichLists = {\n  total: AccountBalancePair[];\n  circulating: AccountBalancePair[];\n  nonCirculating: AccountBalancePair[];\n};\n\ntype State = RichLists | Status | string;\n\ntype Dispatch = React.Dispatch<React.SetStateAction<State>>;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function RichListProvider({ children }: Props) {\n  const [state, setState] = React.useState<State>(Status.Idle);\n  const { status: clusterStatus, cluster, url } = useCluster();\n\n  React.useEffect(() => {\n    if (state !== Status.Idle) {\n      switch (clusterStatus) {\n        case ClusterStatus.Connecting: {\n          setState(Status.Disconnected);\n          break;\n        }\n        case ClusterStatus.Connected: {\n          fetch(setState, cluster, url);\n          break;\n        }\n      }\n    }\n  }, [clusterStatus, cluster, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={setState}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetch(dispatch: Dispatch, cluster: Cluster, url: string) {\n  dispatch(Status.Connecting);\n\n  try {\n    const connection = new Connection(url, \"max\");\n\n    const [total, circulating, nonCirculating] = (\n      await Promise.all([\n        connection.getLargestAccounts(),\n        connection.getLargestAccounts({ filter: \"circulating\" }),\n        connection.getLargestAccounts({ filter: \"nonCirculating\" }),\n      ])\n    ).map((response) => response.value);\n\n    // Update state if still connecting\n    dispatch((state) => {\n      if (state !== Status.Connecting) return state;\n      return { total, circulating, nonCirculating };\n    });\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { url });\n    }\n    dispatch(\"Failed to fetch top accounts\");\n  }\n}\n\nexport function useRichList() {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRichList must be used within a RichListProvider`);\n  }\n  return state;\n}\n\nexport function useFetchRichList() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchRichList must be used within a RichListProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(() => {\n    fetch(dispatch, cluster, url);\n  }, [dispatch, cluster, url]);\n}\n","import React from \"react\";\n\nimport { Supply, Connection } from \"@solana/web3.js\";\nimport { useCluster, ClusterStatus, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum Status {\n  Idle,\n  Disconnected,\n  Connecting,\n}\n\ntype State = Supply | Status | string;\n\ntype Dispatch = React.Dispatch<React.SetStateAction<State>>;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function SupplyProvider({ children }: Props) {\n  const [state, setState] = React.useState<State>(Status.Idle);\n  const { status: clusterStatus, cluster, url } = useCluster();\n\n  React.useEffect(() => {\n    if (state !== Status.Idle) {\n      if (clusterStatus === ClusterStatus.Connecting)\n        setState(Status.Disconnected);\n      if (clusterStatus === ClusterStatus.Connected)\n        fetch(setState, cluster, url);\n    }\n  }, [clusterStatus, cluster, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={setState}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetch(dispatch: Dispatch, cluster: Cluster, url: string) {\n  dispatch(Status.Connecting);\n\n  try {\n    const connection = new Connection(url, \"max\");\n    const supply = (await connection.getSupply()).value;\n\n    // Update state if still connecting\n    dispatch((state) => {\n      if (state !== Status.Connecting) return state;\n      return supply;\n    });\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { url });\n    }\n    dispatch(\"Failed to fetch supply\");\n  }\n}\n\nexport function useSupply() {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useSupply must be used within a SupplyProvider`);\n  }\n  return state;\n}\n\nexport function useFetchSupply() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchSupply must be used within a SupplyProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(() => {\n    fetch(dispatch, cluster, url);\n  }, [dispatch, cluster, url]);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { AccountBalancePair } from \"@solana/web3.js\";\nimport { useRichList, useFetchRichList, Status } from \"providers/richList\";\nimport { LoadingCard } from \"./common/LoadingCard\";\nimport { ErrorCard } from \"./common/ErrorCard\";\nimport { lamportsToSolString } from \"utils\";\nimport { useQuery } from \"utils/url\";\nimport { useSupply } from \"providers/supply\";\nimport { Address } from \"./common/Address\";\n\ntype Filter = \"circulating\" | \"nonCirculating\" | \"all\" | null;\n\nexport function TopAccountsCard() {\n  const supply = useSupply();\n  const richList = useRichList();\n  const fetchRichList = useFetchRichList();\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  if (typeof supply !== \"object\") return null;\n\n  if (richList === Status.Disconnected) {\n    return <ErrorCard text=\"Not connected to the cluster\" />;\n  }\n\n  if (richList === Status.Connecting) {\n    return <LoadingCard />;\n  }\n\n  if (typeof richList === \"string\") {\n    return <ErrorCard text={richList} retry={fetchRichList} />;\n  }\n\n  let supplyCount: number;\n  let accounts, header;\n\n  if (richList !== Status.Idle) {\n    switch (filter) {\n      case \"nonCirculating\": {\n        accounts = richList.nonCirculating;\n        supplyCount = supply.nonCirculating;\n        header = \"Non-Circulating\";\n        break;\n      }\n      case \"all\": {\n        accounts = richList.total;\n        supplyCount = supply.total;\n        header = \"Total\";\n        break;\n      }\n      case \"circulating\":\n      default: {\n        accounts = richList.circulating;\n        supplyCount = supply.circulating;\n        header = \"Circulating\";\n        break;\n      }\n    }\n  }\n\n  return (\n    <>\n      {showDropdown && (\n        <div className=\"dropdown-exit\" onClick={() => setDropdown(false)} />\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Largest Accounts</h4>\n            </div>\n\n            <div className=\"col-auto\">\n              <FilterDropdown\n                filter={filter}\n                toggle={() => setDropdown((show) => !show)}\n                show={showDropdown}\n              />\n            </div>\n          </div>\n        </div>\n\n        {richList === Status.Idle && (\n          <div className=\"card-body\">\n            <span\n              className=\"btn btn-white ml-3 d-none d-md-inline\"\n              onClick={fetchRichList}\n            >\n              Load Largest Accounts\n            </span>\n          </div>\n        )}\n\n        {accounts && (\n          <div className=\"table-responsive mb-0\">\n            <table className=\"table table-sm table-nowrap card-table\">\n              <thead>\n                <tr>\n                  <th className=\"text-muted\">Rank</th>\n                  <th className=\"text-muted\">Address</th>\n                  <th className=\"text-muted text-right\">Balance (SOL)</th>\n                  <th className=\"text-muted text-right\">\n                    % of {header} Supply\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"list\">\n                {accounts.map((account, index) =>\n                  renderAccountRow(account, index, supplyCount)\n                )}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (\n  account: AccountBalancePair,\n  index: number,\n  supply: number\n) => {\n  return (\n    <tr key={index}>\n      <td>\n        <span className=\"badge badge-soft-gray badge-pill\">{index + 1}</span>\n      </td>\n      <td>\n        <Address pubkey={account.address} link />\n      </td>\n      <td className=\"text-right\">{lamportsToSolString(account.lamports, 0)}</td>\n      <td className=\"text-right\">{`${(\n        (100 * account.lamports) /\n        supply\n      ).toFixed(3)}%`}</td>\n    </tr>\n  );\n};\n\nconst useQueryFilter = (): Filter => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  if (\n    filter === \"circulating\" ||\n    filter === \"nonCirculating\" ||\n    filter === \"all\"\n  ) {\n    return filter;\n  } else {\n    return null;\n  }\n};\n\nconst filterTitle = (filter: Filter): string => {\n  switch (filter) {\n    case \"nonCirculating\": {\n      return \"Non-Circulating\";\n    }\n    case \"all\": {\n      return \"All\";\n    }\n    case \"circulating\":\n    default: {\n      return \"Circulating\";\n    }\n  }\n};\n\ntype DropdownProps = {\n  filter: Filter;\n  toggle: () => void;\n  show: boolean;\n};\n\nconst FilterDropdown = ({ filter, toggle, show }: DropdownProps) => {\n  const buildLocation = (location: Location, filter: Filter) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === null) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const FILTERS: Filter[] = [\"all\", null, \"nonCirculating\"];\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {filterTitle(filter)}\n      </button>\n      <div\n        className={`dropdown-menu-right dropdown-menu${show ? \" show\" : \"\"}`}\n      >\n        {FILTERS.map((filterOption) => {\n          return (\n            <Link\n              key={filterOption || \"null\"}\n              to={(location) => buildLocation(location, filterOption)}\n              className={`dropdown-item${\n                filterOption === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {filterTitle(filterOption)}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSupply, useFetchSupply, Status } from \"providers/supply\";\nimport { LoadingCard } from \"./common/LoadingCard\";\nimport { ErrorCard } from \"./common/ErrorCard\";\nimport { lamportsToSolString } from \"utils\";\nimport { TableCardBody } from \"./common/TableCardBody\";\n\nexport function SupplyCard() {\n  const supply = useSupply();\n  const fetchSupply = useFetchSupply();\n\n  // Fetch supply on load\n  React.useEffect(() => {\n    if (supply === Status.Idle) fetchSupply();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (supply === Status.Disconnected) {\n    return <ErrorCard text=\"Not connected to the cluster\" />;\n  }\n\n  if (supply === Status.Idle || supply === Status.Connecting)\n    return <LoadingCard />;\n\n  if (typeof supply === \"string\") {\n    return <ErrorCard text={supply} retry={fetchSupply} />;\n  }\n\n  return (\n    <div className=\"card\">\n      {renderHeader()}\n\n      <TableCardBody>\n        <tr>\n          <td className=\"w-100\">Total Supply (SOL)</td>\n          <td className=\"text-lg-right\">\n            {lamportsToSolString(supply.total, 0)}\n          </td>\n        </tr>\n\n        <tr>\n          <td className=\"w-100\">Circulating Supply (SOL)</td>\n          <td className=\"text-lg-right\">\n            {lamportsToSolString(supply.circulating, 0)}\n          </td>\n        </tr>\n\n        <tr>\n          <td className=\"w-100\">Non-Circulating Supply (SOL)</td>\n          <td className=\"text-lg-right\">\n            {lamportsToSolString(supply.nonCirculating, 0)}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nconst renderHeader = () => {\n  return (\n    <div className=\"card-header\">\n      <div className=\"row align-items-center\">\n        <div className=\"col\">\n          <h4 className=\"card-header-title\">Supply Overview</h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport * as Sentry from \"@sentry/react\";\nimport * as Cache from \"providers/cache\";\nimport { Connection, ConfirmedBlock } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"./cluster\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\ntype Block = {\n  block?: ConfirmedBlock;\n};\n\ntype State = Cache.State<Block>;\ntype Dispatch = Cache.Dispatch<Block>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype BlockProviderProps = { children: React.ReactNode };\n\nexport function BlockProvider({ children }: BlockProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Block>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useBlock(key: number): Cache.CacheEntry<Block> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useBlock must be used within a BlockProvider`);\n  }\n\n  return context.entries[key];\n}\n\nexport async function fetchBlock(\n  dispatch: Dispatch,\n  url: string,\n  cluster: Cluster,\n  key: number\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key,\n    url,\n  });\n\n  let status: FetchStatus;\n  let data: Block | undefined = undefined;\n\n  try {\n    const connection = new Connection(url, \"max\");\n    data = { block: await connection.getConfirmedBlock(Number(key)) };\n    status = FetchStatus.Fetched;\n  } catch (err) {\n    const error = err as Error;\n    if (error.message.includes(\"not found\")) {\n      data = {} as Block;\n      status = FetchStatus.Fetched;\n    } else {\n      status = FetchStatus.FetchFailed;\n      if (cluster !== Cluster.Custom) {\n        Sentry.captureException(error, { tags: { url } });\n      }\n    }\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key,\n    status,\n    data,\n  });\n}\n\nexport function useFetchBlock() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchBlock must be used within a BlockProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (key: number) => fetchBlock(dispatch, url, cluster, key),\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport { TopAccountsCard } from \"components/TopAccountsCard\";\nimport { SupplyCard } from \"components/SupplyCard\";\n\nexport function SupplyPage() {\n  return (\n    <div className=\"container mt-4\">\n      <SupplyCard />\n      <TopAccountsCard />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ConfirmedBlock } from \"@solana/web3.js\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Signature } from \"components/common/Signature\";\nimport bs58 from \"bs58\";\n\nexport function BlockHistoryCard({ block }: { block: ConfirmedBlock }) {\n  if (block.transactions.length === 0) {\n    return <ErrorCard text=\"This block has no transactions\" />;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Transactions</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {block.transactions.map((tx, i) => {\n              let statusText;\n              let statusClass;\n              let signature: React.ReactNode;\n              if (tx.meta?.err || !tx.transaction.signature) {\n                statusClass = \"warning\";\n                statusText = \"Failed\";\n              } else {\n                statusClass = \"success\";\n                statusText = \"Success\";\n              }\n\n              if (tx.transaction.signature) {\n                signature = (\n                  <Signature\n                    signature={bs58.encode(tx.transaction.signature)}\n                    link\n                  />\n                );\n              }\n\n              return (\n                <tr key={i}>\n                  <td>\n                    <span className={`badge badge-soft-${statusClass}`}>\n                      {statusText}\n                    </span>\n                  </td>\n\n                  <td>{signature}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { lamportsToSolString } from \"utils\";\nimport { ConfirmedBlock, PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\n\nconst PAGE_SIZE = 10;\n\nexport function BlockRewardsCard({ block }: { block: ConfirmedBlock }) {\n  const [rewardsDisplayed, setRewardsDisplayed] = React.useState(PAGE_SIZE);\n\n  if (block.rewards.length < 1) {\n    return null;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Rewards</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Type</th>\n              <th className=\"text-muted\">Amount</th>\n              <th className=\"text-muted\">New Balance</th>\n              <th className=\"text-muted\">Percent Change</th>\n            </tr>\n          </thead>\n          <tbody>\n            {block.rewards.map((reward, index) => {\n              if (index >= rewardsDisplayed - 1) {\n                return null;\n              }\n\n              let percentChange;\n              if (reward.postBalance !== null && reward.postBalance !== 0) {\n                percentChange = (\n                  (Math.abs(reward.lamports) /\n                    (reward.postBalance - reward.lamports)) *\n                  100\n                ).toFixed(9);\n              }\n              return (\n                <tr key={reward.pubkey + reward.rewardType}>\n                  <td>\n                    <Address pubkey={new PublicKey(reward.pubkey)} link />\n                  </td>\n                  <td>{reward.rewardType}</td>\n                  <td>{lamportsToSolString(reward.lamports)}</td>\n                  <td>\n                    {reward.postBalance\n                      ? lamportsToSolString(reward.postBalance)\n                      : \"-\"}\n                  </td>\n                  <td>{percentChange ? percentChange + \"%\" : \"-\"}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {block.rewards.length > rewardsDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setRewardsDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { useBlock, useFetchBlock, FetchStatus } from \"providers/block\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { BlockHistoryCard } from \"./BlockHistoryCard\";\nimport { BlockRewardsCard } from \"./BlockRewardsCard\";\n\nexport function BlockOverviewCard({ slot }: { slot: number }) {\n  const confirmedBlock = useBlock(slot);\n  const fetchBlock = useFetchBlock();\n  const { status } = useCluster();\n  const refresh = () => fetchBlock(slot);\n\n  // Fetch block on load\n  React.useEffect(() => {\n    if (!confirmedBlock && status === ClusterStatus.Connected) refresh();\n  }, [slot, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!confirmedBlock || confirmedBlock.status === FetchStatus.Fetching) {\n    return <LoadingCard message=\"Loading block\" />;\n  } else if (\n    confirmedBlock.data === undefined ||\n    confirmedBlock.status === FetchStatus.FetchFailed\n  ) {\n    return <ErrorCard retry={refresh} text=\"Failed to fetch block\" />;\n  } else if (confirmedBlock.data.block === undefined) {\n    return <ErrorCard retry={refresh} text={`Block ${slot} was not found`} />;\n  }\n\n  const block = confirmedBlock.data.block;\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n            Overview\n          </h3>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td className=\"w-100\">Slot</td>\n            <td className=\"text-lg-right text-monospace\">\n              <Slot slot={slot} />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Parent Slot</td>\n            <td className=\"text-lg-right text-monospace\">\n              <Slot slot={block.parentSlot} link />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Blockhash</td>\n            <td className=\"text-lg-right text-monospace\">\n              <span>{block.blockhash}</span>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Previous Blockhash</td>\n            <td className=\"text-lg-right text-monospace\">\n              <span>{block.previousBlockhash}</span>\n            </td>\n          </tr>\n        </TableCardBody>\n      </div>\n\n      <BlockRewardsCard block={block} />\n      <BlockHistoryCard block={block} />\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { BlockOverviewCard } from \"components/block/BlockOverviewCard\";\n\ntype Props = { slot: string };\n\nexport function BlockDetailsPage({ slot }: Props) {\n  let output = <ErrorCard text={`Block ${slot} is not valid`} />;\n\n  if (!isNaN(Number(slot))) {\n    output = <BlockOverviewCard slot={Number(slot)} />;\n  }\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Block</h2>\n        </div>\n      </div>\n      {output}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport { ClusterModal } from \"components/ClusterModal\";\nimport { MessageBanner } from \"components/MessageBanner\";\nimport { Navbar } from \"components/Navbar\";\nimport { ClusterStatusBanner } from \"components/ClusterStatusButton\";\nimport { SearchBar } from \"components/SearchBar\";\n\nimport { AccountDetailsPage } from \"pages/AccountDetailsPage\";\nimport { ClusterStatsPage } from \"pages/ClusterStatsPage\";\nimport { SupplyPage } from \"pages/SupplyPage\";\nimport { TransactionDetailsPage } from \"pages/TransactionDetailsPage\";\nimport { BlockDetailsPage } from \"pages/BlockDetailsPage\";\n\nconst ADDRESS_ALIASES = [\"account\", \"accounts\", \"addresses\"];\nconst TX_ALIASES = [\"txs\", \"txn\", \"txns\", \"transaction\", \"transactions\"];\n\nfunction App() {\n  return (\n    <>\n      <ClusterModal />\n      <div className=\"main-content\">\n        <Navbar />\n        <MessageBanner />\n        <ClusterStatusBanner />\n        <SearchBar />\n        <Switch>\n          <Route exact path={[\"/supply\", \"/accounts\", \"accounts/top\"]}>\n            <SupplyPage />\n          </Route>\n          <Route\n            exact\n            path={TX_ALIASES.map((tx) => `/${tx}/:signature`)}\n            render={({ match, location }) => {\n              let pathname = `/tx/${match.params.signature}`;\n              return <Redirect to={{ ...location, pathname }} />;\n            }}\n          />\n          <Route\n            exact\n            path={\"/tx/:signature\"}\n            render={({ match }) => (\n              <TransactionDetailsPage signature={match.params.signature} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/block/:id\"}\n            render={({ match }) => <BlockDetailsPage slot={match.params.id} />}\n          />\n          <Route\n            exact\n            path={[\n              ...ADDRESS_ALIASES.map((path) => `/${path}/:address`),\n              ...ADDRESS_ALIASES.map((path) => `/${path}/:address/:tab`),\n            ]}\n            render={({ match, location }) => {\n              let pathname = `/address/${match.params.address}`;\n              if (match.params.tab) {\n                pathname += `/${match.params.tab}`;\n              }\n              return <Redirect to={{ ...location, pathname }} />;\n            }}\n          />\n          <Route\n            exact\n            path={[\"/address/:address\", \"/address/:address/:tab\"]}\n            render={({ match }) => (\n              <AccountDetailsPage\n                address={match.params.address}\n                tab={match.params.tab}\n              />\n            )}\n          />\n          <Route exact path=\"/\">\n            <ClusterStatsPage />\n          </Route>\n          <Route\n            render={({ location }) => (\n              <Redirect to={{ ...location, pathname: \"/\" }} />\n            )}\n          />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { SolanaClusterStatsProvider } from \"./solanaClusterStats\";\n\ntype Props = { children: React.ReactNode };\nexport function StatsProvider({ children }: Props) {\n  return <SolanaClusterStatsProvider>{children}</SolanaClusterStatsProvider>;\n}\n","import React from \"react\";\nimport { LargestAccountsProvider } from \"./largest\";\n\ntype ProviderProps = { children: React.ReactNode };\nexport function MintsProvider({ children }: ProviderProps) {\n  return <LargestAccountsProvider>{children}</LargestAccountsProvider>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as Sentry from \"@sentry/react\";\nimport \"./scss/theme-dark.scss\";\nimport App from \"./App\";\nimport { ClusterProvider } from \"./providers/cluster\";\nimport { RichListProvider } from \"./providers/richList\";\nimport { SupplyProvider } from \"./providers/supply\";\nimport { TransactionsProvider } from \"./providers/transactions\";\nimport { AccountsProvider } from \"./providers/accounts\";\nimport { BlockProvider } from \"./providers/block\";\nimport { StatsProvider } from \"providers/stats\";\nimport { MintsProvider } from \"providers/mints\";\n\nif (process.env.NODE_ENV === \"production\") {\n  Sentry.init({\n    dsn:\n      \"https://5efdc15b4828434fbe949b5daed472be@o434108.ingest.sentry.io/5390542\",\n  });\n}\n\nReactDOM.render(\n  <Router>\n    <ClusterProvider>\n      <StatsProvider>\n        <SupplyProvider>\n          <RichListProvider>\n            <AccountsProvider>\n              <BlockProvider>\n                <MintsProvider>\n                  <TransactionsProvider>\n                    <App />\n                  </TransactionsProvider>\n                </MintsProvider>\n              </BlockProvider>\n            </AccountsProvider>\n          </RichListProvider>\n        </SupplyProvider>\n      </StatsProvider>\n    </ClusterProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}